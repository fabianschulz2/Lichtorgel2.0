#define MCG_WINRT_SUPPORTED
using Mcg.System;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.WindowsRuntime;
using global::Windows.Foundation;
using global::Windows.Foundation.Collections;


// -----------------------------------------------------------------------------------------------------------
// 
// WARNING: THIS SOURCE FILE IS FOR 64-BIT BUILDS ONLY!
// 
// MCG GENERATED CODE
// 
// This C# source file is generated by MCG and is added into the application at compile time to support interop features.
// 
// It has three primary components:
// 
// 1. Public type definitions with interop implementation used by this application including WinRT & COM data structures and P/Invokes.
// 
// 2. The '__Interop' class containing marshaling code that acts as a bridge from managed code to native code.
// 
// 3. The 'McgNative' class containing marshaling code and native type definitions that call into native code and are called by native code.
// 
// -----------------------------------------------------------------------------------------------------------
// 
// warning CS0067: The event 'event' is never used
#pragma warning disable 67
// warning CS0169: The field 'field' is never used
#pragma warning disable 169
// warning CS0649: Field 'field' is never assigned to, and will always have its default value 0
#pragma warning disable 414
// warning CS0414: The private field 'field' is assigned but its value is never used
#pragma warning disable 649
// warning CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// warning CS0108 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable 108
// warning CS0114 'member1' hides inherited member 'member2'.  To make the current method override that implementation, add the override keyword. Otherwise add the new keyword.
#pragma warning disable 114
// warning CS0659 'type' overrides Object.Equals but does not override GetHashCode.
#pragma warning disable 659
// warning CS0465 Introducing a 'Finalize' method can interfere with destructor invocation. Did you intend to declare a destructor?
#pragma warning disable 465
// warning CS0028 'function declaration' has the wrong signature to be an entry point
#pragma warning disable 28
// warning CS0162 Unreachable code Detected
#pragma warning disable 162
// warning CS0628 new protected member declared in sealed class
#pragma warning disable 628

namespace __Interop
{
	/// <summary>
	/// P/Invoke class for module 'kernel32.dll'
	/// </summary>
	public unsafe static partial class kernel32_dll
	{
		// Signature, GetProcAddress, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Utils.NativeMethods", "GetProcAddress")]
		public static global::System.IntPtr GetProcAddress(
					global::System.IntPtr hModule, 
					string procedureName)
		{
			// Setup
			byte* unsafe_procedureName = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_procedureName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(procedureName, true, false);
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetProcAddress(
									hModule, 
									unsafe_procedureName
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_procedureName);
			}
		}

		// Signature, FreeLibrary, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Utils.NativeMethods", "FreeLibrary")]
		public static bool FreeLibrary(global::System.IntPtr hModule)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.FreeLibrary(hModule);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, TerminateProcess, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeProcessHandle__System_Diagnostics_Process____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "TerminateProcess")]
		public static bool TerminateProcess(
					global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process processHandle, 
					int exitCode)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			processHandle.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.TerminateProcess(
								processHandle.DangerousGetHandle(), 
								exitCode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				processHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetExitCodeProcess, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeProcessHandle__System_Diagnostics_Process____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetExitCodeProcess")]
		public static bool GetExitCodeProcess(
					global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process processHandle, 
					out int exitCode)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			processHandle.DangerousAddRef(ref addRefed);
			fixed (int* pinned_exitCode = &(exitCode))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetExitCodeProcess(
									processHandle.DangerousGetHandle(), 
									pinned_exitCode
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				processHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetConsoleCursorInfo, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] __Interop_Kernel32_CONSOLE_CURSOR_INFO__System_Console____Interop_Kernel32_CONSOLE_CURSOR_INFO__System_Console, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetConsoleCursorInfo")]
		public static bool GetConsoleCursorInfo(
					global::System.IntPtr hConsoleOutput, 
					out global::_.Interop_Kernel32_CONSOLE_CURSOR_INFO__System_Console cci)
		{
			// Setup
			global::_.Interop_Kernel32_CONSOLE_CURSOR_INFO__System_Console__Impl.UnsafeType unsafe_cci = default(global::_.Interop_Kernel32_CONSOLE_CURSOR_INFO__System_Console__Impl.UnsafeType);
			int unsafe___value;
			// Marshalling
			unsafe_cci = default(global::_.Interop_Kernel32_CONSOLE_CURSOR_INFO__System_Console__Impl.UnsafeType);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetConsoleCursorInfo(
								hConsoleOutput, 
								&(unsafe_cci)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::_.Interop_Kernel32_CONSOLE_CURSOR_INFO__System_Console__Impl.Marshal__UnsafeToSafe(
								ref unsafe_cci, 
								out cci
							);
			// Return
			return unsafe___value != 0;
		}

		// Signature, SetConsoleCursorInfo, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] __Interop_Kernel32_CONSOLE_CURSOR_INFO__System_Console____Interop_Kernel32_CONSOLE_CURSOR_INFO__System_Console, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "SetConsoleCursorInfo")]
		public static bool SetConsoleCursorInfo(
					global::System.IntPtr hConsoleOutput, 
					ref global::_.Interop_Kernel32_CONSOLE_CURSOR_INFO__System_Console cci)
		{
			// Setup
			global::_.Interop_Kernel32_CONSOLE_CURSOR_INFO__System_Console__Impl.UnsafeType unsafe_cci = default(global::_.Interop_Kernel32_CONSOLE_CURSOR_INFO__System_Console__Impl.UnsafeType);
			int unsafe___value;
			// Marshalling
			global::_.Interop_Kernel32_CONSOLE_CURSOR_INFO__System_Console__Impl.Marshal__SafeToUnsafe(
								ref cci, 
								out unsafe_cci
							);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.SetConsoleCursorInfo(
								hConsoleOutput, 
								&(unsafe_cci)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::_.Interop_Kernel32_CONSOLE_CURSOR_INFO__System_Console__Impl.Marshal__UnsafeToSafe(
								ref unsafe_cci, 
								out cci
							);
			// Return
			return unsafe___value != 0;
		}

		// Signature, SetConsoleOutputCP, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "SetConsoleOutputCP")]
		public static bool SetConsoleOutputCP(int codePage)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.SetConsoleOutputCP(codePage);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, SetConsoleCursorPosition, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0004314C] __Interop_Kernel32_COORD__System_Console____Interop_Kernel32_COORD__System_Console, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "SetConsoleCursorPosition")]
		public static bool SetConsoleCursorPosition(
					global::System.IntPtr hConsoleOutput, 
					global::_.Interop_Kernel32_COORD__System_Console cursorPosition)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.SetConsoleCursorPosition(
								hConsoleOutput, 
								cursorPosition
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, SetConsoleTextAttribute, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] short__short, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "SetConsoleTextAttribute")]
		public static int SetConsoleTextAttribute(
					global::System.IntPtr hConsoleOutput, 
					short wAttributes)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.SetConsoleTextAttribute(
								hConsoleOutput, 
								wAttributes
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, ReadConsoleInput, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_InputRecord__System_Console____Interop_InputRecord__System_Console, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "ReadConsoleInput")]
		public static bool ReadConsoleInput(
					global::System.IntPtr hConsoleInput, 
					out global::_.Interop_InputRecord__System_Console buffer, 
					int numInputRecords_UseOne, 
					out int numEventsRead)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_InputRecord__System_Console* pinned_buffer = &(buffer))
				fixed (int* pinned_numEventsRead = &(numEventsRead))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.ReadConsoleInput(
										hConsoleInput, 
										pinned_buffer, 
										numInputRecords_UseOne, 
										pinned_numEventsRead
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			// Return
			return unsafe___value != 0;
		}

		// Signature, FillConsoleOutputCharacter, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000418E8] char__wchar_t, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x0004314C] __Interop_Kernel32_COORD__System_Console____Interop_Kernel32_COORD__System_Console, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FillConsoleOutputCharacter")]
		public static bool FillConsoleOutputCharacter(
					global::System.IntPtr hConsoleOutput, 
					char character, 
					int nLength, 
					global::_.Interop_Kernel32_COORD__System_Console dwWriteCoord, 
					out int pNumCharsWritten)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_pNumCharsWritten = &(pNumCharsWritten))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FillConsoleOutputCharacter(
									hConsoleOutput, 
									((ushort)character), 
									nLength, 
									dwWriteCoord, 
									pinned_pNumCharsWritten
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, FillConsoleOutputAttribute, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] short__short, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x0004314C] __Interop_Kernel32_COORD__System_Console____Interop_Kernel32_COORD__System_Console, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FillConsoleOutputAttribute")]
		public static bool FillConsoleOutputAttribute(
					global::System.IntPtr hConsoleOutput, 
					short wColorAttribute, 
					int numCells, 
					global::_.Interop_Kernel32_COORD__System_Console startCoord, 
					out int pNumBytesWritten)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_pNumBytesWritten = &(pNumBytesWritten))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FillConsoleOutputAttribute(
									hConsoleOutput, 
									wColorAttribute, 
									numCells, 
									startCoord, 
									pinned_pNumBytesWritten
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CloseHandle, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "CloseHandle")]
		public static bool CloseHandle(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.CloseHandle(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetCurrentProcess, [fwd] [return] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeProcessHandle__System_Diagnostics_Process____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCurrentProcess")]
		public static global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process GetCurrentProcess()
		{
			// Setup
			global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCurrentProcess();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, DuplicateHandle, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeProcessHandle__System_Diagnostics_Process____w64 int, [fwd] [in] [EETypeRva:0x000434A4] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeProcessHandle__System_Diagnostics_Process____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeWaitHandle__System_Private_CoreLib____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "DuplicateHandle")]
		public static bool DuplicateHandle(
					global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process hSourceProcessHandle, 
					global::System.Runtime.InteropServices.SafeHandle hSourceHandle, 
					global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process hTargetProcess, 
					out global::Microsoft.Win32.SafeHandles.SafeWaitHandle__System_Private_CoreLib targetHandle, 
					int dwDesiredAccess, 
					bool bInheritHandle, 
					int dwOptions)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			bool addRefed_2 = false;
			global::System.IntPtr unsafe_targetHandle;
			int unsafe___value;
			// Marshalling
			hSourceProcessHandle.DangerousAddRef(ref addRefed);
			hSourceHandle.DangerousAddRef(ref addRefed_1);
			hTargetProcess.DangerousAddRef(ref addRefed_2);
			targetHandle = new global::Microsoft.Win32.SafeHandles.SafeWaitHandle__System_Private_CoreLib();
			unsafe_targetHandle = targetHandle.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.DuplicateHandle(
								hSourceProcessHandle.DangerousGetHandle(), 
								hSourceHandle.DangerousGetHandle(), 
								hTargetProcess.DangerousGetHandle(), 
								&(unsafe_targetHandle), 
								dwDesiredAccess, 
								(bInheritHandle ? 1 : 0), 
								dwOptions
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								targetHandle, 
								unsafe_targetHandle
							);
			if (addRefed_2)
				hTargetProcess.DangerousRelease();
			if (addRefed_1)
				hSourceHandle.DangerousRelease();
			if (addRefed)
				hSourceProcessHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetStdHandle, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetStdHandle")]
		public static global::System.IntPtr GetStdHandle(int nStdHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetStdHandle(nStdHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, CreateProcess, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_SECURITY_ATTRIBUTES__System_Diagnostics_Process____Interop_Kernel32_SECURITY_ATTRIBUTES__System_Diagnostics_Process, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_SECURITY_ATTRIBUTES__System_Diagnostics_Process____Interop_Kernel32_SECURITY_ATTRIBUTES__System_Diagnostics_Process, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_STARTUPINFO__System_Diagnostics_Process____Interop_Kernel32_STARTUPINFO__System_Diagnostics_Process, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_PROCESS_INFORMATION__System_Diagnostics_Process____Interop_Kernel32_PROCESS_INFORMATION__System_Diagnostics_Process, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "CreateProcess")]
		public static bool CreateProcess(
					string lpApplicationName, 
					global::System.Text.StringBuilder lpCommandLine, 
					ref global::_.Interop_Kernel32_SECURITY_ATTRIBUTES__System_Diagnostics_Process procSecAttrs, 
					ref global::_.Interop_Kernel32_SECURITY_ATTRIBUTES__System_Diagnostics_Process threadSecAttrs, 
					bool bInheritHandles, 
					int dwCreationFlags, 
					global::System.IntPtr lpEnvironment, 
					string lpCurrentDirectory, 
					ref global::_.Interop_Kernel32_STARTUPINFO__System_Diagnostics_Process lpStartupInfo, 
					ref global::_.Interop_Kernel32_PROCESS_INFORMATION__System_Diagnostics_Process lpProcessInformation)
		{
			// Setup
			ushort* unsafe_lpApplicationName = default(ushort*);
			ushort* unsafe_lpCommandLine = default(ushort*);
			ushort* unsafe_lpCurrentDirectory = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (char* pinned_lpApplicationName = lpApplicationName)
				{
					unsafe_lpApplicationName = (ushort*)pinned_lpApplicationName;
					if (lpCommandLine == null)
						unsafe_lpCommandLine = null;
					else
					{
						unsafe_lpCommandLine = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(lpCommandLine.Capacity * 2 
											+ 2)));
						if (unsafe_lpCommandLine == null)
							throw new global::System.OutOfMemoryException();
					}
					if (unsafe_lpCommandLine != null)
						global::System.Runtime.InteropServices.McgMarshal.StringBuilderToUnicodeString(
											lpCommandLine, 
											unsafe_lpCommandLine
										);
					fixed (global::_.Interop_Kernel32_SECURITY_ATTRIBUTES__System_Diagnostics_Process* pinned_procSecAttrs = &(procSecAttrs))
						fixed (global::_.Interop_Kernel32_SECURITY_ATTRIBUTES__System_Diagnostics_Process* pinned_threadSecAttrs = &(threadSecAttrs))
							fixed (char* pinned_lpCurrentDirectory = lpCurrentDirectory)
							{
								unsafe_lpCurrentDirectory = (ushort*)pinned_lpCurrentDirectory;
								fixed (global::_.Interop_Kernel32_STARTUPINFO__System_Diagnostics_Process* pinned_lpStartupInfo = &(lpStartupInfo))
									fixed (global::_.Interop_Kernel32_PROCESS_INFORMATION__System_Diagnostics_Process* pinned_lpProcessInformation = &(lpProcessInformation))
									{
										global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
										// Call to native method
										unsafe___value = global::__Interop.kernel32_dll_PInvokes.CreateProcess(
															unsafe_lpApplicationName, 
															unsafe_lpCommandLine, 
															pinned_procSecAttrs, 
															pinned_threadSecAttrs, 
															(bInheritHandles ? 1 : 0), 
															dwCreationFlags, 
															lpEnvironment, 
															unsafe_lpCurrentDirectory, 
															pinned_lpStartupInfo, 
															pinned_lpProcessInformation
														);
										global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
										global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
									}
							}
					if (lpCommandLine != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_lpCommandLine, 
											lpCommandLine
										);
				}
				// Return
				return unsafe___value != 0;
			}
			finally
			{
				// Cleanup
				if (unsafe_lpCommandLine != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_lpCommandLine);
			}
		}

		// Signature, GetConsoleCP, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetConsoleCP")]
		public static uint GetConsoleCP()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetConsoleCP();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, GetConsoleOutputCP, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetConsoleOutputCP")]
		public static uint GetConsoleOutputCP()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetConsoleOutputCP();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, CreateDirectoryPrivate, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_SECURITY_ATTRIBUTES__System_IO_FileSystem____Interop_Kernel32_SECURITY_ATTRIBUTES__System_IO_FileSystem, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "CreateDirectoryPrivate")]
		public static bool CreateDirectoryPrivate(
					string path, 
					ref global::_.Interop_Kernel32_SECURITY_ATTRIBUTES__System_IO_FileSystem lpSecurityAttributes)
		{
			// Setup
			ushort* unsafe_path = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_path = path)
			{
				unsafe_path = (ushort*)pinned_path;
				fixed (global::_.Interop_Kernel32_SECURITY_ATTRIBUTES__System_IO_FileSystem* pinned_lpSecurityAttributes = &(lpSecurityAttributes))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.CreateDirectoryPrivate(
										unsafe_path, 
										pinned_lpSecurityAttributes
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetStdHandle__0, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetStdHandle")]
		public static global::System.IntPtr GetStdHandle__0(int nStdHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetStdHandle__0(nStdHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, GetConsoleScreenBufferInfo, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_CONSOLE_SCREEN_BUFFER_INFO__System_Console____Interop_Kernel32_CONSOLE_SCREEN_BUFFER_INFO__System_Console, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetConsoleScreenBufferInfo")]
		public static bool GetConsoleScreenBufferInfo(
					global::System.IntPtr hConsoleOutput, 
					out global::_.Interop_Kernel32_CONSOLE_SCREEN_BUFFER_INFO__System_Console lpConsoleScreenBufferInfo)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_Kernel32_CONSOLE_SCREEN_BUFFER_INFO__System_Console* pinned_lpConsoleScreenBufferInfo = &(lpConsoleScreenBufferInfo))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetConsoleScreenBufferInfo(
									hConsoleOutput, 
									pinned_lpConsoleScreenBufferInfo
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetCPInfoExW, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BOOL__System_Text_Encoding_CodePages__Interop_BOOL__System_Text_Encoding_CodePages, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] __Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages___ptr__Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Text.Encoding.CodePages, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCPInfoExW")]
		public static global::_.Interop_BOOL__System_Text_Encoding_CodePages GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::_.Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx)
		{
			// Setup
			global::_.Interop_BOOL__System_Text_Encoding_CodePages unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCPInfoExW(
								CodePage, 
								dwFlags, 
								((global::_.Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages*)lpCPInfoEx)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, LocalAlloc, [fwd] [return] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Net_NetworkInformation____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NetworkInformation, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "LocalAlloc")]
		public static global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_NetworkInformation LocalAlloc(
					int uFlags, 
					global::System.UIntPtr sizetdwBytes)
		{
			// Setup
			global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_NetworkInformation __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_NetworkInformation();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.LocalAlloc(
								uFlags, 
								sizetdwBytes
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, DuplicateHandle__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeProcessHandle__System_Diagnostics_Process____w64 int, [fwd] [in] [EETypeRva:0x000434A4] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeProcessHandle__System_Diagnostics_Process____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeFileHandle__System_Private_CoreLib____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "DuplicateHandle")]
		public static bool DuplicateHandle__0(
					global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process hSourceProcessHandle, 
					global::System.Runtime.InteropServices.SafeHandle hSourceHandle, 
					global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process hTargetProcess, 
					out global::Microsoft.Win32.SafeHandles.SafeFileHandle__System_Private_CoreLib targetHandle, 
					int dwDesiredAccess, 
					bool bInheritHandle, 
					int dwOptions)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			bool addRefed_2 = false;
			global::System.IntPtr unsafe_targetHandle;
			int unsafe___value;
			// Marshalling
			hSourceProcessHandle.DangerousAddRef(ref addRefed);
			hSourceHandle.DangerousAddRef(ref addRefed_1);
			hTargetProcess.DangerousAddRef(ref addRefed_2);
			targetHandle = new global::Microsoft.Win32.SafeHandles.SafeFileHandle__System_Private_CoreLib();
			unsafe_targetHandle = targetHandle.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.DuplicateHandle__0(
								hSourceProcessHandle.DangerousGetHandle(), 
								hSourceHandle.DangerousGetHandle(), 
								hTargetProcess.DangerousGetHandle(), 
								&(unsafe_targetHandle), 
								dwDesiredAccess, 
								(bInheritHandle ? 1 : 0), 
								dwOptions
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								targetHandle, 
								unsafe_targetHandle
							);
			if (addRefed_2)
				hTargetProcess.DangerousRelease();
			if (addRefed_1)
				hSourceHandle.DangerousRelease();
			if (addRefed)
				hSourceProcessHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetProcessId, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeProcessHandle__System_Diagnostics_Process____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetProcessId")]
		public static int GetProcessId(global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process nativeHandle)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			nativeHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetProcessId(nativeHandle.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				nativeHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, OpenProcess, [fwd] [return] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeProcessHandle__System_Diagnostics_Process____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "OpenProcess")]
		public static global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process OpenProcess(
					int access, 
					bool inherit, 
					int processId)
		{
			// Setup
			global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.OpenProcess(
								access, 
								(inherit ? 1 : 0), 
								processId
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, SetThreadErrorMode, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "SetThreadErrorMode")]
		public static bool SetThreadErrorMode(
					uint dwNewMode, 
					out uint lpOldMode)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (uint* pinned_lpOldMode = &(lpOldMode))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.SetThreadErrorMode(
									dwNewMode, 
									pinned_lpOldMode
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetFileAttributesExPrivate, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Kernel32_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem__Interop_Kernel32_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem____Interop_Kernel32_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetFileAttributesExPrivate")]
		public static bool GetFileAttributesExPrivate(
					string name, 
					global::_.Interop_Kernel32_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem fileInfoLevel, 
					ref global::_.Interop_Kernel32_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem lpFileInformation)
		{
			// Setup
			ushort* unsafe_name = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_name = name)
			{
				unsafe_name = (ushort*)pinned_name;
				fixed (global::_.Interop_Kernel32_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem* pinned_lpFileInformation = &(lpFileInformation))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetFileAttributesExPrivate(
										unsafe_name, 
										fileInfoLevel, 
										pinned_lpFileInformation
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, FindFirstFileExPrivate, [fwd] [return] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeFindHandle__System_IO_FileSystem____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Kernel32_FINDEX_INFO_LEVELS__System_IO_FileSystem__Interop_Kernel32_FINDEX_INFO_LEVELS__System_IO_FileSystem, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem____Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Kernel32_FINDEX_SEARCH_OPS__System_IO_FileSystem__Interop_Kernel32_FINDEX_SEARCH_OPS__System_IO_FileSystem, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FindFirstFileExPrivate")]
		public static global::Microsoft.Win32.SafeHandles.SafeFindHandle__System_IO_FileSystem FindFirstFileExPrivate(
					string lpFileName, 
					global::_.Interop_Kernel32_FINDEX_INFO_LEVELS__System_IO_FileSystem fInfoLevelId, 
					ref global::_.Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem lpFindFileData, 
					global::_.Interop_Kernel32_FINDEX_SEARCH_OPS__System_IO_FileSystem fSearchOp, 
					global::System.IntPtr lpSearchFilter, 
					int dwAdditionalFlags)
		{
			// Setup
			ushort* unsafe_lpFileName = default(ushort*);
			global::Microsoft.Win32.SafeHandles.SafeFindHandle__System_IO_FileSystem __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (char* pinned_lpFileName = lpFileName)
			{
				unsafe_lpFileName = (ushort*)pinned_lpFileName;
				fixed (global::_.Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem* pinned_lpFindFileData = &(lpFindFileData))
				{
					__value = new global::Microsoft.Win32.SafeHandles.SafeFindHandle__System_IO_FileSystem();
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.FindFirstFileExPrivate(
										unsafe_lpFileName, 
										fInfoLevelId, 
										pinned_lpFindFileData, 
										fSearchOp, 
										lpSearchFilter, 
										dwAdditionalFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										__value, 
										unsafe___value
									);
				}
			}
			// Return
			return __value;
		}

		// Signature, GetConsoleOutputCP__0, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetConsoleOutputCP")]
		public static uint GetConsoleOutputCP__0()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetConsoleOutputCP__0();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, LocalFree, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NetworkInformation, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "LocalFree")]
		public static global::System.IntPtr LocalFree(global::System.IntPtr handle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.LocalFree(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, CreatePipe, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeFileHandle__System_Private_CoreLib____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeFileHandle__System_Private_CoreLib____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_SECURITY_ATTRIBUTES__System_Diagnostics_Process____Interop_Kernel32_SECURITY_ATTRIBUTES__System_Diagnostics_Process, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "CreatePipe")]
		public static bool CreatePipe(
					out global::Microsoft.Win32.SafeHandles.SafeFileHandle__System_Private_CoreLib hReadPipe, 
					out global::Microsoft.Win32.SafeHandles.SafeFileHandle__System_Private_CoreLib hWritePipe, 
					ref global::_.Interop_Kernel32_SECURITY_ATTRIBUTES__System_Diagnostics_Process lpPipeAttributes, 
					int nSize)
		{
			// Setup
			global::System.IntPtr unsafe_hReadPipe;
			global::System.IntPtr unsafe_hWritePipe;
			int unsafe___value;
			// Marshalling
			hReadPipe = new global::Microsoft.Win32.SafeHandles.SafeFileHandle__System_Private_CoreLib();
			unsafe_hReadPipe = hReadPipe.DangerousGetHandle();
			hWritePipe = new global::Microsoft.Win32.SafeHandles.SafeFileHandle__System_Private_CoreLib();
			unsafe_hWritePipe = hWritePipe.DangerousGetHandle();
			fixed (global::_.Interop_Kernel32_SECURITY_ATTRIBUTES__System_Diagnostics_Process* pinned_lpPipeAttributes = &(lpPipeAttributes))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.CreatePipe(
									&(unsafe_hReadPipe), 
									&(unsafe_hWritePipe), 
									pinned_lpPipeAttributes, 
									nSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								hWritePipe, 
								unsafe_hWritePipe
							);
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								hReadPipe, 
								unsafe_hReadPipe
							);
			// Return
			return unsafe___value != 0;
		}

		// Signature, FindClose, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FindClose")]
		public static bool FindClose(global::System.IntPtr hFindFile)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.FindClose(hFindFile);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetComputerName, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000418E8] char__wchar_t, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetComputerName")]
		public static int GetComputerName(
					ref char lpBuffer, 
					ref uint nSize)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_lpBuffer = &(lpBuffer))
			{
				ushort* unsafe_pinned_lpBuffer = (ushort*)pinned_lpBuffer;
				fixed (uint* pinned_nSize = &(nSize))
				{
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetComputerName(
										unsafe_pinned_lpBuffer, 
										pinned_nSize
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage__0, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__0(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__0(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage__1, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__1(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__1(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage__2, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__2(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__2(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, WriteFile, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "WriteFile")]
		public static int WriteFile(
					global::System.IntPtr handle, 
					byte* bytes, 
					int numBytesToWrite, 
					out int numBytesWritten, 
					global::System.IntPtr mustBeZero)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_numBytesWritten = &(numBytesWritten))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.WriteFile(
									handle, 
									((byte*)bytes), 
									numBytesToWrite, 
									pinned_numBytesWritten, 
									mustBeZero
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, GetFileType, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetFileType")]
		public static uint GetFileType(global::System.IntPtr hFile)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetFileType(hFile);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, GetConsoleCP__0, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetConsoleCP")]
		public static uint GetConsoleCP__0()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetConsoleCP__0();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, WideCharToMultiByte, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "WideCharToMultiByte")]
		public static int WideCharToMultiByte(
					uint CodePage, 
					uint dwFlags, 
					char* lpWideCharStr, 
					int cchWideChar, 
					byte* lpMultiByteStr, 
					int cbMultiByte, 
					global::System.IntPtr lpDefaultChar, 
					global::System.IntPtr lpUsedDefaultChar)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.WideCharToMultiByte(
								CodePage, 
								dwFlags, 
								((ushort*)lpWideCharStr), 
								cchWideChar, 
								((byte*)lpMultiByteStr), 
								cbMultiByte, 
								lpDefaultChar, 
								lpUsedDefaultChar
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MultiByteToWideChar, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "MultiByteToWideChar")]
		public static int MultiByteToWideChar(
					uint CodePage, 
					uint dwFlags, 
					byte* lpMultiByteStr, 
					int cbMultiByte, 
					char* lpWideCharStr, 
					int cchWideChar)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.MultiByteToWideChar(
								CodePage, 
								dwFlags, 
								((byte*)lpMultiByteStr), 
								cbMultiByte, 
								((ushort*)lpWideCharStr), 
								cchWideChar
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, WideCharToMultiByte__0, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "WideCharToMultiByte")]
		public static int WideCharToMultiByte__0(
					uint CodePage, 
					uint dwFlags, 
					char* lpWideCharStr, 
					int cchWideChar, 
					byte* lpMultiByteStr, 
					int cbMultiByte, 
					global::System.IntPtr lpDefaultChar, 
					global::System.IntPtr lpUsedDefaultChar)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.WideCharToMultiByte__0(
								CodePage, 
								dwFlags, 
								((ushort*)lpWideCharStr), 
								cchWideChar, 
								((byte*)lpMultiByteStr), 
								cbMultiByte, 
								lpDefaultChar, 
								lpUsedDefaultChar
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MultiByteToWideChar__0, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "MultiByteToWideChar")]
		public static int MultiByteToWideChar__0(
					uint CodePage, 
					uint dwFlags, 
					byte* lpMultiByteStr, 
					int cbMultiByte, 
					char* lpWideCharStr, 
					int cchWideChar)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.MultiByteToWideChar__0(
								CodePage, 
								dwFlags, 
								((byte*)lpMultiByteStr), 
								cbMultiByte, 
								((ushort*)lpWideCharStr), 
								cchWideChar
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ReadFile, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "ReadFile")]
		public static int ReadFile(
					global::System.IntPtr handle, 
					byte* bytes, 
					int numBytesToRead, 
					out int numBytesRead, 
					global::System.IntPtr mustBeZero)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_numBytesRead = &(numBytesRead))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.ReadFile(
									handle, 
									((byte*)bytes), 
									numBytesToRead, 
									pinned_numBytesRead, 
									mustBeZero
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, ReadConsole, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "ReadConsole")]
		public static bool ReadConsole(
					global::System.IntPtr hConsoleInput, 
					byte* lpBuffer, 
					int nNumberOfCharsToRead, 
					out int lpNumberOfCharsRead, 
					global::System.IntPtr pInputControl)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_lpNumberOfCharsRead = &(lpNumberOfCharsRead))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.ReadConsole(
									hConsoleInput, 
									((byte*)lpBuffer), 
									nNumberOfCharsToRead, 
									pinned_lpNumberOfCharsRead, 
									pInputControl
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, WriteConsole, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "WriteConsole")]
		public static bool WriteConsole(
					global::System.IntPtr hConsoleOutput, 
					byte* lpBuffer, 
					int nNumberOfCharsToWrite, 
					out int lpNumberOfCharsWritten, 
					global::System.IntPtr lpReservedMustBeNull)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_lpNumberOfCharsWritten = &(lpNumberOfCharsWritten))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.WriteConsole(
									hConsoleOutput, 
									((byte*)lpBuffer), 
									nNumberOfCharsToWrite, 
									pinned_lpNumberOfCharsWritten, 
									lpReservedMustBeNull
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetCPInfoExW__0, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] __Interop_Kernel32_CPINFOEXW__System_Diagnostics_Process___ptr__Interop_Kernel32_CPINFOEXW__System_Diagnostics_Process *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCPInfoExW")]
		public static int GetCPInfoExW__0(
					uint CodePage, 
					uint dwFlags, 
					global::_.Interop_Kernel32_CPINFOEXW__System_Diagnostics_Process* lpCPInfoEx)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCPInfoExW__0(
								CodePage, 
								dwFlags, 
								((global::_.Interop_Kernel32_CPINFOEXW__System_Diagnostics_Process*)lpCPInfoEx)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, GetCPInfoExW__1, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] __Interop_Kernel32_CPINFOEXW__System_Console___ptr__Interop_Kernel32_CPINFOEXW__System_Console *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCPInfoExW")]
		public static int GetCPInfoExW__1(
					uint CodePage, 
					uint dwFlags, 
					global::_.Interop_Kernel32_CPINFOEXW__System_Console* lpCPInfoEx)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCPInfoExW__1(
								CodePage, 
								dwFlags, 
								((global::_.Interop_Kernel32_CPINFOEXW__System_Console*)lpCPInfoEx)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, EnumProcesses, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042A40] rg_int__int *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "EnumProcesses")]
		public static bool EnumProcesses(
					int[] processIds, 
					int size, 
					out int needed)
		{
			// Setup
			int* unsafe_processIds;
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_processIds = ((processIds != null 
						&& processIds.Length == 0) ? new int[1] : processIds))
			{
				unsafe_processIds = (int*)pinned_processIds;
				fixed (int* pinned_needed = &(needed))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.EnumProcesses(
										unsafe_processIds, 
										size, 
										pinned_needed
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, FormatMessage__3, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__3(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__3(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, GetCurrentThread, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCurrentThread")]
		public static global::System.IntPtr GetCurrentThread()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCurrentThread();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, GetCurrentProcess__0, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCurrentProcess")]
		public static global::System.IntPtr GetCurrentProcess__0()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCurrentProcess__0();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, CloseHandle__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "CloseHandle")]
		public static bool CloseHandle__0(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.CloseHandle__0(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, SetFileCompletionNotificationModes, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Kernel32_FileCompletionNotificationModes__System_Net_Sockets__Interop_Kernel32_FileCompletionNotificationModes__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "SetFileCompletionNotificationModes")]
		public static bool SetFileCompletionNotificationModes(
					global::System.Runtime.InteropServices.SafeHandle handle, 
					global::_.Interop_Kernel32_FileCompletionNotificationModes__System_Net_Sockets flags)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.SetFileCompletionNotificationModes(
								handle.DangerousGetHandle(), 
								flags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CheckTokenMembershipEx, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "CheckTokenMembershipEx")]
		public static bool CheckTokenMembershipEx(
					global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows TokenHandle, 
					byte[] SidToCheck, 
					uint Flags, 
					ref bool IsMember)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_SidToCheck;
			int unsafe_IsMember;
			int unsafe___value;
			// Marshalling
			TokenHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_SidToCheck = ((SidToCheck != null 
						&& SidToCheck.Length == 0) ? new byte[1] : SidToCheck))
			{
				unsafe_SidToCheck = (byte*)pinned_SidToCheck;
				unsafe_IsMember = (IsMember ? 1 : 0);
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.CheckTokenMembershipEx(
									TokenHandle.DangerousGetHandle(), 
									unsafe_SidToCheck, 
									Flags, 
									&(unsafe_IsMember)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				IsMember = unsafe_IsMember != 0;
			}
			if (addRefed)
				TokenHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, LocalAlloc__0, [fwd] [return] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Net_Primitives____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "LocalAlloc")]
		public static global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_Primitives LocalAlloc__0(
					int uFlags, 
					global::System.UIntPtr sizetdwBytes)
		{
			// Setup
			global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_Primitives __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_Primitives();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.LocalAlloc__0(
								uFlags, 
								sizetdwBytes
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, GetConsoleMode, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetConsoleMode")]
		public static bool GetConsoleMode(
					global::System.IntPtr handle, 
					out int mode)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_mode = &(mode))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetConsoleMode(
									handle, 
									pinned_mode
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, LocalAlloc__1, [fwd] [return] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "LocalAlloc")]
		public static global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Security_Principal_Windows LocalAlloc__1(
					int uFlags, 
					global::System.UIntPtr sizetdwBytes)
		{
			// Setup
			global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Security_Principal_Windows __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Security_Principal_Windows();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.LocalAlloc__1(
								uFlags, 
								sizetdwBytes
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, LocalFree__0, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "LocalFree")]
		public static global::System.IntPtr LocalFree__0(global::System.IntPtr handle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.LocalFree__0(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, LocalFree__1, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "LocalFree")]
		public static global::System.IntPtr LocalFree__1(global::System.IntPtr handle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.LocalFree__1(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage__4, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__4(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__4(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage__5, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__5(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__5(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, DuplicateHandle__1, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "DuplicateHandle")]
		public static bool DuplicateHandle__1(
					global::System.IntPtr hSourceProcessHandle, 
					global::System.IntPtr hSourceHandle, 
					global::System.IntPtr hTargetProcessHandle, 
					ref global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows lpTargetHandle, 
					uint dwDesiredAccess, 
					bool bInheritHandle, 
					uint dwOptions)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_lpTargetHandle;
			global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows out_lpTargetHandle;
			global::System.IntPtr prev_unsafe_lpTargetHandle;
			int unsafe___value;
			// Marshalling
			lpTargetHandle.DangerousAddRef(ref addRefed);
			unsafe_lpTargetHandle = lpTargetHandle.DangerousGetHandle();
			prev_unsafe_lpTargetHandle = unsafe_lpTargetHandle;
			out_lpTargetHandle = new global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.DuplicateHandle__1(
								hSourceProcessHandle, 
								hSourceHandle, 
								hTargetProcessHandle, 
								&(unsafe_lpTargetHandle), 
								dwDesiredAccess, 
								(bInheritHandle ? 1 : 0), 
								dwOptions
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				lpTargetHandle.DangerousRelease();
			if (prev_unsafe_lpTargetHandle != unsafe_lpTargetHandle)
			{
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									out_lpTargetHandle, 
									unsafe_lpTargetHandle
								);
				lpTargetHandle = out_lpTargetHandle;
			}
			// Return
			return unsafe___value != 0;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'winmm.dll'
	/// </summary>
	public unsafe static partial class winmm_dll
	{
		// Signature, mixerGetNumDevs, [fwd] [return] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Mixer.MixerInterop", "mixerGetNumDevs")]
		public static int mixerGetNumDevs()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.mixerGetNumDevs();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, mixerOpen, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] NAudio_Mixer_MixerFlags__NAudio__MixerFlags__NAudio, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Mixer.MixerInterop", "mixerOpen")]
		public static global::NAudio.MmResult__NAudio mixerOpen(
					out global::System.IntPtr hMixer, 
					int uMxId, 
					global::System.IntPtr dwCallback, 
					global::System.IntPtr dwInstance, 
					global::NAudio_Mixer.MixerFlags__NAudio dwOpenFlags)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_hMixer = &(hMixer))
			{
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.mixerOpen(
									pinned_hMixer, 
									uMxId, 
									dwCallback, 
									dwInstance, 
									dwOpenFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, mixerClose, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Mixer.MixerInterop", "mixerClose")]
		public static global::NAudio.MmResult__NAudio mixerClose(global::System.IntPtr hMixer)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.mixerClose(hMixer);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, mixerGetControlDetails, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] NAudio_Mixer_MixerInterop_MIXERCONTROLDETAILS__NAudio__NAudio_Mixer__MixerInterop_MIXERCONTROLDETAILS__NAudio, [fwd] [in] [EETypeRva:0x00042D60] NAudio_Mixer_MixerFlags__NAudio__MixerFlags__NAudio, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Mixer.MixerInterop", "mixerGetControlDetails")]
		public static global::NAudio.MmResult__NAudio mixerGetControlDetails(
					global::System.IntPtr hMixer, 
					ref global::NAudio_Mixer.MixerInterop_MIXERCONTROLDETAILS__NAudio mixerControlDetails, 
					global::NAudio_Mixer.MixerFlags__NAudio dwDetailsFlags)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			fixed (global::NAudio_Mixer.MixerInterop_MIXERCONTROLDETAILS__NAudio* pinned_mixerControlDetails = &(mixerControlDetails))
			{
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.mixerGetControlDetails(
									hMixer, 
									pinned_mixerControlDetails, 
									dwDetailsFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, mixerGetDevCaps, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] NAudio_Mixer_MixerInterop_MIXERCAPS__NAudio__NAudio_Mixer__MixerInterop_MIXERCAPS__NAudio, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Mixer.MixerInterop", "mixerGetDevCaps")]
		public static global::NAudio.MmResult__NAudio mixerGetDevCaps(
					global::System.IntPtr nMixerID, 
					ref global::NAudio_Mixer.MixerInterop_MIXERCAPS__NAudio mixerCaps, 
					int mixerCapsSize)
		{
			// Setup
			global::NAudio_Mixer.MixerInterop_MIXERCAPS__NAudio__Impl.UnsafeType unsafe_mixerCaps = default(global::NAudio_Mixer.MixerInterop_MIXERCAPS__NAudio__Impl.UnsafeType);
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			global::NAudio_Mixer.MixerInterop_MIXERCAPS__NAudio__Impl.Marshal__SafeToUnsafe(
								ref mixerCaps, 
								out unsafe_mixerCaps
							);
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.mixerGetDevCaps(
								nMixerID, 
								&(unsafe_mixerCaps), 
								mixerCapsSize
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::NAudio_Mixer.MixerInterop_MIXERCAPS__NAudio__Impl.Marshal__UnsafeToSafe(
								ref unsafe_mixerCaps, 
								out mixerCaps
							);
			// Return
			return unsafe___value;
		}

		// Signature, mixerGetID, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] NAudio_Mixer_MixerFlags__NAudio__MixerFlags__NAudio, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Mixer.MixerInterop", "mixerGetID")]
		public static global::NAudio.MmResult__NAudio mixerGetID(
					global::System.IntPtr hMixer, 
					out int mixerID, 
					global::NAudio_Mixer.MixerFlags__NAudio dwMixerIDFlags)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			fixed (int* pinned_mixerID = &(mixerID))
			{
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.mixerGetID(
									hMixer, 
									pinned_mixerID, 
									dwMixerIDFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, mixerGetLineControls, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] NAudio_Mixer_MixerInterop_MIXERLINECONTROLS__NAudio__NAudio_Mixer__MixerInterop_MIXERLINECONTROLS__NAudio, [fwd] [in] [EETypeRva:0x00042D60] NAudio_Mixer_MixerFlags__NAudio__MixerFlags__NAudio, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Mixer.MixerInterop", "mixerGetLineControls")]
		public static global::NAudio.MmResult__NAudio mixerGetLineControls(
					global::System.IntPtr hMixer, 
					ref global::NAudio_Mixer.MixerInterop_MIXERLINECONTROLS__NAudio mixerLineControls, 
					global::NAudio_Mixer.MixerFlags__NAudio dwControlFlags)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			fixed (global::NAudio_Mixer.MixerInterop_MIXERLINECONTROLS__NAudio* pinned_mixerLineControls = &(mixerLineControls))
			{
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.mixerGetLineControls(
									hMixer, 
									pinned_mixerLineControls, 
									dwControlFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, mixerGetLineInfo, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] NAudio_Mixer_MixerInterop_MIXERLINE__NAudio__NAudio_Mixer__MixerInterop_MIXERLINE__NAudio, [fwd] [in] [EETypeRva:0x00042D60] NAudio_Mixer_MixerFlags__NAudio__MixerFlags__NAudio, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Mixer.MixerInterop", "mixerGetLineInfo")]
		public static global::NAudio.MmResult__NAudio mixerGetLineInfo(
					global::System.IntPtr hMixer, 
					ref global::NAudio_Mixer.MixerInterop_MIXERLINE__NAudio mixerLine, 
					global::NAudio_Mixer.MixerFlags__NAudio dwInfoFlags)
		{
			// Setup
			global::NAudio_Mixer.MixerInterop_MIXERLINE__NAudio__Impl.UnsafeType unsafe_mixerLine = default(global::NAudio_Mixer.MixerInterop_MIXERLINE__NAudio__Impl.UnsafeType);
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			global::NAudio_Mixer.MixerInterop_MIXERLINE__NAudio__Impl.Marshal__SafeToUnsafe(
								ref mixerLine, 
								out unsafe_mixerLine
							);
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.mixerGetLineInfo(
								hMixer, 
								&(unsafe_mixerLine), 
								dwInfoFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::NAudio_Mixer.MixerInterop_MIXERLINE__NAudio__Impl.Marshal__UnsafeToSafe(
								ref unsafe_mixerLine, 
								out mixerLine
							);
			// Return
			return unsafe___value;
		}

		// Signature, mixerMessage, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Mixer.MixerInterop", "mixerMessage")]
		public static global::NAudio.MmResult__NAudio mixerMessage(
					global::System.IntPtr hMixer, 
					uint nMessage, 
					global::System.IntPtr dwParam1, 
					global::System.IntPtr dwParam2)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.mixerMessage(
								hMixer, 
								nMessage, 
								dwParam1, 
								dwParam2
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, mixerSetControlDetails, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] NAudio_Mixer_MixerInterop_MIXERCONTROLDETAILS__NAudio__NAudio_Mixer__MixerInterop_MIXERCONTROLDETAILS__NAudio, [fwd] [in] [EETypeRva:0x00042D60] NAudio_Mixer_MixerFlags__NAudio__MixerFlags__NAudio, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Mixer.MixerInterop", "mixerSetControlDetails")]
		public static global::NAudio.MmResult__NAudio mixerSetControlDetails(
					global::System.IntPtr hMixer, 
					ref global::NAudio_Mixer.MixerInterop_MIXERCONTROLDETAILS__NAudio mixerControlDetails, 
					global::NAudio_Mixer.MixerFlags__NAudio dwDetailsFlags)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			fixed (global::NAudio_Mixer.MixerInterop_MIXERCONTROLDETAILS__NAudio* pinned_mixerControlDetails = &(mixerControlDetails))
			{
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.mixerSetControlDetails(
									hMixer, 
									pinned_mixerControlDetails, 
									dwDetailsFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, midiConnect, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiConnect")]
		public static global::NAudio.MmResult__NAudio midiConnect(
					global::System.IntPtr hMidiIn, 
					global::System.IntPtr hMidiOut, 
					global::System.IntPtr pReserved)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiConnect(
								hMidiIn, 
								hMidiOut, 
								pReserved
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, midiDisconnect, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiDisconnect")]
		public static global::NAudio.MmResult__NAudio midiDisconnect(
					global::System.IntPtr hMidiIn, 
					global::System.IntPtr hMidiOut, 
					global::System.IntPtr pReserved)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiDisconnect(
								hMidiIn, 
								hMidiOut, 
								pReserved
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, midiInAddBuffer, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] NAudio_Midi_MidiInterop_MIDIHDR__NAudio__NAudio_Midi__MidiInterop_MIDIHDR__NAudio, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiInAddBuffer")]
		public static global::NAudio.MmResult__NAudio midiInAddBuffer(
					global::System.IntPtr hMidiIn, 
					ref global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio lpMidiInHdr, 
					int uSize)
		{
			// Setup
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType unsafe_lpMidiInHdr = default(global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType);
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.Marshal__SafeToUnsafe(
								ref lpMidiInHdr, 
								out unsafe_lpMidiInHdr
							);
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiInAddBuffer(
								hMidiIn, 
								&(unsafe_lpMidiInHdr), 
								uSize
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.Marshal__UnsafeToSafe(
								ref unsafe_lpMidiInHdr, 
								out lpMidiInHdr
							);
			// Return
			return unsafe___value;
		}

		// Signature, midiInClose, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiInClose")]
		public static global::NAudio.MmResult__NAudio midiInClose(global::System.IntPtr hMidiIn)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiInClose(hMidiIn);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, midiInGetDevCaps, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] NAudio_Midi_MidiInCapabilities__NAudio__NAudio_Midi__MidiInCapabilities__NAudio, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiInGetDevCaps")]
		public static global::NAudio.MmResult__NAudio midiInGetDevCaps(
					global::System.IntPtr deviceId, 
					out global::NAudio_Midi.MidiInCapabilities__NAudio capabilities, 
					int size)
		{
			// Setup
			global::NAudio_Midi.MidiInCapabilities__NAudio__Impl.UnsafeType unsafe_capabilities = default(global::NAudio_Midi.MidiInCapabilities__NAudio__Impl.UnsafeType);
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			unsafe_capabilities = default(global::NAudio_Midi.MidiInCapabilities__NAudio__Impl.UnsafeType);
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiInGetDevCaps(
								deviceId, 
								&(unsafe_capabilities), 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::NAudio_Midi.MidiInCapabilities__NAudio__Impl.Marshal__UnsafeToSafe(
								ref unsafe_capabilities, 
								out capabilities
							);
			// Return
			return unsafe___value;
		}

		// Signature, midiInGetErrorText, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiInGetErrorText")]
		public static global::NAudio.MmResult__NAudio midiInGetErrorText(
					int err, 
					string lpText, 
					int uSize)
		{
			// Setup
			byte* unsafe_lpText = default(byte*);
			global::NAudio.MmResult__NAudio unsafe___value;
			try
			{
				// Marshalling
				unsafe_lpText = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(lpText, true, false);
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.midiInGetErrorText(
									err, 
									unsafe_lpText, 
									uSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_lpText);
			}
		}

		// Signature, midiInGetID, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiInGetID")]
		public static global::NAudio.MmResult__NAudio midiInGetID(
					global::System.IntPtr hMidiIn, 
					out int lpuDeviceId)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			fixed (int* pinned_lpuDeviceId = &(lpuDeviceId))
			{
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.midiInGetID(
									hMidiIn, 
									pinned_lpuDeviceId
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, midiInGetNumDevs, [fwd] [return] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiInGetNumDevs")]
		public static int midiInGetNumDevs()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiInGetNumDevs();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, midiInMessage, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiInMessage")]
		public static global::NAudio.MmResult__NAudio midiInMessage(
					global::System.IntPtr hMidiIn, 
					int msg, 
					global::System.IntPtr dw1, 
					global::System.IntPtr dw2)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiInMessage(
								hMidiIn, 
								msg, 
								dw1, 
								dw2
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, midiInOpen, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] NAudio_Midi_MidiInterop_MidiInCallback__NAudio__NAudio_Midi__MidiInterop_MidiInCallback__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiInOpen")]
		public static global::NAudio.MmResult__NAudio midiInOpen(
					out global::System.IntPtr hMidiIn, 
					global::System.IntPtr uDeviceID, 
					global::NAudio.Midi.MidiInterop_MidiInCallback__NAudio callback, 
					global::System.IntPtr dwInstance, 
					int dwFlags)
		{
			// Setup
			void* unsafe_callback = default(void*);
			global::NAudio.MmResult__NAudio unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_hMidiIn = &(hMidiIn))
				{
					unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.Midi.MidiInterop+MidiInCallback,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null"), 
										callback
									);
					// Call to native method
					unsafe___value = global::__Interop.winmm_dll_PInvokes.midiInOpen(
										pinned_hMidiIn, 
										uDeviceID, 
										unsafe_callback, 
										dwInstance, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, midiInOpenWindow, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiInOpenWindow")]
		public static global::NAudio.MmResult__NAudio midiInOpenWindow(
					out global::System.IntPtr hMidiIn, 
					global::System.IntPtr uDeviceID, 
					global::System.IntPtr callbackWindowHandle, 
					global::System.IntPtr dwInstance, 
					int dwFlags)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_hMidiIn = &(hMidiIn))
			{
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.midiInOpenWindow(
									pinned_hMidiIn, 
									uDeviceID, 
									callbackWindowHandle, 
									dwInstance, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, midiInPrepareHeader, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] NAudio_Midi_MidiInterop_MIDIHDR__NAudio__NAudio_Midi__MidiInterop_MIDIHDR__NAudio, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiInPrepareHeader")]
		public static global::NAudio.MmResult__NAudio midiInPrepareHeader(
					global::System.IntPtr hMidiIn, 
					ref global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio lpMidiInHdr, 
					int uSize)
		{
			// Setup
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType unsafe_lpMidiInHdr = default(global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType);
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.Marshal__SafeToUnsafe(
								ref lpMidiInHdr, 
								out unsafe_lpMidiInHdr
							);
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiInPrepareHeader(
								hMidiIn, 
								&(unsafe_lpMidiInHdr), 
								uSize
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.Marshal__UnsafeToSafe(
								ref unsafe_lpMidiInHdr, 
								out lpMidiInHdr
							);
			// Return
			return unsafe___value;
		}

		// Signature, midiInReset, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiInReset")]
		public static global::NAudio.MmResult__NAudio midiInReset(global::System.IntPtr hMidiIn)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiInReset(hMidiIn);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, midiInStart, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiInStart")]
		public static global::NAudio.MmResult__NAudio midiInStart(global::System.IntPtr hMidiIn)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiInStart(hMidiIn);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, midiInStop, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiInStop")]
		public static global::NAudio.MmResult__NAudio midiInStop(global::System.IntPtr hMidiIn)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiInStop(hMidiIn);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, midiInUnprepareHeader, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] NAudio_Midi_MidiInterop_MIDIHDR__NAudio__NAudio_Midi__MidiInterop_MIDIHDR__NAudio, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiInUnprepareHeader")]
		public static global::NAudio.MmResult__NAudio midiInUnprepareHeader(
					global::System.IntPtr hMidiIn, 
					ref global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio lpMidiInHdr, 
					int uSize)
		{
			// Setup
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType unsafe_lpMidiInHdr = default(global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType);
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.Marshal__SafeToUnsafe(
								ref lpMidiInHdr, 
								out unsafe_lpMidiInHdr
							);
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiInUnprepareHeader(
								hMidiIn, 
								&(unsafe_lpMidiInHdr), 
								uSize
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.Marshal__UnsafeToSafe(
								ref unsafe_lpMidiInHdr, 
								out lpMidiInHdr
							);
			// Return
			return unsafe___value;
		}

		// Signature, midiOutCacheDrumPatches, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiOutCacheDrumPatches")]
		public static global::NAudio.MmResult__NAudio midiOutCacheDrumPatches(
					global::System.IntPtr hMidiOut, 
					int uPatch, 
					global::System.IntPtr lpKeyArray, 
					int uFlags)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiOutCacheDrumPatches(
								hMidiOut, 
								uPatch, 
								lpKeyArray, 
								uFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, midiOutCachePatches, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiOutCachePatches")]
		public static global::NAudio.MmResult__NAudio midiOutCachePatches(
					global::System.IntPtr hMidiOut, 
					int uBank, 
					global::System.IntPtr lpPatchArray, 
					int uFlags)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiOutCachePatches(
								hMidiOut, 
								uBank, 
								lpPatchArray, 
								uFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, midiOutClose, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiOutClose")]
		public static global::NAudio.MmResult__NAudio midiOutClose(global::System.IntPtr hMidiOut)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiOutClose(hMidiOut);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, midiOutGetDevCaps, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] NAudio_Midi_MidiOutCapabilities__NAudio__NAudio_Midi__MidiOutCapabilities__NAudio, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiOutGetDevCaps")]
		public static global::NAudio.MmResult__NAudio midiOutGetDevCaps(
					global::System.IntPtr deviceNumber, 
					out global::NAudio_Midi.MidiOutCapabilities__NAudio caps, 
					int uSize)
		{
			// Setup
			global::NAudio_Midi.MidiOutCapabilities__NAudio__Impl.UnsafeType unsafe_caps = default(global::NAudio_Midi.MidiOutCapabilities__NAudio__Impl.UnsafeType);
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			unsafe_caps = default(global::NAudio_Midi.MidiOutCapabilities__NAudio__Impl.UnsafeType);
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiOutGetDevCaps(
								deviceNumber, 
								&(unsafe_caps), 
								uSize
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::NAudio_Midi.MidiOutCapabilities__NAudio__Impl.Marshal__UnsafeToSafe(
								ref unsafe_caps, 
								out caps
							);
			// Return
			return unsafe___value;
		}

		// Signature, midiOutGetErrorText, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiOutGetErrorText")]
		public static global::NAudio.MmResult__NAudio midiOutGetErrorText(
					global::System.IntPtr err, 
					string lpText, 
					int uSize)
		{
			// Setup
			byte* unsafe_lpText = default(byte*);
			global::NAudio.MmResult__NAudio unsafe___value;
			try
			{
				// Marshalling
				unsafe_lpText = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(lpText, true, false);
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.midiOutGetErrorText(
									err, 
									unsafe_lpText, 
									uSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_lpText);
			}
		}

		// Signature, midiOutGetID, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiOutGetID")]
		public static global::NAudio.MmResult__NAudio midiOutGetID(
					global::System.IntPtr hMidiOut, 
					out int lpuDeviceID)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			fixed (int* pinned_lpuDeviceID = &(lpuDeviceID))
			{
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.midiOutGetID(
									hMidiOut, 
									pinned_lpuDeviceID
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, midiOutGetNumDevs, [fwd] [return] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiOutGetNumDevs")]
		public static int midiOutGetNumDevs()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiOutGetNumDevs();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, midiOutGetVolume, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiOutGetVolume")]
		public static global::NAudio.MmResult__NAudio midiOutGetVolume(
					global::System.IntPtr uDeviceID, 
					ref int lpdwVolume)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			fixed (int* pinned_lpdwVolume = &(lpdwVolume))
			{
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.midiOutGetVolume(
									uDeviceID, 
									pinned_lpdwVolume
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, midiOutLongMsg, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] NAudio_Midi_MidiInterop_MIDIHDR__NAudio__NAudio_Midi__MidiInterop_MIDIHDR__NAudio, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiOutLongMsg")]
		public static global::NAudio.MmResult__NAudio midiOutLongMsg(
					global::System.IntPtr hMidiOut, 
					ref global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio lpMidiOutHdr, 
					int uSize)
		{
			// Setup
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType unsafe_lpMidiOutHdr = default(global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType);
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.Marshal__SafeToUnsafe(
								ref lpMidiOutHdr, 
								out unsafe_lpMidiOutHdr
							);
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiOutLongMsg(
								hMidiOut, 
								&(unsafe_lpMidiOutHdr), 
								uSize
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.Marshal__UnsafeToSafe(
								ref unsafe_lpMidiOutHdr, 
								out lpMidiOutHdr
							);
			// Return
			return unsafe___value;
		}

		// Signature, midiOutMessage, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiOutMessage")]
		public static global::NAudio.MmResult__NAudio midiOutMessage(
					global::System.IntPtr hMidiOut, 
					int msg, 
					global::System.IntPtr dw1, 
					global::System.IntPtr dw2)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiOutMessage(
								hMidiOut, 
								msg, 
								dw1, 
								dw2
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, midiOutOpen, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] NAudio_Midi_MidiInterop_MidiOutCallback__NAudio__NAudio_Midi__MidiInterop_MidiOutCallback__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiOutOpen")]
		public static global::NAudio.MmResult__NAudio midiOutOpen(
					out global::System.IntPtr lphMidiOut, 
					global::System.IntPtr uDeviceID, 
					global::NAudio.Midi.MidiInterop_MidiOutCallback__NAudio dwCallback, 
					global::System.IntPtr dwInstance, 
					int dwFlags)
		{
			// Setup
			void* unsafe_dwCallback = default(void*);
			global::NAudio.MmResult__NAudio unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_lphMidiOut = &(lphMidiOut))
				{
					unsafe_dwCallback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.Midi.MidiInterop+MidiOutCallback,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null"), 
										dwCallback
									);
					// Call to native method
					unsafe___value = global::__Interop.winmm_dll_PInvokes.midiOutOpen(
										pinned_lphMidiOut, 
										uDeviceID, 
										unsafe_dwCallback, 
										dwInstance, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(dwCallback);
			}
		}

		// Signature, midiOutPrepareHeader, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] NAudio_Midi_MidiInterop_MIDIHDR__NAudio__NAudio_Midi__MidiInterop_MIDIHDR__NAudio, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiOutPrepareHeader")]
		public static global::NAudio.MmResult__NAudio midiOutPrepareHeader(
					global::System.IntPtr hMidiOut, 
					ref global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio lpMidiOutHdr, 
					int uSize)
		{
			// Setup
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType unsafe_lpMidiOutHdr = default(global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType);
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.Marshal__SafeToUnsafe(
								ref lpMidiOutHdr, 
								out unsafe_lpMidiOutHdr
							);
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiOutPrepareHeader(
								hMidiOut, 
								&(unsafe_lpMidiOutHdr), 
								uSize
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.Marshal__UnsafeToSafe(
								ref unsafe_lpMidiOutHdr, 
								out lpMidiOutHdr
							);
			// Return
			return unsafe___value;
		}

		// Signature, midiOutReset, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiOutReset")]
		public static global::NAudio.MmResult__NAudio midiOutReset(global::System.IntPtr hMidiOut)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiOutReset(hMidiOut);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, midiOutSetVolume, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiOutSetVolume")]
		public static global::NAudio.MmResult__NAudio midiOutSetVolume(
					global::System.IntPtr hMidiOut, 
					int dwVolume)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiOutSetVolume(
								hMidiOut, 
								dwVolume
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, midiOutShortMsg, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiOutShortMsg")]
		public static global::NAudio.MmResult__NAudio midiOutShortMsg(
					global::System.IntPtr hMidiOut, 
					int dwMsg)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiOutShortMsg(
								hMidiOut, 
								dwMsg
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, midiOutUnprepareHeader, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] NAudio_Midi_MidiInterop_MIDIHDR__NAudio__NAudio_Midi__MidiInterop_MIDIHDR__NAudio, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiOutUnprepareHeader")]
		public static global::NAudio.MmResult__NAudio midiOutUnprepareHeader(
					global::System.IntPtr hMidiOut, 
					ref global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio lpMidiOutHdr, 
					int uSize)
		{
			// Setup
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType unsafe_lpMidiOutHdr = default(global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType);
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.Marshal__SafeToUnsafe(
								ref lpMidiOutHdr, 
								out unsafe_lpMidiOutHdr
							);
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiOutUnprepareHeader(
								hMidiOut, 
								&(unsafe_lpMidiOutHdr), 
								uSize
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.Marshal__UnsafeToSafe(
								ref unsafe_lpMidiOutHdr, 
								out lpMidiOutHdr
							);
			// Return
			return unsafe___value;
		}

		// Signature, midiStreamClose, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiStreamClose")]
		public static global::NAudio.MmResult__NAudio midiStreamClose(global::System.IntPtr hMidiStream)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiStreamClose(hMidiStream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, midiStreamOpen, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiStreamOpen")]
		public static global::NAudio.MmResult__NAudio midiStreamOpen(
					out global::System.IntPtr hMidiStream, 
					global::System.IntPtr puDeviceID, 
					int cMidi, 
					global::System.IntPtr dwCallback, 
					global::System.IntPtr dwInstance, 
					int fdwOpen)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_hMidiStream = &(hMidiStream))
			{
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.midiStreamOpen(
									pinned_hMidiStream, 
									puDeviceID, 
									cMidi, 
									dwCallback, 
									dwInstance, 
									fdwOpen
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, midiStreamOut, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] NAudio_Midi_MidiInterop_MIDIHDR__NAudio__NAudio_Midi__MidiInterop_MIDIHDR__NAudio, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiStreamOut")]
		public static global::NAudio.MmResult__NAudio midiStreamOut(
					global::System.IntPtr hMidiStream, 
					ref global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio pmh, 
					int cbmh)
		{
			// Setup
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType unsafe_pmh = default(global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType);
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.Marshal__SafeToUnsafe(
								ref pmh, 
								out unsafe_pmh
							);
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiStreamOut(
								hMidiStream, 
								&(unsafe_pmh), 
								cbmh
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.Marshal__UnsafeToSafe(
								ref unsafe_pmh, 
								out pmh
							);
			// Return
			return unsafe___value;
		}

		// Signature, midiStreamPause, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiStreamPause")]
		public static global::NAudio.MmResult__NAudio midiStreamPause(global::System.IntPtr hMidiStream)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiStreamPause(hMidiStream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, midiStreamPosition, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] NAudio_Midi_MidiInterop_MMTIME__NAudio__NAudio_Midi__MidiInterop_MMTIME__NAudio, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiStreamPosition")]
		public static global::NAudio.MmResult__NAudio midiStreamPosition(
					global::System.IntPtr hMidiStream, 
					ref global::NAudio_Midi.MidiInterop_MMTIME__NAudio lpmmt, 
					int cbmmt)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			fixed (global::NAudio_Midi.MidiInterop_MMTIME__NAudio* pinned_lpmmt = &(lpmmt))
			{
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.midiStreamPosition(
									hMidiStream, 
									pinned_lpmmt, 
									cbmmt
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, midiStreamProperty, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiStreamProperty")]
		public static global::NAudio.MmResult__NAudio midiStreamProperty(
					global::System.IntPtr hMidiStream, 
					global::System.IntPtr lppropdata, 
					int dwProperty)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiStreamProperty(
								hMidiStream, 
								lppropdata, 
								dwProperty
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, midiStreamRestart, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiStreamRestart")]
		public static global::NAudio.MmResult__NAudio midiStreamRestart(global::System.IntPtr hMidiStream)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiStreamRestart(hMidiStream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, midiStreamStop, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Midi.MidiInterop", "midiStreamStop")]
		public static global::NAudio.MmResult__NAudio midiStreamStop(global::System.IntPtr hMidiStream)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.midiStreamStop(hMidiStream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, mmioStringToFOURCC, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "mmioStringToFOURCC")]
		public static int mmioStringToFOURCC(
					string s, 
					int flags)
		{
			// Setup
			byte* unsafe_s = default(byte*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_s = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(s, true, false);
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.mmioStringToFOURCC(
									unsafe_s, 
									flags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_s);
			}
		}

		// Signature, waveOutGetNumDevs, [fwd] [return] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveOutGetNumDevs")]
		public static int waveOutGetNumDevs()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.waveOutGetNumDevs();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, waveOutPrepareHeader, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00043084] NAudio_Wave_WaveHeader__NAudio__NAudio_Wave__WaveHeader__NAudio *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveOutPrepareHeader")]
		public static global::NAudio.MmResult__NAudio waveOutPrepareHeader(
					global::System.IntPtr hWaveOut, 
					global::NAudio_Wave.WaveHeader__NAudio lpWaveOutHdr, 
					int uSize)
		{
			// Setup
			global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType* unsafe_lpWaveOutHdr = default(global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType*);
			global::NAudio.MmResult__NAudio unsafe___value;
			try
			{
				// Marshalling
				unsafe_lpWaveOutHdr = (global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(sizeof(global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType)));
				global::NAudio_Wave.WaveHeader__NAudio__Impl.Marshal__SafeToUnsafe(
									lpWaveOutHdr, 
									out (*(unsafe_lpWaveOutHdr))
								);
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.waveOutPrepareHeader(
									hWaveOut, 
									unsafe_lpWaveOutHdr, 
									uSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_lpWaveOutHdr);
			}
		}

		// Signature, waveOutUnprepareHeader, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00043084] NAudio_Wave_WaveHeader__NAudio__NAudio_Wave__WaveHeader__NAudio *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveOutUnprepareHeader")]
		public static global::NAudio.MmResult__NAudio waveOutUnprepareHeader(
					global::System.IntPtr hWaveOut, 
					global::NAudio_Wave.WaveHeader__NAudio lpWaveOutHdr, 
					int uSize)
		{
			// Setup
			global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType* unsafe_lpWaveOutHdr = default(global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType*);
			global::NAudio.MmResult__NAudio unsafe___value;
			try
			{
				// Marshalling
				unsafe_lpWaveOutHdr = (global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(sizeof(global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType)));
				global::NAudio_Wave.WaveHeader__NAudio__Impl.Marshal__SafeToUnsafe(
									lpWaveOutHdr, 
									out (*(unsafe_lpWaveOutHdr))
								);
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.waveOutUnprepareHeader(
									hWaveOut, 
									unsafe_lpWaveOutHdr, 
									uSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_lpWaveOutHdr);
			}
		}

		// Signature, waveOutWrite, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00043084] NAudio_Wave_WaveHeader__NAudio__NAudio_Wave__WaveHeader__NAudio *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveOutWrite")]
		public static global::NAudio.MmResult__NAudio waveOutWrite(
					global::System.IntPtr hWaveOut, 
					global::NAudio_Wave.WaveHeader__NAudio lpWaveOutHdr, 
					int uSize)
		{
			// Setup
			global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType* unsafe_lpWaveOutHdr = default(global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType*);
			global::NAudio.MmResult__NAudio unsafe___value;
			try
			{
				// Marshalling
				unsafe_lpWaveOutHdr = (global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(sizeof(global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType)));
				global::NAudio_Wave.WaveHeader__NAudio__Impl.Marshal__SafeToUnsafe(
									lpWaveOutHdr, 
									out (*(unsafe_lpWaveOutHdr))
								);
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.waveOutWrite(
									hWaveOut, 
									unsafe_lpWaveOutHdr, 
									uSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_lpWaveOutHdr);
			}
		}

		// Signature, waveOutOpen, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00043084] NAudio_Wave_WaveFormat__NAudio__NAudio_Wave__WaveFormat__NAudio *, [fwd] [in] [EETypeRva:0x00041EA8] NAudio_Wave_WaveInterop_WaveCallback__NAudio__NAudio_Wave__WaveInterop_WaveCallback__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] NAudio_Wave_WaveInterop_WaveInOutOpenFlags__NAudio__WaveInterop_WaveInOutOpenFlags__NAudio, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveOutOpen")]
		public static global::NAudio.MmResult__NAudio waveOutOpen(
					out global::System.IntPtr hWaveOut, 
					global::System.IntPtr uDeviceID, 
					global::NAudio_Wave.WaveFormat__NAudio lpFormat, 
					global::NAudio.Wave.WaveInterop_WaveCallback__NAudio dwCallback, 
					global::System.IntPtr dwInstance, 
					global::NAudio_Wave.WaveInterop_WaveInOutOpenFlags__NAudio dwFlags)
		{
			// Setup
			global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType* unsafe_lpFormat = default(global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType*);
			void* unsafe_dwCallback = default(void*);
			global::NAudio.MmResult__NAudio unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_hWaveOut = &(hWaveOut))
				{
					unsafe_lpFormat = (global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(sizeof(global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType)));
					global::NAudio_Wave.WaveFormat__NAudio__Impl.Marshal__SafeToUnsafe(
										lpFormat, 
										out (*(unsafe_lpFormat))
									);
					unsafe_dwCallback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.Wave.WaveInterop+WaveCallback,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null"), 
										dwCallback
									);
					// Call to native method
					unsafe___value = global::__Interop.winmm_dll_PInvokes.waveOutOpen(
										pinned_hWaveOut, 
										uDeviceID, 
										unsafe_lpFormat, 
										unsafe_dwCallback, 
										dwInstance, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_lpFormat);
				global::System.GC.KeepAlive(dwCallback);
			}
		}

		// Signature, waveOutOpenWindow, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00043084] NAudio_Wave_WaveFormat__NAudio__NAudio_Wave__WaveFormat__NAudio *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] NAudio_Wave_WaveInterop_WaveInOutOpenFlags__NAudio__WaveInterop_WaveInOutOpenFlags__NAudio, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveOutOpenWindow")]
		public static global::NAudio.MmResult__NAudio waveOutOpenWindow(
					out global::System.IntPtr hWaveOut, 
					global::System.IntPtr uDeviceID, 
					global::NAudio_Wave.WaveFormat__NAudio lpFormat, 
					global::System.IntPtr callbackWindowHandle, 
					global::System.IntPtr dwInstance, 
					global::NAudio_Wave.WaveInterop_WaveInOutOpenFlags__NAudio dwFlags)
		{
			// Setup
			global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType* unsafe_lpFormat = default(global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType*);
			global::NAudio.MmResult__NAudio unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_hWaveOut = &(hWaveOut))
				{
					unsafe_lpFormat = (global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(sizeof(global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType)));
					global::NAudio_Wave.WaveFormat__NAudio__Impl.Marshal__SafeToUnsafe(
										lpFormat, 
										out (*(unsafe_lpFormat))
									);
					// Call to native method
					unsafe___value = global::__Interop.winmm_dll_PInvokes.waveOutOpenWindow(
										pinned_hWaveOut, 
										uDeviceID, 
										unsafe_lpFormat, 
										callbackWindowHandle, 
										dwInstance, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_lpFormat);
			}
		}

		// Signature, waveOutReset, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveOutReset")]
		public static global::NAudio.MmResult__NAudio waveOutReset(global::System.IntPtr hWaveOut)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.waveOutReset(hWaveOut);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, waveOutClose, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveOutClose")]
		public static global::NAudio.MmResult__NAudio waveOutClose(global::System.IntPtr hWaveOut)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.waveOutClose(hWaveOut);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, waveOutPause, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveOutPause")]
		public static global::NAudio.MmResult__NAudio waveOutPause(global::System.IntPtr hWaveOut)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.waveOutPause(hWaveOut);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, waveOutRestart, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveOutRestart")]
		public static global::NAudio.MmResult__NAudio waveOutRestart(global::System.IntPtr hWaveOut)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.waveOutRestart(hWaveOut);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, waveOutGetPosition, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] NAudio_Wave_MmTime__NAudio__NAudio_Wave__MmTime__NAudio, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveOutGetPosition")]
		public static global::NAudio.MmResult__NAudio waveOutGetPosition(
					global::System.IntPtr hWaveOut, 
					ref global::NAudio_Wave.MmTime__NAudio mmTime, 
					int uSize)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			fixed (global::NAudio_Wave.MmTime__NAudio* pinned_mmTime = &(mmTime))
			{
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.waveOutGetPosition(
									hWaveOut, 
									pinned_mmTime, 
									uSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, waveOutSetVolume, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveOutSetVolume")]
		public static global::NAudio.MmResult__NAudio waveOutSetVolume(
					global::System.IntPtr hWaveOut, 
					int dwVolume)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.waveOutSetVolume(
								hWaveOut, 
								dwVolume
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, waveOutGetVolume, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveOutGetVolume")]
		public static global::NAudio.MmResult__NAudio waveOutGetVolume(
					global::System.IntPtr hWaveOut, 
					out int dwVolume)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			fixed (int* pinned_dwVolume = &(dwVolume))
			{
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.waveOutGetVolume(
									hWaveOut, 
									pinned_dwVolume
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, waveOutGetDevCaps, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] NAudio_Wave_WaveOutCapabilities__NAudio__NAudio_Wave__WaveOutCapabilities__NAudio, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveOutGetDevCaps")]
		public static global::NAudio.MmResult__NAudio waveOutGetDevCaps(
					global::System.IntPtr deviceID, 
					out global::NAudio_Wave.WaveOutCapabilities__NAudio waveOutCaps, 
					int waveOutCapsSize)
		{
			// Setup
			global::NAudio_Wave.WaveOutCapabilities__NAudio__Impl.UnsafeType unsafe_waveOutCaps = default(global::NAudio_Wave.WaveOutCapabilities__NAudio__Impl.UnsafeType);
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			unsafe_waveOutCaps = default(global::NAudio_Wave.WaveOutCapabilities__NAudio__Impl.UnsafeType);
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.waveOutGetDevCaps(
								deviceID, 
								&(unsafe_waveOutCaps), 
								waveOutCapsSize
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::NAudio_Wave.WaveOutCapabilities__NAudio__Impl.Marshal__UnsafeToSafe(
								ref unsafe_waveOutCaps, 
								out waveOutCaps
							);
			// Return
			return unsafe___value;
		}

		// Signature, waveInGetNumDevs, [fwd] [return] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveInGetNumDevs")]
		public static int waveInGetNumDevs()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.waveInGetNumDevs();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, waveInGetDevCaps, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] NAudio_Wave_WaveInCapabilities__NAudio__NAudio_Wave__WaveInCapabilities__NAudio, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveInGetDevCaps")]
		public static global::NAudio.MmResult__NAudio waveInGetDevCaps(
					global::System.IntPtr deviceID, 
					out global::NAudio_Wave.WaveInCapabilities__NAudio waveInCaps, 
					int waveInCapsSize)
		{
			// Setup
			global::NAudio_Wave.WaveInCapabilities__NAudio__Impl.UnsafeType unsafe_waveInCaps = default(global::NAudio_Wave.WaveInCapabilities__NAudio__Impl.UnsafeType);
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			unsafe_waveInCaps = default(global::NAudio_Wave.WaveInCapabilities__NAudio__Impl.UnsafeType);
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.waveInGetDevCaps(
								deviceID, 
								&(unsafe_waveInCaps), 
								waveInCapsSize
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::NAudio_Wave.WaveInCapabilities__NAudio__Impl.Marshal__UnsafeToSafe(
								ref unsafe_waveInCaps, 
								out waveInCaps
							);
			// Return
			return unsafe___value;
		}

		// Signature, waveInAddBuffer, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00043084] NAudio_Wave_WaveHeader__NAudio__NAudio_Wave__WaveHeader__NAudio *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveInAddBuffer")]
		public static global::NAudio.MmResult__NAudio waveInAddBuffer(
					global::System.IntPtr hWaveIn, 
					global::NAudio_Wave.WaveHeader__NAudio pwh, 
					int cbwh)
		{
			// Setup
			global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType* unsafe_pwh = default(global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType*);
			global::NAudio.MmResult__NAudio unsafe___value;
			try
			{
				// Marshalling
				unsafe_pwh = (global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(sizeof(global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType)));
				global::NAudio_Wave.WaveHeader__NAudio__Impl.Marshal__SafeToUnsafe(
									pwh, 
									out (*(unsafe_pwh))
								);
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.waveInAddBuffer(
									hWaveIn, 
									unsafe_pwh, 
									cbwh
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_pwh);
			}
		}

		// Signature, waveInClose, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveInClose")]
		public static global::NAudio.MmResult__NAudio waveInClose(global::System.IntPtr hWaveIn)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.waveInClose(hWaveIn);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, waveInOpen, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00043084] NAudio_Wave_WaveFormat__NAudio__NAudio_Wave__WaveFormat__NAudio *, [fwd] [in] [EETypeRva:0x00041EA8] NAudio_Wave_WaveInterop_WaveCallback__NAudio__NAudio_Wave__WaveInterop_WaveCallback__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] NAudio_Wave_WaveInterop_WaveInOutOpenFlags__NAudio__WaveInterop_WaveInOutOpenFlags__NAudio, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveInOpen")]
		public static global::NAudio.MmResult__NAudio waveInOpen(
					out global::System.IntPtr hWaveIn, 
					global::System.IntPtr uDeviceID, 
					global::NAudio_Wave.WaveFormat__NAudio lpFormat, 
					global::NAudio.Wave.WaveInterop_WaveCallback__NAudio dwCallback, 
					global::System.IntPtr dwInstance, 
					global::NAudio_Wave.WaveInterop_WaveInOutOpenFlags__NAudio dwFlags)
		{
			// Setup
			global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType* unsafe_lpFormat = default(global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType*);
			void* unsafe_dwCallback = default(void*);
			global::NAudio.MmResult__NAudio unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_hWaveIn = &(hWaveIn))
				{
					unsafe_lpFormat = (global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(sizeof(global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType)));
					global::NAudio_Wave.WaveFormat__NAudio__Impl.Marshal__SafeToUnsafe(
										lpFormat, 
										out (*(unsafe_lpFormat))
									);
					unsafe_dwCallback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.Wave.WaveInterop+WaveCallback,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null"), 
										dwCallback
									);
					// Call to native method
					unsafe___value = global::__Interop.winmm_dll_PInvokes.waveInOpen(
										pinned_hWaveIn, 
										uDeviceID, 
										unsafe_lpFormat, 
										unsafe_dwCallback, 
										dwInstance, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_lpFormat);
				global::System.GC.KeepAlive(dwCallback);
			}
		}

		// Signature, waveInOpenWindow, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00043084] NAudio_Wave_WaveFormat__NAudio__NAudio_Wave__WaveFormat__NAudio *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] NAudio_Wave_WaveInterop_WaveInOutOpenFlags__NAudio__WaveInterop_WaveInOutOpenFlags__NAudio, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveInOpenWindow")]
		public static global::NAudio.MmResult__NAudio waveInOpenWindow(
					out global::System.IntPtr hWaveIn, 
					global::System.IntPtr uDeviceID, 
					global::NAudio_Wave.WaveFormat__NAudio lpFormat, 
					global::System.IntPtr callbackWindowHandle, 
					global::System.IntPtr dwInstance, 
					global::NAudio_Wave.WaveInterop_WaveInOutOpenFlags__NAudio dwFlags)
		{
			// Setup
			global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType* unsafe_lpFormat = default(global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType*);
			global::NAudio.MmResult__NAudio unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_hWaveIn = &(hWaveIn))
				{
					unsafe_lpFormat = (global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(sizeof(global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType)));
					global::NAudio_Wave.WaveFormat__NAudio__Impl.Marshal__SafeToUnsafe(
										lpFormat, 
										out (*(unsafe_lpFormat))
									);
					// Call to native method
					unsafe___value = global::__Interop.winmm_dll_PInvokes.waveInOpenWindow(
										pinned_hWaveIn, 
										uDeviceID, 
										unsafe_lpFormat, 
										callbackWindowHandle, 
										dwInstance, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_lpFormat);
			}
		}

		// Signature, waveInPrepareHeader, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00043084] NAudio_Wave_WaveHeader__NAudio__NAudio_Wave__WaveHeader__NAudio *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveInPrepareHeader")]
		public static global::NAudio.MmResult__NAudio waveInPrepareHeader(
					global::System.IntPtr hWaveIn, 
					global::NAudio_Wave.WaveHeader__NAudio lpWaveInHdr, 
					int uSize)
		{
			// Setup
			global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType* unsafe_lpWaveInHdr = default(global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType*);
			global::NAudio.MmResult__NAudio unsafe___value;
			try
			{
				// Marshalling
				unsafe_lpWaveInHdr = (global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(sizeof(global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType)));
				global::NAudio_Wave.WaveHeader__NAudio__Impl.Marshal__SafeToUnsafe(
									lpWaveInHdr, 
									out (*(unsafe_lpWaveInHdr))
								);
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.waveInPrepareHeader(
									hWaveIn, 
									unsafe_lpWaveInHdr, 
									uSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_lpWaveInHdr);
			}
		}

		// Signature, waveInUnprepareHeader, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00043084] NAudio_Wave_WaveHeader__NAudio__NAudio_Wave__WaveHeader__NAudio *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveInUnprepareHeader")]
		public static global::NAudio.MmResult__NAudio waveInUnprepareHeader(
					global::System.IntPtr hWaveIn, 
					global::NAudio_Wave.WaveHeader__NAudio lpWaveInHdr, 
					int uSize)
		{
			// Setup
			global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType* unsafe_lpWaveInHdr = default(global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType*);
			global::NAudio.MmResult__NAudio unsafe___value;
			try
			{
				// Marshalling
				unsafe_lpWaveInHdr = (global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(sizeof(global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType)));
				global::NAudio_Wave.WaveHeader__NAudio__Impl.Marshal__SafeToUnsafe(
									lpWaveInHdr, 
									out (*(unsafe_lpWaveInHdr))
								);
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.waveInUnprepareHeader(
									hWaveIn, 
									unsafe_lpWaveInHdr, 
									uSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_lpWaveInHdr);
			}
		}

		// Signature, waveInReset, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveInReset")]
		public static global::NAudio.MmResult__NAudio waveInReset(global::System.IntPtr hWaveIn)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.waveInReset(hWaveIn);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, waveInStart, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveInStart")]
		public static global::NAudio.MmResult__NAudio waveInStart(global::System.IntPtr hWaveIn)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.waveInStart(hWaveIn);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, waveInStop, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveInStop")]
		public static global::NAudio.MmResult__NAudio waveInStop(global::System.IntPtr hWaveIn)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.winmm_dll_PInvokes.waveInStop(hWaveIn);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, waveInGetPosition, [fwd] [return] [EETypeRva:0x00042D60] NAudio_MmResult__NAudio__MmResult__NAudio, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] NAudio_Wave_MmTime__NAudio__NAudio_Wave__MmTime__NAudio, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.WaveInterop", "waveInGetPosition")]
		public static global::NAudio.MmResult__NAudio waveInGetPosition(
					global::System.IntPtr hWaveIn, 
					out global::NAudio_Wave.MmTime__NAudio mmTime, 
					int uSize)
		{
			// Setup
			global::NAudio.MmResult__NAudio unsafe___value;
			// Marshalling
			fixed (global::NAudio_Wave.MmTime__NAudio* pinned_mmTime = &(mmTime))
			{
				// Call to native method
				unsafe___value = global::__Interop.winmm_dll_PInvokes.waveInGetPosition(
									hWaveIn, 
									pinned_mmTime, 
									uSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'mfplat.dll'
	/// </summary>
	public unsafe static partial class mfplat_dll
	{
		// Signature, MFStartup, [fwd] [return] [EETypeRva:0x00042030] void__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [optional] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.MediaFoundation.MediaFoundationInterop", "MFStartup")]
		public static void MFStartup(
					int version, 
					int dwFlags)
		{
			// Setup
			int unsafe___hr;
			// Marshalling
			// Call to native method
			unsafe___hr = global::__Interop.mfplat_dll_PInvokes.MFStartup(
								version, 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MFShutdown, [fwd] [return] [EETypeRva:0x00042030] void__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.MediaFoundation.MediaFoundationInterop", "MFShutdown")]
		public static void MFShutdown()
		{
			// Setup
			int unsafe___hr;
			// Marshalling
			// Call to native method
			unsafe___hr = global::__Interop.mfplat_dll_PInvokes.MFShutdown();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MFCreateMediaType, [fwd] [return] [EETypeRva:0x00042030] void__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00043660] NAudio_MediaFoundation_IMFMediaType__NAudio__NAudio_MediaFoundation__IMFMediaType__NAudio *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.MediaFoundation.MediaFoundationInterop", "MFCreateMediaType")]
		public static void MFCreateMediaType(out global::NAudio_MediaFoundation.IMFMediaType__NAudio ppMFType)
		{
			// Setup
			void* unsafe_ppMFType = default(void*);
			int unsafe___hr;
			try
			{
				// Marshalling
				unsafe_ppMFType = null;
				// Call to native method
				unsafe___hr = global::__Interop.mfplat_dll_PInvokes.MFCreateMediaType(&(unsafe_ppMFType));
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				ppMFType = (global::NAudio_MediaFoundation.IMFMediaType__NAudio)global::System.Runtime.InteropServices.McgMarshal.ComInterfaceToObject(
									((global::System.IntPtr)unsafe_ppMFType), 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.MediaFoundation.IMFMediaType,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null")
								);
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_ppMFType)));
			}
		}

		// Signature, MFInitMediaTypeFromWaveFormatEx, [fwd] [return] [EETypeRva:0x00042030] void__int, [fwd] [in] [EETypeRva:0x00043660] NAudio_MediaFoundation_IMFMediaType__NAudio__NAudio_MediaFoundation__IMFMediaType__NAudio *, [fwd] [in] [EETypeRva:0x00043084] NAudio_Wave_WaveFormat__NAudio__NAudio_Wave__WaveFormat__NAudio *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.MediaFoundation.MediaFoundationInterop", "MFInitMediaTypeFromWaveFormatEx")]
		public static void MFInitMediaTypeFromWaveFormatEx(
					global::NAudio_MediaFoundation.IMFMediaType__NAudio pMFType, 
					global::NAudio_Wave.WaveFormat__NAudio pWaveFormat, 
					int cbBufSize)
		{
			// Setup
			void* unsafe_pMFType = default(void*);
			global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType* unsafe_pWaveFormat = default(global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType*);
			int unsafe___hr;
			try
			{
				// Marshalling
				unsafe_pMFType = (void*)global::System.Runtime.InteropServices.McgMarshal.ObjectToComInterface(
									pMFType, 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.MediaFoundation.IMFMediaType,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null")
								);
				unsafe_pWaveFormat = (global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(sizeof(global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType)));
				global::NAudio_Wave.WaveFormat__NAudio__Impl.Marshal__SafeToUnsafe(
									pWaveFormat, 
									out (*(unsafe_pWaveFormat))
								);
				// Call to native method
				unsafe___hr = global::__Interop.mfplat_dll_PInvokes.MFInitMediaTypeFromWaveFormatEx(
									unsafe_pMFType, 
									unsafe_pWaveFormat, 
									cbBufSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_pMFType)));
				global::System.GC.KeepAlive(pMFType);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_pWaveFormat);
			}
		}

		// Signature, MFCreateWaveFormatExFromMFMediaType, [fwd] [return] [EETypeRva:0x00042030] void__int, [fwd] [in] [EETypeRva:0x00043660] NAudio_MediaFoundation_IMFMediaType__NAudio__NAudio_MediaFoundation__IMFMediaType__NAudio *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [optional] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.MediaFoundation.MediaFoundationInterop", "MFCreateWaveFormatExFromMFMediaType")]
		public static void MFCreateWaveFormatExFromMFMediaType(
					global::NAudio_MediaFoundation.IMFMediaType__NAudio pMFType, 
					ref global::System.IntPtr ppWF, 
					ref int pcbSize, 
					int flags)
		{
			// Setup
			void* unsafe_pMFType = default(void*);
			int unsafe___hr;
			try
			{
				// Marshalling
				unsafe_pMFType = (void*)global::System.Runtime.InteropServices.McgMarshal.ObjectToComInterface(
									pMFType, 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.MediaFoundation.IMFMediaType,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null")
								);
				fixed (global::System.IntPtr* pinned_ppWF = &(ppWF))
					fixed (int* pinned_pcbSize = &(pcbSize))
					{
						// Call to native method
						unsafe___hr = global::__Interop.mfplat_dll_PInvokes.MFCreateWaveFormatExFromMFMediaType(
											unsafe_pMFType, 
											pinned_ppWF, 
											pinned_pcbSize, 
											flags
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_pMFType)));
				global::System.GC.KeepAlive(pMFType);
			}
		}

		// Signature, MFCreateMFByteStreamOnStreamEx, [fwd] [return] [EETypeRva:0x00042030] void__int, [fwd] [in] [EETypeRva:0x00040FFC] object____mcg_IUnknown *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00043660] NAudio_MediaFoundation_IMFByteStream__NAudio__NAudio_MediaFoundation__IMFByteStream__NAudio *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.MediaFoundation.MediaFoundationInterop", "MFCreateMFByteStreamOnStreamEx")]
		public static void MFCreateMFByteStreamOnStreamEx(
					object punkStream, 
					out global::NAudio_MediaFoundation.IMFByteStream__NAudio ppByteStream)
		{
			// Setup
			void** unsafe_punkStream = default(void**);
			void* unsafe_ppByteStream = default(void*);
			int unsafe___hr;
			try
			{
				// Marshalling
				unsafe_punkStream = (void**)global::System.Runtime.InteropServices.McgMarshal.ObjectToComInterface(
									punkStream, 
									typeof(global::System.Runtime.InteropServices.__com_IUnknown).TypeHandle
								);
				unsafe_ppByteStream = null;
				// Call to native method
				unsafe___hr = global::__Interop.mfplat_dll_PInvokes.MFCreateMFByteStreamOnStreamEx(
									unsafe_punkStream, 
									&(unsafe_ppByteStream)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				ppByteStream = (global::NAudio_MediaFoundation.IMFByteStream__NAudio)global::System.Runtime.InteropServices.McgMarshal.ComInterfaceToObject(
									((global::System.IntPtr)unsafe_ppByteStream), 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.MediaFoundation.IMFByteStream,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null")
								);
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_punkStream)));
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_ppByteStream)));
			}
		}

		// Signature, MFCreateSample, [fwd] [return] [EETypeRva:0x00042030] void__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00043660] NAudio_MediaFoundation_IMFSample__NAudio__NAudio_MediaFoundation__IMFSample__NAudio *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.MediaFoundation.MediaFoundationInterop", "MFCreateSample")]
		public static void MFCreateSample(out global::NAudio_MediaFoundation.IMFSample__NAudio ppIMFSample)
		{
			// Setup
			void* unsafe_ppIMFSample = default(void*);
			int unsafe___hr;
			try
			{
				// Marshalling
				unsafe_ppIMFSample = null;
				// Call to native method
				unsafe___hr = global::__Interop.mfplat_dll_PInvokes.MFCreateSample(&(unsafe_ppIMFSample));
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				ppIMFSample = (global::NAudio_MediaFoundation.IMFSample__NAudio)global::System.Runtime.InteropServices.McgMarshal.ComInterfaceToObject(
									((global::System.IntPtr)unsafe_ppIMFSample), 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.MediaFoundation.IMFSample,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null")
								);
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_ppIMFSample)));
			}
		}

		// Signature, MFCreateMemoryBuffer, [fwd] [return] [EETypeRva:0x00042030] void__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00043660] NAudio_MediaFoundation_IMFMediaBuffer__NAudio__NAudio_MediaFoundation__IMFMediaBuffer__NAudio *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.MediaFoundation.MediaFoundationInterop", "MFCreateMemoryBuffer")]
		public static void MFCreateMemoryBuffer(
					int cbMaxLength, 
					out global::NAudio_MediaFoundation.IMFMediaBuffer__NAudio ppBuffer)
		{
			// Setup
			void* unsafe_ppBuffer = default(void*);
			int unsafe___hr;
			try
			{
				// Marshalling
				unsafe_ppBuffer = null;
				// Call to native method
				unsafe___hr = global::__Interop.mfplat_dll_PInvokes.MFCreateMemoryBuffer(
									cbMaxLength, 
									&(unsafe_ppBuffer)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				ppBuffer = (global::NAudio_MediaFoundation.IMFMediaBuffer__NAudio)global::System.Runtime.InteropServices.McgMarshal.ComInterfaceToObject(
									((global::System.IntPtr)unsafe_ppBuffer), 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.MediaFoundation.IMFMediaBuffer,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null")
								);
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_ppBuffer)));
			}
		}

		// Signature, MFCreateAttributes, [fwd] [return] [EETypeRva:0x00042030] void__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00043660] NAudio_MediaFoundation_IMFAttributes__NAudio__NAudio_MediaFoundation__IMFAttributes__NAudio *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.MediaFoundation.MediaFoundationInterop", "MFCreateAttributes")]
		public static void MFCreateAttributes(
					out global::NAudio_MediaFoundation.IMFAttributes__NAudio ppMFAttributes, 
					int cInitialSize)
		{
			// Setup
			void* unsafe_ppMFAttributes = default(void*);
			int unsafe___hr;
			try
			{
				// Marshalling
				unsafe_ppMFAttributes = null;
				// Call to native method
				unsafe___hr = global::__Interop.mfplat_dll_PInvokes.MFCreateAttributes(
									&(unsafe_ppMFAttributes), 
									cInitialSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				ppMFAttributes = (global::NAudio_MediaFoundation.IMFAttributes__NAudio)global::System.Runtime.InteropServices.McgMarshal.ComInterfaceToObject(
									((global::System.IntPtr)unsafe_ppMFAttributes), 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.MediaFoundation.IMFAttributes,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null")
								);
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_ppMFAttributes)));
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'mfreadwrite.dll'
	/// </summary>
	public unsafe static partial class mfreadwrite_dll
	{
		// Signature, MFCreateSourceReaderFromURL, [fwd] [return] [EETypeRva:0x00042030] void__int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00043660] NAudio_MediaFoundation_IMFAttributes__NAudio__NAudio_MediaFoundation__IMFAttributes__NAudio *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00043660] NAudio_MediaFoundation_IMFSourceReader__NAudio__NAudio_MediaFoundation__IMFSourceReader__NAudio *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.MediaFoundation.MediaFoundationInterop", "MFCreateSourceReaderFromURL")]
		public static void MFCreateSourceReaderFromURL(
					string pwszURL, 
					global::NAudio_MediaFoundation.IMFAttributes__NAudio pAttributes, 
					out global::NAudio_MediaFoundation.IMFSourceReader__NAudio ppSourceReader)
		{
			// Setup
			ushort* unsafe_pwszURL = default(ushort*);
			void* unsafe_pAttributes = default(void*);
			void* unsafe_ppSourceReader = default(void*);
			int unsafe___hr;
			try
			{
				// Marshalling
				fixed (char* pinned_pwszURL = pwszURL)
				{
					unsafe_pwszURL = (ushort*)pinned_pwszURL;
					unsafe_pAttributes = (void*)global::System.Runtime.InteropServices.McgMarshal.ObjectToComInterface(
										pAttributes, 
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.MediaFoundation.IMFAttributes,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null")
									);
					unsafe_ppSourceReader = null;
					// Call to native method
					unsafe___hr = global::__Interop.mfreadwrite_dll_PInvokes.MFCreateSourceReaderFromURL(
										unsafe_pwszURL, 
										unsafe_pAttributes, 
										&(unsafe_ppSourceReader)
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					ppSourceReader = (global::NAudio_MediaFoundation.IMFSourceReader__NAudio)global::System.Runtime.InteropServices.McgMarshal.ComInterfaceToObject(
										((global::System.IntPtr)unsafe_ppSourceReader), 
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.MediaFoundation.IMFSourceReader,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null")
									);
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_pAttributes)));
				global::System.GC.KeepAlive(pAttributes);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_ppSourceReader)));
			}
		}

		// Signature, MFCreateSourceReaderFromByteStream, [fwd] [return] [EETypeRva:0x00042030] void__int, [fwd] [in] [EETypeRva:0x00043660] NAudio_MediaFoundation_IMFByteStream__NAudio__NAudio_MediaFoundation__IMFByteStream__NAudio *, [fwd] [in] [EETypeRva:0x00043660] NAudio_MediaFoundation_IMFAttributes__NAudio__NAudio_MediaFoundation__IMFAttributes__NAudio *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00043660] NAudio_MediaFoundation_IMFSourceReader__NAudio__NAudio_MediaFoundation__IMFSourceReader__NAudio *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.MediaFoundation.MediaFoundationInterop", "MFCreateSourceReaderFromByteStream")]
		public static void MFCreateSourceReaderFromByteStream(
					global::NAudio_MediaFoundation.IMFByteStream__NAudio pByteStream, 
					global::NAudio_MediaFoundation.IMFAttributes__NAudio pAttributes, 
					out global::NAudio_MediaFoundation.IMFSourceReader__NAudio ppSourceReader)
		{
			// Setup
			void* unsafe_pByteStream = default(void*);
			void* unsafe_pAttributes = default(void*);
			void* unsafe_ppSourceReader = default(void*);
			int unsafe___hr;
			try
			{
				// Marshalling
				unsafe_pByteStream = (void*)global::System.Runtime.InteropServices.McgMarshal.ObjectToComInterface(
									pByteStream, 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.MediaFoundation.IMFByteStream,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null")
								);
				unsafe_pAttributes = (void*)global::System.Runtime.InteropServices.McgMarshal.ObjectToComInterface(
									pAttributes, 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.MediaFoundation.IMFAttributes,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null")
								);
				unsafe_ppSourceReader = null;
				// Call to native method
				unsafe___hr = global::__Interop.mfreadwrite_dll_PInvokes.MFCreateSourceReaderFromByteStream(
									unsafe_pByteStream, 
									unsafe_pAttributes, 
									&(unsafe_ppSourceReader)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				ppSourceReader = (global::NAudio_MediaFoundation.IMFSourceReader__NAudio)global::System.Runtime.InteropServices.McgMarshal.ComInterfaceToObject(
									((global::System.IntPtr)unsafe_ppSourceReader), 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.MediaFoundation.IMFSourceReader,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null")
								);
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_pByteStream)));
				global::System.GC.KeepAlive(pByteStream);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_pAttributes)));
				global::System.GC.KeepAlive(pAttributes);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_ppSourceReader)));
			}
		}

		// Signature, MFCreateSinkWriterFromURL, [fwd] [return] [EETypeRva:0x00042030] void__int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00043660] NAudio_MediaFoundation_IMFByteStream__NAudio__NAudio_MediaFoundation__IMFByteStream__NAudio *, [fwd] [in] [EETypeRva:0x00043660] NAudio_MediaFoundation_IMFAttributes__NAudio__NAudio_MediaFoundation__IMFAttributes__NAudio *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00043660] NAudio_MediaFoundation_IMFSinkWriter__NAudio__NAudio_MediaFoundation__IMFSinkWriter__NAudio *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.MediaFoundation.MediaFoundationInterop", "MFCreateSinkWriterFromURL")]
		public static void MFCreateSinkWriterFromURL(
					string pwszOutputURL, 
					global::NAudio_MediaFoundation.IMFByteStream__NAudio pByteStream, 
					global::NAudio_MediaFoundation.IMFAttributes__NAudio pAttributes, 
					out global::NAudio_MediaFoundation.IMFSinkWriter__NAudio ppSinkWriter)
		{
			// Setup
			ushort* unsafe_pwszOutputURL = default(ushort*);
			void* unsafe_pByteStream = default(void*);
			void* unsafe_pAttributes = default(void*);
			void* unsafe_ppSinkWriter = default(void*);
			int unsafe___hr;
			try
			{
				// Marshalling
				fixed (char* pinned_pwszOutputURL = pwszOutputURL)
				{
					unsafe_pwszOutputURL = (ushort*)pinned_pwszOutputURL;
					unsafe_pByteStream = (void*)global::System.Runtime.InteropServices.McgMarshal.ObjectToComInterface(
										pByteStream, 
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.MediaFoundation.IMFByteStream,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null")
									);
					unsafe_pAttributes = (void*)global::System.Runtime.InteropServices.McgMarshal.ObjectToComInterface(
										pAttributes, 
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.MediaFoundation.IMFAttributes,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null")
									);
					unsafe_ppSinkWriter = null;
					// Call to native method
					unsafe___hr = global::__Interop.mfreadwrite_dll_PInvokes.MFCreateSinkWriterFromURL(
										unsafe_pwszOutputURL, 
										unsafe_pByteStream, 
										unsafe_pAttributes, 
										&(unsafe_ppSinkWriter)
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					ppSinkWriter = (global::NAudio_MediaFoundation.IMFSinkWriter__NAudio)global::System.Runtime.InteropServices.McgMarshal.ComInterfaceToObject(
										((global::System.IntPtr)unsafe_ppSinkWriter), 
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.MediaFoundation.IMFSinkWriter,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null")
									);
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_pByteStream)));
				global::System.GC.KeepAlive(pByteStream);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_pAttributes)));
				global::System.GC.KeepAlive(pAttributes);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_ppSinkWriter)));
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-synch-l1-2-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_synch_l1_2_0_dll
	{
		// Signature, CreateEventExW, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] NAudio_Wave_EventAccess__NAudio__EventAccess__NAudio, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.NativeMethods", "CreateEventExW")]
		public static global::System.IntPtr CreateEventExW(
					global::System.IntPtr lpEventAttributes, 
					global::System.IntPtr lpName, 
					int dwFlags, 
					global::NAudio_Wave.EventAccess__NAudio dwDesiredAccess)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_synch_l1_2_0_dll_PInvokes.CreateEventExW(
								lpEventAttributes, 
								lpName, 
								dwFlags, 
								dwDesiredAccess
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, WaitForSingleObjectEx, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.NativeMethods", "WaitForSingleObjectEx")]
		public static int WaitForSingleObjectEx(
					global::System.IntPtr hEvent, 
					int milliseconds, 
					bool bAlertable)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_synch_l1_2_0_dll_PInvokes.WaitForSingleObjectEx(
								hEvent, 
								milliseconds, 
								(bAlertable ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-handle-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_handle_l1_1_0_dll
	{
		// Signature, CloseHandle, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.NativeMethods", "CloseHandle")]
		public static bool CloseHandle(global::System.IntPtr hObject)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_handle_l1_1_0_dll_PInvokes.CloseHandle(hObject);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'Mmdevapi.dll'
	/// </summary>
	public unsafe static partial class Mmdevapi_dll
	{
		// Signature, ActivateAudioInterfaceAsync, [fwd] [return] [EETypeRva:0x00042030] void__int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00042EF4] System_Guid__System.Guid *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00043660] NAudio_Wave_IActivateAudioInterfaceCompletionHandler__NAudio__NAudio_Wave__IActivateAudioInterfaceCompletionHandler__NAudio *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00043660] NAudio_Wave_IActivateAudioInterfaceAsyncOperation__NAudio__NAudio_Wave__IActivateAudioInterfaceAsyncOperation__NAudio *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Wave.NativeMethods", "ActivateAudioInterfaceAsync")]
		public static void ActivateAudioInterfaceAsync(
					string deviceInterfacePath, 
					global::System.Guid riid, 
					global::System.IntPtr activationParams, 
					global::NAudio_Wave.IActivateAudioInterfaceCompletionHandler__NAudio completionHandler, 
					out global::NAudio_Wave.IActivateAudioInterfaceAsyncOperation__NAudio activationOperation)
		{
			// Setup
			ushort* unsafe_deviceInterfacePath = default(ushort*);
			global::System.Guid* unsafe_riid;
			void* unsafe_completionHandler = default(void*);
			void* unsafe_activationOperation = default(void*);
			int unsafe___hr;
			try
			{
				// Marshalling
				fixed (char* pinned_deviceInterfacePath = deviceInterfacePath)
				{
					unsafe_deviceInterfacePath = (ushort*)pinned_deviceInterfacePath;
					unsafe_riid = (global::System.Guid*)&(riid);
					unsafe_completionHandler = (void*)global::System.Runtime.InteropServices.McgMarshal.ObjectToComInterface(
										completionHandler, 
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.Wave.IActivateAudioInterfaceCompletionHandler,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=nu" +
												"ll")
									);
					unsafe_activationOperation = null;
					// Call to native method
					unsafe___hr = global::__Interop.Mmdevapi_dll_PInvokes.ActivateAudioInterfaceAsync(
										unsafe_deviceInterfacePath, 
										unsafe_riid, 
										activationParams, 
										unsafe_completionHandler, 
										&(unsafe_activationOperation)
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					activationOperation = (global::NAudio_Wave.IActivateAudioInterfaceAsyncOperation__NAudio)global::System.Runtime.InteropServices.McgMarshal.ComInterfaceToObject(
										((global::System.IntPtr)unsafe_activationOperation), 
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.Wave.IActivateAudioInterfaceAsyncOperation,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null")
									);
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_completionHandler)));
				global::System.GC.KeepAlive(completionHandler);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_activationOperation)));
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'msdmo.dll'
	/// </summary>
	public unsafe static partial class msdmo_dll
	{
		// Signature, DMOEnum, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_Guid__System.Guid, [fwd] [in] [EETypeRva:0x00042D60] NAudio_Dmo_DmoEnumFlags__NAudio__DmoEnumFlags__NAudio, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000424E8] rg_NAudio_Dmo_DmoPartialMediaType__NAudio__NAudio_Dmo__DmoPartialMediaType__NAudio *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000424E8] rg_NAudio_Dmo_DmoPartialMediaType__NAudio__NAudio_Dmo__DmoPartialMediaType__NAudio *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00043660] NAudio_Dmo_IEnumDmo__NAudio__NAudio_Dmo__IEnumDmo__NAudio *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Dmo.DmoInterop", "DMOEnum")]
		public static int DMOEnum(
					ref global::System.Guid guidCategory, 
					global::NAudio_Dmo.DmoEnumFlags__NAudio flags, 
					int inTypes, 
					global::NAudio_Dmo.DmoPartialMediaType__NAudio[] inTypesArray, 
					int outTypes, 
					global::NAudio_Dmo.DmoPartialMediaType__NAudio[] outTypesArray, 
					out global::NAudio_Dmo.IEnumDmo__NAudio enumDmo)
		{
			// Setup
			global::NAudio_Dmo.DmoPartialMediaType__NAudio* unsafe_inTypesArray = default(global::NAudio_Dmo.DmoPartialMediaType__NAudio*);
			global::NAudio_Dmo.DmoPartialMediaType__NAudio* unsafe_outTypesArray = default(global::NAudio_Dmo.DmoPartialMediaType__NAudio*);
			void* unsafe_enumDmo = default(void*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.Guid* pinned_guidCategory = &(guidCategory))
				{
					if (inTypesArray == null)
						unsafe_inTypesArray = null;
					else
					{
						if (inTypesArray != null)
							unsafe_inTypesArray = (global::NAudio_Dmo.DmoPartialMediaType__NAudio*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(inTypesArray.Length * sizeof(global::NAudio_Dmo.DmoPartialMediaType__NAudio))));
						if (inTypesArray != null)
							for (uint mcgIdx = 0; (mcgIdx < inTypesArray.Length); mcgIdx++)
							{
								// [fwd] [in] [optional] [EETypeRva:0x0004314C] NAudio_Dmo_DmoPartialMediaType__NAudio__NAudio_Dmo__DmoPartialMediaType__NAudio inTypesArray
								unsafe_inTypesArray[mcgIdx] = inTypesArray[mcgIdx];
							}
					}
					if (outTypesArray == null)
						unsafe_outTypesArray = null;
					else
					{
						if (outTypesArray != null)
							unsafe_outTypesArray = (global::NAudio_Dmo.DmoPartialMediaType__NAudio*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(outTypesArray.Length * sizeof(global::NAudio_Dmo.DmoPartialMediaType__NAudio))));
						if (outTypesArray != null)
							for (uint mcgIdx_2 = 0; (mcgIdx_2 < outTypesArray.Length); mcgIdx_2++)
							{
								// [fwd] [in] [optional] [EETypeRva:0x0004314C] NAudio_Dmo_DmoPartialMediaType__NAudio__NAudio_Dmo__DmoPartialMediaType__NAudio outTypesArray
								unsafe_outTypesArray[mcgIdx_2] = outTypesArray[mcgIdx_2];
							}
					}
					unsafe_enumDmo = null;
					// Call to native method
					unsafe___value = global::__Interop.msdmo_dll_PInvokes.DMOEnum(
										pinned_guidCategory, 
										flags, 
										inTypes, 
										unsafe_inTypesArray, 
										outTypes, 
										unsafe_outTypesArray, 
										&(unsafe_enumDmo)
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					enumDmo = (global::NAudio_Dmo.IEnumDmo__NAudio)global::System.Runtime.InteropServices.McgMarshal.ComInterfaceToObject(
										((global::System.IntPtr)unsafe_enumDmo), 
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.Dmo.IEnumDmo,NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null")
									);
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_inTypesArray);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_outTypesArray);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_enumDmo)));
			}
		}

		// Signature, MoFreeMediaType, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] NAudio_Dmo_DmoMediaType__NAudio__NAudio_Dmo__DmoMediaType__NAudio, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Dmo.DmoInterop", "MoFreeMediaType")]
		public static int MoFreeMediaType(ref global::NAudio_Dmo.DmoMediaType__NAudio mediaType)
		{
			// Setup
			global::NAudio_Dmo.DmoMediaType__NAudio__Impl.UnsafeType unsafe_mediaType = default(global::NAudio_Dmo.DmoMediaType__NAudio__Impl.UnsafeType);
			int unsafe___value;
			// Marshalling
			global::NAudio_Dmo.DmoMediaType__NAudio__Impl.Marshal__SafeToUnsafe(
								ref mediaType, 
								out unsafe_mediaType
							);
			// Call to native method
			unsafe___value = global::__Interop.msdmo_dll_PInvokes.MoFreeMediaType(&(unsafe_mediaType));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MoInitMediaType, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] NAudio_Dmo_DmoMediaType__NAudio__NAudio_Dmo__DmoMediaType__NAudio, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Dmo.DmoInterop", "MoInitMediaType")]
		public static int MoInitMediaType(
					ref global::NAudio_Dmo.DmoMediaType__NAudio mediaType, 
					int formatBlockBytes)
		{
			// Setup
			global::NAudio_Dmo.DmoMediaType__NAudio__Impl.UnsafeType unsafe_mediaType = default(global::NAudio_Dmo.DmoMediaType__NAudio__Impl.UnsafeType);
			int unsafe___value;
			// Marshalling
			global::NAudio_Dmo.DmoMediaType__NAudio__Impl.Marshal__SafeToUnsafe(
								ref mediaType, 
								out unsafe_mediaType
							);
			// Call to native method
			unsafe___value = global::__Interop.msdmo_dll_PInvokes.MoInitMediaType(
								&(unsafe_mediaType), 
								formatBlockBytes
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::NAudio_Dmo.DmoMediaType__NAudio__Impl.Marshal__UnsafeToSafe(
								ref unsafe_mediaType, 
								out mediaType
							);
			// Return
			return unsafe___value;
		}

		// Signature, DMOGetName, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_Guid__System.Guid, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.Dmo.DmoInterop", "DMOGetName")]
		public static int DMOGetName(
					ref global::System.Guid clsidDMO, 
					global::System.Text.StringBuilder name)
		{
			// Setup
			byte* unsafe_name = default(byte*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.Guid* pinned_clsidDMO = &(clsidDMO))
				{
					if (name == null)
						unsafe_name = null;
					else
					{
						unsafe_name = (byte*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(name.Capacity * global::System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize 
											+ 2)));
						if (unsafe_name == null)
							throw new global::System.OutOfMemoryException();
					}
					// Call to native method
					unsafe___value = global::__Interop.msdmo_dll_PInvokes.DMOGetName(
										pinned_clsidDMO, 
										unsafe_name
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					if (name != null)
						global::System.Runtime.InteropServices.McgMarshal.AnsiStringToStringBuilder(
											unsafe_name, 
											name
										);
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_name != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_name);
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-com-l1-1-1.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_com_l1_1_1_dll
	{
		// Signature, PropVariantClear, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] NAudio_CoreAudioApi_Interfaces_PropVariant__NAudio__NAudio_CoreAudioApi_Interfaces__PropVariant__NAudio, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.CoreAudioApi.Interfaces.PropVariantNative", "PropVariantClear")]
		public static int PropVariantClear(ref global::NAudio_CoreAudioApi_Interfaces.PropVariant__NAudio pvar)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::NAudio_CoreAudioApi_Interfaces.PropVariant__NAudio* pinned_pvar = &(pvar))
			{
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_com_l1_1_1_dll_PInvokes.PropVariantClear(pinned_pvar);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, PropVariantClear__0, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio, Version=1.9.0.0, Culture=neutral, PublicKeyToken=null", "NAudio.CoreAudioApi.Interfaces.PropVariantNative", "PropVariantClear")]
		public static int PropVariantClear__0(global::System.IntPtr pvar)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_com_l1_1_1_dll_PInvokes.PropVariantClear__0(pvar);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'kernel32'
	/// </summary>
	public unsafe static partial class kernel32
	{
		// Signature, CopyMemory, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Swan, Version=2.3.1.0, Culture=neutral, PublicKeyToken=null", "Swan.CircularBuffer", "CopyMemory")]
		public static void CopyMemory(
					global::System.IntPtr destination, 
					global::System.IntPtr source, 
					uint length)
		{
			// Marshalling
			// Call to native method
			global::__Interop.kernel32_PInvokes.CopyMemory(
								destination, 
								source, 
								length
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'libc'
	/// </summary>
	public unsafe static partial class libc
	{
		// Signature, StrError, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.Raspberry.Abstractions, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.RaspberryIO.Abstractions.Native.Standard", "StrError")]
		public static global::System.IntPtr StrError(int errnum)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libc_PInvokes.StrError(errnum);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, Uname, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] Unosquare_RaspberryIO_Native_SystemName__Unosquare_RaspberryIO__Unosquare_RaspberryIO_Native__SystemName__Unosquare_RaspberryIO, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.RaspberryIO, Version=0.27.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.RaspberryIO.Native.Standard", "Uname")]
		public static int Uname(out global::Unosquare_RaspberryIO_Native.SystemName__Unosquare_RaspberryIO name)
		{
			// Setup
			global::Unosquare_RaspberryIO_Native.SystemName__Unosquare_RaspberryIO__Impl.UnsafeType unsafe_name = default(global::Unosquare_RaspberryIO_Native.SystemName__Unosquare_RaspberryIO__Impl.UnsafeType);
			int unsafe___value;
			// Marshalling
			unsafe_name = default(global::Unosquare_RaspberryIO_Native.SystemName__Unosquare_RaspberryIO__Impl.UnsafeType);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libc_PInvokes.Uname(&(unsafe_name));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::Unosquare_RaspberryIO_Native.SystemName__Unosquare_RaspberryIO__Impl.Marshal__UnsafeToSafe(
								ref unsafe_name, 
								out name
							);
			// Return
			return unsafe___value;
		}

		// Signature, Chmod, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.SysCall", "Chmod")]
		public static int Chmod(
					string filename, 
					uint mode)
		{
			// Setup
			byte* unsafe_filename = default(byte*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_filename = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(filename, true, false);
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.libc_PInvokes.Chmod(
									unsafe_filename, 
									mode
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_filename);
			}
		}

		// Signature, StringToInteger, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.SysCall", "StringToInteger")]
		public static int StringToInteger(
					string numberString, 
					global::System.IntPtr endPointer, 
					int numberBase)
		{
			// Setup
			byte* unsafe_numberString = default(byte*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_numberString = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(numberString, true, false);
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.libc_PInvokes.StringToInteger(
									unsafe_numberString, 
									endPointer, 
									numberBase
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_numberString);
			}
		}

		// Signature, Write, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.SysCall", "Write")]
		public static int Write(
					int fd, 
					byte[] buffer, 
					int count)
		{
			// Setup
			byte* unsafe_buffer;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_buffer = ((buffer != null 
						&& buffer.Length == 0) ? new byte[1] : buffer))
			{
				unsafe_buffer = (byte*)pinned_buffer;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.libc_PInvokes.Write(
									fd, 
									unsafe_buffer, 
									count
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'MonoPosixHelper'
	/// </summary>
	public unsafe static partial class MonoPosixHelper
	{
		// Signature, Strerror, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.Raspberry.Abstractions, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.RaspberryIO.Abstractions.Native.Standard", "Strerror")]
		public static int Strerror(
					int error, 
					global::System.Text.StringBuilder buffer, 
					ulong length)
		{
			// Setup
			byte* unsafe_buffer = default(byte*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (buffer == null)
					unsafe_buffer = null;
				else
				{
					unsafe_buffer = (byte*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(buffer.Capacity * global::System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize 
										+ 2)));
					if (unsafe_buffer == null)
						throw new global::System.OutOfMemoryException();
				}
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.MonoPosixHelper_PInvokes.Strerror(
									error, 
									unsafe_buffer, 
									length
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (buffer != null)
					global::System.Runtime.InteropServices.McgMarshal.AnsiStringToStringBuilder(
										unsafe_buffer, 
										buffer
									);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_buffer != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_buffer);
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'libwiringPi.so.2.50'
	/// </summary>
	public unsafe static partial class libwiringPi_so_2_50
	{
		// Signature, WiringPiSetup, [fwd] [return] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "WiringPiSetup")]
		public static int WiringPiSetup()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.WiringPiSetup();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, WiringPiSetupSys, [fwd] [return] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "WiringPiSetupSys")]
		public static int WiringPiSetupSys()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.WiringPiSetupSys();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, WiringPiSetupGpio, [fwd] [return] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "WiringPiSetupGpio")]
		public static int WiringPiSetupGpio()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.WiringPiSetupGpio();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, WiringPiSetupPhys, [fwd] [return] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "WiringPiSetupPhys")]
		public static int WiringPiSetupPhys()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.WiringPiSetupPhys();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, PinModeAlt, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "PinModeAlt")]
		public static void PinModeAlt(
					int pin, 
					int mode)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.PinModeAlt(
								pin, 
								mode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, PinMode, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "PinMode")]
		public static void PinMode(
					int pin, 
					int mode)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.PinMode(
								pin, 
								mode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, PullUpDnControl, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "PullUpDnControl")]
		public static void PullUpDnControl(
					int pin, 
					int pud)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.PullUpDnControl(
								pin, 
								pud
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, DigitalRead, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "DigitalRead")]
		public static int DigitalRead(int pin)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.DigitalRead(pin);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, DigitalWrite, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "DigitalWrite")]
		public static void DigitalWrite(
					int pin, 
					int value)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.DigitalWrite(
								pin, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, PwmWrite, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "PwmWrite")]
		public static void PwmWrite(
					int pin, 
					int value)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.PwmWrite(
								pin, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, AnalogRead, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "AnalogRead")]
		public static int AnalogRead(int pin)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.AnalogRead(pin);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, AnalogWrite, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "AnalogWrite")]
		public static void AnalogWrite(
					int pin, 
					int value)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.AnalogWrite(
								pin, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, PiBoardRev, [fwd] [return] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "PiBoardRev")]
		public static int PiBoardRev()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.PiBoardRev();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, PiBoardId, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "PiBoardId")]
		public static int PiBoardId(
					ref int model, 
					ref int mem, 
					ref int maker, 
					ref int overVolted)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_model = &(model))
				fixed (int* pinned_mem = &(mem))
					fixed (int* pinned_maker = &(maker))
						fixed (int* pinned_overVolted = &(overVolted))
						{
							global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
							// Call to native method
							unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.PiBoardId(
												pinned_model, 
												pinned_mem, 
												pinned_maker, 
												pinned_overVolted
											);
							global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
							global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
						}
			// Return
			return unsafe___value;
		}

		// Signature, WpiPinToGpio, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "WpiPinToGpio")]
		public static int WpiPinToGpio(int wPiPin)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.WpiPinToGpio(wPiPin);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, PhysPinToGpio, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "PhysPinToGpio")]
		public static int PhysPinToGpio(int physPin)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.PhysPinToGpio(physPin);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, SetPadDrive, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "SetPadDrive")]
		public static int SetPadDrive(
					int group, 
					int value)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.SetPadDrive(
								group, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, GetAlt, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "GetAlt")]
		public static int GetAlt(int pin)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.GetAlt(pin);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, PwmToneWrite, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "PwmToneWrite")]
		public static int PwmToneWrite(
					int pin, 
					int freq)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.PwmToneWrite(
								pin, 
								freq
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, DigitalWriteByte, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "DigitalWriteByte")]
		public static void DigitalWriteByte(int value)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.DigitalWriteByte(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, DigitalWriteByte2, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "DigitalWriteByte2")]
		public static void DigitalWriteByte2(int value)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.DigitalWriteByte2(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, DigitalReadByte, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "DigitalReadByte")]
		public static uint DigitalReadByte()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.DigitalReadByte();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, DigitalReadByte2, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "DigitalReadByte2")]
		public static uint DigitalReadByte2()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.DigitalReadByte2();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, PwmSetMode, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "PwmSetMode")]
		public static void PwmSetMode(int mode)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.PwmSetMode(mode);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, PwmSetRange, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "PwmSetRange")]
		public static void PwmSetRange(uint range)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.PwmSetRange(range);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, PwmSetClock, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "PwmSetClock")]
		public static void PwmSetClock(int divisor)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.PwmSetClock(divisor);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, GpioClockSet, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "GpioClockSet")]
		public static void GpioClockSet(
					int pin, 
					int freq)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.GpioClockSet(
								pin, 
								freq
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, WiringPiISR, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00041EA8] Unosquare_WiringPi_Native_InterruptServiceRoutineCallback__Unosquare_WiringPi__Unosquare_WiringPi_Native__InterruptServiceRoutineCallback__Unosquare_WiringPi, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "WiringPiISR")]
		public static int WiringPiISR(
					int pin, 
					int mode, 
					global::Unosquare.WiringPi.Native.InterruptServiceRoutineCallback__Unosquare_WiringPi method)
		{
			// Setup
			void* unsafe_method = default(void*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_method = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Unosquare.WiringPi.Native.InterruptServiceRoutineCallback,Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, " +
											"PublicKeyToken=null"), 
									method
								);
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.WiringPiISR(
									pin, 
									mode, 
									unsafe_method
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(method);
			}
		}

		// Signature, PiThreadCreate, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00041EA8] Unosquare_WiringPi_Native_ThreadWorker__Unosquare_WiringPi__Unosquare_WiringPi_Native__ThreadWorker__Unosquare_WiringPi, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "PiThreadCreate")]
		public static int PiThreadCreate(global::Unosquare.WiringPi.Native.ThreadWorker__Unosquare_WiringPi method)
		{
			// Setup
			void* unsafe_method = default(void*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_method = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Unosquare.WiringPi.Native.ThreadWorker,Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null" +
											""), 
									method
								);
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.PiThreadCreate(unsafe_method);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(method);
			}
		}

		// Signature, PiLock, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "PiLock")]
		public static void PiLock(int key)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.PiLock(key);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, PiUnlock, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "PiUnlock")]
		public static void PiUnlock(int key)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.PiUnlock(key);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, PiHiPri, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "PiHiPri")]
		public static int PiHiPri(int priority)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.PiHiPri(priority);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, Delay, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "Delay")]
		public static void Delay(uint howLong)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.Delay(howLong);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, DelayMicroseconds, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "DelayMicroseconds")]
		public static void DelayMicroseconds(uint howLong)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.DelayMicroseconds(howLong);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, Millis, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "Millis")]
		public static uint Millis()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.Millis();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, Micros, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "Micros")]
		public static uint Micros()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.Micros();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, WiringPiI2CRead, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "WiringPiI2CRead")]
		public static int WiringPiI2CRead(int fd)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.WiringPiI2CRead(fd);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, WiringPiI2CReadReg8, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "WiringPiI2CReadReg8")]
		public static int WiringPiI2CReadReg8(
					int fd, 
					int reg)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.WiringPiI2CReadReg8(
								fd, 
								reg
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, WiringPiI2CReadReg16, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "WiringPiI2CReadReg16")]
		public static int WiringPiI2CReadReg16(
					int fd, 
					int reg)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.WiringPiI2CReadReg16(
								fd, 
								reg
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, WiringPiI2CWrite, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "WiringPiI2CWrite")]
		public static int WiringPiI2CWrite(
					int fd, 
					int data)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.WiringPiI2CWrite(
								fd, 
								data
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, WiringPiI2CWriteReg8, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "WiringPiI2CWriteReg8")]
		public static int WiringPiI2CWriteReg8(
					int fd, 
					int reg, 
					int data)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.WiringPiI2CWriteReg8(
								fd, 
								reg, 
								data
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, WiringPiI2CWriteReg16, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "WiringPiI2CWriteReg16")]
		public static int WiringPiI2CWriteReg16(
					int fd, 
					int reg, 
					int data)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.WiringPiI2CWriteReg16(
								fd, 
								reg, 
								data
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, WiringPiI2CSetup, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "WiringPiI2CSetup")]
		public static int WiringPiI2CSetup(int devId)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.WiringPiI2CSetup(devId);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, SerialOpen, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "SerialOpen")]
		public static int SerialOpen(
					string device, 
					int baud)
		{
			// Setup
			byte* unsafe_device = default(byte*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_device = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(device, true, false);
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.SerialOpen(
									unsafe_device, 
									baud
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_device);
			}
		}

		// Signature, SerialClose, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "SerialClose")]
		public static int SerialClose(int fd)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.SerialClose(fd);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, SerialPutchar, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte__unsigned char, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "SerialPutchar")]
		public static void SerialPutchar(
					int fd, 
					byte c)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.SerialPutchar(
								fd, 
								c
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, SerialPuts, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "SerialPuts")]
		public static void SerialPuts(
					int fd, 
					string s)
		{
			// Setup
			byte* unsafe_s = default(byte*);
			try
			{
				// Marshalling
				unsafe_s = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(s, true, false);
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				global::__Interop.libwiringPi_so_2_50_PInvokes.SerialPuts(
									fd, 
									unsafe_s
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_s);
			}
		}

		// Signature, SerialDataAvail, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "SerialDataAvail")]
		public static int SerialDataAvail(int fd)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.SerialDataAvail(fd);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, SerialGetchar, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "SerialGetchar")]
		public static int SerialGetchar(int fd)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.SerialGetchar(fd);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, SerialFlush, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "SerialFlush")]
		public static void SerialFlush(int fd)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.SerialFlush(fd);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, ShiftIn, [fwd] [return] [EETypeRva:0x000419B0] byte__unsigned char, [fwd] [in] [EETypeRva:0x000419B0] byte__unsigned char, [fwd] [in] [EETypeRva:0x000419B0] byte__unsigned char, [fwd] [in] [EETypeRva:0x000419B0] byte__unsigned char, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "ShiftIn")]
		public static byte ShiftIn(
					byte dPin, 
					byte cPin, 
					byte order)
		{
			// Setup
			byte unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.ShiftIn(
								dPin, 
								cPin, 
								order
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, ShiftOut, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] byte__unsigned char, [fwd] [in] [EETypeRva:0x000419B0] byte__unsigned char, [fwd] [in] [EETypeRva:0x000419B0] byte__unsigned char, [fwd] [in] [EETypeRva:0x000419B0] byte__unsigned char, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "ShiftOut")]
		public static void ShiftOut(
					byte dPin, 
					byte cPin, 
					byte order, 
					byte val)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.ShiftOut(
								dPin, 
								cPin, 
								order, 
								val
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, SoftPwmCreate, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "SoftPwmCreate")]
		public static int SoftPwmCreate(
					int pin, 
					int initialValue, 
					int pwmRange)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.SoftPwmCreate(
								pin, 
								initialValue, 
								pwmRange
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, SoftPwmWrite, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "SoftPwmWrite")]
		public static void SoftPwmWrite(
					int pin, 
					int value)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.SoftPwmWrite(
								pin, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, SoftPwmStop, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "SoftPwmStop")]
		public static void SoftPwmStop(int pin)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.SoftPwmStop(pin);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, SoftToneCreate, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "SoftToneCreate")]
		public static int SoftToneCreate(int pin)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.SoftToneCreate(pin);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, SoftToneStop, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "SoftToneStop")]
		public static void SoftToneStop(int pin)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.SoftToneStop(pin);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, SoftToneWrite, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "SoftToneWrite")]
		public static void SoftToneWrite(
					int pin, 
					int freq)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.libwiringPi_so_2_50_PInvokes.SoftToneWrite(
								pin, 
								freq
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, WiringPiSPIGetFd, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "WiringPiSPIGetFd")]
		public static int WiringPiSPIGetFd(int channel)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.WiringPiSPIGetFd(channel);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, WiringPiSPIDataRW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "WiringPiSPIDataRW")]
		public static int WiringPiSPIDataRW(
					int channel, 
					byte[] data, 
					int len)
		{
			// Setup
			byte* unsafe_data;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_data = ((data != null 
						&& data.Length == 0) ? new byte[1] : data))
			{
				unsafe_data = (byte*)pinned_data;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.WiringPiSPIDataRW(
									channel, 
									unsafe_data, 
									len
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, WiringPiSPISetupMode, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "WiringPiSPISetupMode")]
		public static int WiringPiSPISetupMode(
					int channel, 
					int speed, 
					int mode)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.WiringPiSPISetupMode(
								channel, 
								speed, 
								mode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, WiringPiSPISetup, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Unosquare.WiringPi, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null", "Unosquare.WiringPi.Native.WiringPi", "WiringPiSPISetup")]
		public static int WiringPiSPISetup(
					int channel, 
					int speed)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.libwiringPi_so_2_50_PInvokes.WiringPiSPISetup(
								channel, 
								speed
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module '[MRT]'
	/// </summary>
	public unsafe static partial class _MRT_
	{
		// Signature, RhpGetFuncEvalParameterBufferSize, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpGetFuncEvalParameterBufferSize")]
		public static uint RhpGetFuncEvalParameterBufferSize()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpGetFuncEvalParameterBufferSize();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhpGetFuncEvalMode, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpGetFuncEvalMode")]
		public static uint RhpGetFuncEvalMode()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpGetFuncEvalMode();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhpRecordDebuggeeInitiatedHandle, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpRecordDebuggeeInitiatedHandle")]
		public static uint RhpRecordDebuggeeInitiatedHandle(void* objectHandle)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpRecordDebuggeeInitiatedHandle(((void*)objectHandle));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhpVerifyDebuggerCleanup, [fwd] [return] [EETypeRva:0x00041F6C] void__void, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpVerifyDebuggerCleanup")]
		public static void RhpVerifyDebuggerCleanup()
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhpVerifyDebuggerCleanup();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, RhpGetCurrentThread, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpGetCurrentThread")]
		public static global::System.IntPtr RhpGetCurrentThread()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpGetCurrentThread();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhWaitForPendingFinalizers, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhWaitForPendingFinalizers")]
		public static void RhWaitForPendingFinalizers(int allowReentrantWait)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhWaitForPendingFinalizers(allowReentrantWait);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, _RhYield, [fwd] [return] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "_RhYield")]
		public static int _RhYield()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes._RhYield();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhFlushProcessWriteBuffers, [fwd] [return] [EETypeRva:0x00041F6C] void__void, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhFlushProcessWriteBuffers")]
		public static void RhFlushProcessWriteBuffers()
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhFlushProcessWriteBuffers();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, RhCompatibleReentrantWaitAny, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr___ptr__w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhCompatibleReentrantWaitAny")]
		public static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhCompatibleReentrantWaitAny(
								alertable, 
								timeout, 
								count, 
								((global::System.IntPtr*)handles)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhCallDescrWorkerNative, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhCallDescrWorkerNative")]
		public static void RhCallDescrWorkerNative(global::System.IntPtr callDescr)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhCallDescrWorkerNative(callDescr);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, _ecvt_s, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int___ptrint *, [fwd] [in] [EETypeRva:0x000419B0] int___ptrint *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "_ecvt_s")]
		public static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes._ecvt_s(
								((byte*)buffer), 
								sizeInBytes, 
								value, 
								count, 
								((int*)dec), 
								((int*)sign)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, memmove, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "memmove")]
		public static void memmove(
					byte* dmem, 
					byte* smem, 
					ulong size)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.memmove(
								((byte*)dmem), 
								((byte*)smem), 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, memset, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "memset")]
		public static void memset(
					byte* mem, 
					int value, 
					ulong size)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.memset(
								((byte*)mem), 
								value, 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module '*'
	/// </summary>
	public unsafe static partial class _
	{
		// Signature, CallingConventionConverter_GetStubs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.TypeLoader, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.Runtime.TypeLoader.CallConverterThunk", "CallingConventionConverter_GetStubs")]
		public static void CallingConventionConverter_GetStubs(
					out global::System.IntPtr returnVoidStub, 
					out global::System.IntPtr returnIntegerStub, 
					out global::System.IntPtr commonStub)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_returnVoidStub = &(returnVoidStub))
				fixed (global::System.IntPtr* pinned_returnIntegerStub = &(returnIntegerStub))
					fixed (global::System.IntPtr* pinned_commonStub = &(commonStub))
					{
						// Call to native method
						global::__Interop.__PInvokes.CallingConventionConverter_GetStubs(
											pinned_returnVoidStub, 
											pinned_returnIntegerStub, 
											pinned_commonStub
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-string-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_string_l1_1_0_dll
	{
		// Signature, WindowsCreateStringReference, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_Runtime_InteropServices_HSTRING_HEADER__System_Private_Interop___ptrSystem_Runtime_InteropServices__HSTRING_HEADER__System_Private_Interop *, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore", "WindowsCreateStringReference")]
		public static int WindowsCreateStringReference(
					char* sourceString, 
					uint length, 
					global::System_Runtime_InteropServices.HSTRING_HEADER__System_Private_Interop* phstringHeader, 
					void* hstring)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_winrt_string_l1_1_0_dll_PInvokes.WindowsCreateStringReference(
								((ushort*)sourceString), 
								length, 
								((global::System_Runtime_InteropServices.HSTRING_HEADER__System_Private_Interop*)phstringHeader), 
								((void*)hstring)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-errorhandling-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_0_dll
	{
		// Signature, GetLastError, [fwd] [return] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetLastError")]
		public static int GetLastError()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes.GetLastError();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, SetLastError, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "SetLastError")]
		public static void SetLastError(uint dwErrCode)
		{
			// Marshalling
			// Call to native method
			global::__Interop.api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes.SetLastError(dwErrCode);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll
	{
		// Signature, RoInitialize, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "RoInitialize")]
		public static int RoInitialize(uint initType)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_winrt_l1_1_0_dll_PInvokes.RoInitialize(initType);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-localization-l1-2-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_localization_l1_2_0_dll
	{
		// Signature, IsValidLocaleName, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "IsValidLocaleName")]
		public static int IsValidLocaleName(char* lpLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.IsValidLocaleName(((ushort*)lpLocaleName));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResolveLocaleName, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "ResolveLocaleName")]
		public static int ResolveLocaleName(
					char* lpNameToResolve, 
					char* lpLocaleName, 
					int cchLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.ResolveLocaleName(
								((ushort*)lpNameToResolve), 
								((ushort*)lpLocaleName), 
								cchLocaleName
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'ws2_32.dll'
	/// </summary>
	public unsafe static partial class ws2_32_dll
	{
		// Signature, getsockname, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getsockname")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockname(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					byte[] socketAddress, 
					ref int socketAddressSize)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_socketAddress;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_socketAddress = ((socketAddress != null 
						&& socketAddress.Length == 0) ? new byte[1] : socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				fixed (int* pinned_socketAddressSize = &(socketAddressSize))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getsockname(
										socketHandle.DangerousGetHandle(), 
										unsafe_socketAddress, 
										pinned_socketAddressSize
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getpeername, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getpeername")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getpeername(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					byte[] socketAddress, 
					ref int socketAddressSize)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_socketAddress;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_socketAddress = ((socketAddress != null 
						&& socketAddress.Length == 0) ? new byte[1] : socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				fixed (int* pinned_socketAddressSize = &(socketAddressSize))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getpeername(
										socketHandle.DangerousGetHandle(), 
										unsafe_socketAddress, 
										pinned_socketAddressSize
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, select, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Winsock_TimeValue__System_Net_Sockets____Interop_Winsock_TimeValue__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "select")]
		public static int select(
					int ignoredParameter, 
					global::System.IntPtr[] readfds, 
					global::System.IntPtr[] writefds, 
					global::System.IntPtr[] exceptfds, 
					ref global::_.Interop_Winsock_TimeValue__System_Net_Sockets timeout)
		{
			// Setup
			global::System.IntPtr* unsafe_readfds;
			global::System.IntPtr* unsafe_writefds;
			global::System.IntPtr* unsafe_exceptfds;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_readfds = ((readfds != null 
						&& readfds.Length == 0) ? new global::System.IntPtr[1] : readfds))
			{
				unsafe_readfds = (global::System.IntPtr*)pinned_readfds;
				fixed (global::System.IntPtr* pinned_writefds = ((writefds != null 
							&& writefds.Length == 0) ? new global::System.IntPtr[1] : writefds))
				{
					unsafe_writefds = (global::System.IntPtr*)pinned_writefds;
					fixed (global::System.IntPtr* pinned_exceptfds = ((exceptfds != null 
								&& exceptfds.Length == 0) ? new global::System.IntPtr[1] : exceptfds))
					{
						unsafe_exceptfds = (global::System.IntPtr*)pinned_exceptfds;
						fixed (global::_.Interop_Winsock_TimeValue__System_Net_Sockets* pinned_timeout = &(timeout))
						{
							global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
							// Call to native method
							unsafe___value = global::__Interop.ws2_32_dll_PInvokes.select(
												ignoredParameter, 
												unsafe_readfds, 
												unsafe_writefds, 
												unsafe_exceptfds, 
												pinned_timeout
											);
							global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
							global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
						}
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, select__0, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "select")]
		public static int select__0(
					int ignoredParameter, 
					global::System.IntPtr[] readfds, 
					global::System.IntPtr[] writefds, 
					global::System.IntPtr[] exceptfds, 
					global::System.IntPtr nullTimeout)
		{
			// Setup
			global::System.IntPtr* unsafe_readfds;
			global::System.IntPtr* unsafe_writefds;
			global::System.IntPtr* unsafe_exceptfds;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_readfds = ((readfds != null 
						&& readfds.Length == 0) ? new global::System.IntPtr[1] : readfds))
			{
				unsafe_readfds = (global::System.IntPtr*)pinned_readfds;
				fixed (global::System.IntPtr* pinned_writefds = ((writefds != null 
							&& writefds.Length == 0) ? new global::System.IntPtr[1] : writefds))
				{
					unsafe_writefds = (global::System.IntPtr*)pinned_writefds;
					fixed (global::System.IntPtr* pinned_exceptfds = ((exceptfds != null 
								&& exceptfds.Length == 0) ? new global::System.IntPtr[1] : exceptfds))
					{
						unsafe_exceptfds = (global::System.IntPtr*)pinned_exceptfds;
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.ws2_32_dll_PInvokes.select__0(
											ignoredParameter, 
											unsafe_readfds, 
											unsafe_writefds, 
											unsafe_exceptfds, 
											nullTimeout
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, ioctlsocket, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "ioctlsocket")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives ioctlsocket(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					int cmd, 
					ref int argp)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (int* pinned_argp = &(argp))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.ioctlsocket(
									socketHandle.DangerousGetHandle(), 
									cmd, 
									pinned_argp
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockopt, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					out int optionValue, 
					ref int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (int* pinned_optionValue = &(optionValue))
				fixed (int* pinned_optionLength = &(optionLength))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getsockopt(
										socketHandle.DangerousGetHandle(), 
										optionLevel, 
										optionName, 
										pinned_optionValue, 
										pinned_optionLength
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, recv, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "recv")]
		public static int recv(
					global::System.IntPtr socketHandle, 
					byte* pinnedBuffer, 
					int len, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.recv(
								socketHandle, 
								((byte*)pinnedBuffer), 
								len, 
								socketFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, send, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "send")]
		public static int send(
					global::System.IntPtr socketHandle, 
					byte* pinnedBuffer, 
					int len, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.send(
								socketHandle, 
								((byte*)pinnedBuffer), 
								len, 
								socketFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, shutdown, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "shutdown")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives shutdown(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					int how)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.shutdown(
								socketHandle.DangerousGetHandle(), 
								how
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, setsockopt, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "setsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					ref int optionValue, 
					int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (int* pinned_optionValue = &(optionValue))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.setsockopt(
									socketHandle.DangerousGetHandle(), 
									optionLevel, 
									optionName, 
									pinned_optionValue, 
									optionLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockopt__0, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Winsock_Linger__System_Net_Sockets____Interop_Winsock_Linger__System_Net_Sockets, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__0(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					out global::_.Interop_Winsock_Linger__System_Net_Sockets optionValue, 
					ref int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (global::_.Interop_Winsock_Linger__System_Net_Sockets* pinned_optionValue = &(optionValue))
				fixed (int* pinned_optionLength = &(optionLength))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getsockopt__0(
										socketHandle.DangerousGetHandle(), 
										optionLevel, 
										optionName, 
										pinned_optionValue, 
										pinned_optionLength
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockopt__1, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Winsock_IPMulticastRequest__System_Net_Sockets____Interop_Winsock_IPMulticastRequest__System_Net_Sockets, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__1(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					out global::_.Interop_Winsock_IPMulticastRequest__System_Net_Sockets optionValue, 
					ref int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (global::_.Interop_Winsock_IPMulticastRequest__System_Net_Sockets* pinned_optionValue = &(optionValue))
				fixed (int* pinned_optionLength = &(optionLength))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getsockopt__1(
										socketHandle.DangerousGetHandle(), 
										optionLevel, 
										optionName, 
										pinned_optionValue, 
										pinned_optionLength
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockopt__2, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] __Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets____Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__2(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					out global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets optionValue, 
					ref int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets__Impl.UnsafeType unsafe_optionValue = default(global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets__Impl.UnsafeType);
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			unsafe_optionValue = default(global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets__Impl.UnsafeType);
			fixed (int* pinned_optionLength = &(optionLength))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getsockopt__2(
									socketHandle.DangerousGetHandle(), 
									optionLevel, 
									optionName, 
									&(unsafe_optionValue), 
									pinned_optionLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets__Impl.Marshal__UnsafeToSafe(
								ref unsafe_optionValue, 
								out optionValue
							);
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, listen, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "listen")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives listen(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					int backlog)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.listen(
								socketHandle.DangerousGetHandle(), 
								backlog
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, WSASocketW, [fwd] [return] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_AddressFamily__System_Net_Primitives__AddressFamily__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketType__System_Net_Sockets__SocketType__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_ProtocolType__System_Net_Sockets__ProtocolType__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Winsock_SocketConstructorFlags__System_Net_Sockets__Interop_Winsock_SocketConstructorFlags__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSASocketW")]
		public static global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets WSASocketW(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Sockets.SocketType__System_Net_Sockets socketType, 
					global::System_Net_Sockets.ProtocolType__System_Net_Sockets protocolType, 
					global::System.IntPtr protocolInfo, 
					uint group, 
					global::_.Interop_Winsock_SocketConstructorFlags__System_Net_Sockets flags)
		{
			// Setup
			global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSASocketW(
								addressFamily, 
								socketType, 
								protocolType, 
								protocolInfo, 
								group, 
								flags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, WSAGetOverlappedResult, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_Threading_NativeOverlapped__System_Private_CoreLib___ptrSystem_Threading__NativeOverlapped__System_Private_CoreLib *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSAGetOverlappedResult")]
		public static bool WSAGetOverlappedResult(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					out uint bytesTransferred, 
					bool wait, 
					out global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (uint* pinned_bytesTransferred = &(bytesTransferred))
				fixed (global::System_Net_Sockets.SocketFlags__System_Net_Sockets* pinned_socketFlags = &(socketFlags))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSAGetOverlappedResult(
										socketHandle.DangerousGetHandle(), 
										((global::System_Threading.NativeOverlapped__System_Private_CoreLib*)overlapped), 
										pinned_bytesTransferred, 
										(wait ? 1 : 0), 
										pinned_socketFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, bind, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "bind")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives bind(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					byte[] socketAddress, 
					int socketAddressSize)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_socketAddress;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_socketAddress = ((socketAddress != null 
						&& socketAddress.Length == 0) ? new byte[1] : socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.bind(
									socketHandle.DangerousGetHandle(), 
									unsafe_socketAddress, 
									socketAddressSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, WSARecv, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_Net_Sockets_WSABuffer__System_Net_Sockets___ptrSystem_Net_Sockets__WSABuffer__System_Net_Sockets *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000419B0] System_Threading_NativeOverlapped__System_Private_CoreLib___ptrSystem_Threading__NativeOverlapped__System_Private_CoreLib *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSARecv")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSARecv(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.WSABuffer__System_Net_Sockets* buffer, 
					int bufferCount, 
					out int bytesTransferred, 
					ref global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					global::System.IntPtr completionRoutine)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (int* pinned_bytesTransferred = &(bytesTransferred))
				fixed (global::System_Net_Sockets.SocketFlags__System_Net_Sockets* pinned_socketFlags = &(socketFlags))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSARecv(
										socketHandle, 
										((global::System_Net_Sockets.WSABuffer__System_Net_Sockets*)buffer), 
										bufferCount, 
										pinned_bytesTransferred, 
										pinned_socketFlags, 
										((global::System_Threading.NativeOverlapped__System_Private_CoreLib*)overlapped), 
										completionRoutine
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			// Return
			return unsafe___value;
		}

		// Signature, WSASend, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_Net_Sockets_WSABuffer__System_Net_Sockets___ptrSystem_Net_Sockets__WSABuffer__System_Net_Sockets *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000419B0] System_Threading_NativeOverlapped__System_Private_CoreLib___ptrSystem_Threading__NativeOverlapped__System_Private_CoreLib *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSASend")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSASend(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.WSABuffer__System_Net_Sockets* buffers, 
					int bufferCount, 
					out int bytesTransferred, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					global::System.IntPtr completionRoutine)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (int* pinned_bytesTransferred = &(bytesTransferred))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSASend(
									socketHandle, 
									((global::System_Net_Sockets.WSABuffer__System_Net_Sockets*)buffers), 
									bufferCount, 
									pinned_bytesTransferred, 
									socketFlags, 
									((global::System_Threading.NativeOverlapped__System_Private_CoreLib*)overlapped), 
									completionRoutine
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, WSAStartup, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] short__short, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] __Interop_Winsock_WSAData__System_Net_NameResolution____Interop_Winsock_WSAData__System_Net_NameResolution, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSAStartup")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAStartup(
					short wVersionRequested, 
					out global::_.Interop_Winsock_WSAData__System_Net_NameResolution lpWSAData)
		{
			// Setup
			global::_.Interop_Winsock_WSAData__System_Net_NameResolution__Impl.UnsafeType unsafe_lpWSAData = default(global::_.Interop_Winsock_WSAData__System_Net_NameResolution__Impl.UnsafeType);
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			unsafe_lpWSAData = default(global::_.Interop_Winsock_WSAData__System_Net_NameResolution__Impl.UnsafeType);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSAStartup(
								wVersionRequested, 
								&(unsafe_lpWSAData)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::_.Interop_Winsock_WSAData__System_Net_NameResolution__Impl.Marshal__UnsafeToSafe(
								ref unsafe_lpWSAData, 
								out lpWSAData
							);
			// Return
			return unsafe___value;
		}

		// Signature, gethostname, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "gethostname")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives gethostname(
					global::System.Text.StringBuilder hostName, 
					int bufferLength)
		{
			// Setup
			byte* unsafe_hostName = default(byte*);
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			try
			{
				// Marshalling
				if (hostName == null)
					unsafe_hostName = null;
				else
				{
					unsafe_hostName = (byte*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(hostName.Capacity * global::System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize 
										+ 2)));
					if (unsafe_hostName == null)
						throw new global::System.OutOfMemoryException();
				}
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.gethostname(
									unsafe_hostName, 
									bufferLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (hostName != null)
					global::System.Runtime.InteropServices.McgMarshal.AnsiStringToStringBuilder(
										unsafe_hostName, 
										hostName
									);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_hostName != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_hostName);
			}
		}

		// Signature, closesocket, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "closesocket")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives closesocket(global::System.IntPtr socketHandle)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.closesocket(socketHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, ioctlsocket__0, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "ioctlsocket")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives ioctlsocket__0(
					global::System.IntPtr handle, 
					int cmd, 
					ref int argp)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (int* pinned_argp = &(argp))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.ioctlsocket__0(
									handle, 
									cmd, 
									pinned_argp
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, setsockopt__0, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Winsock_Linger__System_Net_Sockets____Interop_Winsock_Linger__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "setsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__0(
					global::System.IntPtr handle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					ref global::_.Interop_Winsock_Linger__System_Net_Sockets linger, 
					int optionLength)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (global::_.Interop_Winsock_Linger__System_Net_Sockets* pinned_linger = &(linger))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.setsockopt__0(
									handle, 
									optionLevel, 
									optionName, 
									pinned_linger, 
									optionLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, GetAddrInfoExW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] System_Net_Sockets_AddressInfoEx__System_Net_NameResolution__System_Net_Sockets__AddressInfoEx__System_Net_NameResolution, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_Net_Sockets_AddressInfoEx__System_Net_NameResolution___ptrSystem_Net_Sockets__AddressInfoEx__System_Net_NameResolution *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] System_Threading_NativeOverlapped__System_Private_CoreLib__System_Threading__NativeOverlapped__System_Private_CoreLib, [fwd] [in] [EETypeRva:0x00041EA8] Interop_Winsock_LPLOOKUPSERVICE_COMPLETION_ROUTINE__System_Net_NameResolution____Interop_Winsock_LPLOOKUPSERVICE_COMPLETION_ROUTINE__System_Net_NameResolution, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "GetAddrInfoExW")]
		public static int GetAddrInfoExW(
					string pName, 
					string pServiceName, 
					int dwNamespace, 
					global::System.IntPtr lpNspId, 
					ref global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution pHints, 
					out global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution* ppResult, 
					global::System.IntPtr timeout, 
					ref global::System_Threading.NativeOverlapped__System_Private_CoreLib lpOverlapped, 
					global::Interop_Winsock_LPLOOKUPSERVICE_COMPLETION_ROUTINE__System_Net_NameResolution lpCompletionRoutine, 
					out global::System.IntPtr lpNameHandle)
		{
			// Setup
			ushort* unsafe_pName = default(ushort*);
			ushort* unsafe_pServiceName = default(ushort*);
			void* unsafe_lpCompletionRoutine = default(void*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (char* pinned_pName = pName)
				{
					unsafe_pName = (ushort*)pinned_pName;
					fixed (char* pinned_pServiceName = pServiceName)
					{
						unsafe_pServiceName = (ushort*)pinned_pServiceName;
						fixed (global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution* pinned_pHints = &(pHints))
							fixed (global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution** pinned_ppResult = &(ppResult))
								fixed (global::System_Threading.NativeOverlapped__System_Private_CoreLib* pinned_lpOverlapped = &(lpOverlapped))
								{
									unsafe_lpCompletionRoutine = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
														global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Interop+Winsock+LPLOOKUPSERVICE_COMPLETION_ROUTINE,System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, " +
																"PublicKeyToken=b03f5f7f11d50a3a"), 
														lpCompletionRoutine
													);
									fixed (global::System.IntPtr* pinned_lpNameHandle = &(lpNameHandle))
									{
										global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
										// Call to native method
										unsafe___value = global::__Interop.ws2_32_dll_PInvokes.GetAddrInfoExW(
															unsafe_pName, 
															unsafe_pServiceName, 
															dwNamespace, 
															lpNspId, 
															pinned_pHints, 
															pinned_ppResult, 
															timeout, 
															pinned_lpOverlapped, 
															unsafe_lpCompletionRoutine, 
															pinned_lpNameHandle
														);
										global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
										global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
									}
								}
					}
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(lpCompletionRoutine);
			}
		}

		// Signature, WSAConnect, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSAConnect")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAConnect(
					global::System.IntPtr socketHandle, 
					byte[] socketAddress, 
					int socketAddressSize, 
					global::System.IntPtr inBuffer, 
					global::System.IntPtr outBuffer, 
					global::System.IntPtr sQOS, 
					global::System.IntPtr gQOS)
		{
			// Setup
			byte* unsafe_socketAddress;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (byte* pinned_socketAddress = ((socketAddress != null 
						&& socketAddress.Length == 0) ? new byte[1] : socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSAConnect(
									socketHandle, 
									unsafe_socketAddress, 
									socketAddressSize, 
									inBuffer, 
									outBuffer, 
									sQOS, 
									gQOS
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, setsockopt__1, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "setsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__1(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					byte[] optionValue, 
					int optionLength)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_optionValue;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_optionValue = ((optionValue != null 
						&& optionValue.Length == 0) ? new byte[1] : optionValue))
			{
				unsafe_optionValue = (byte*)pinned_optionValue;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.setsockopt__1(
									socketHandle.DangerousGetHandle(), 
									optionLevel, 
									optionName, 
									unsafe_optionValue, 
									optionLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, setsockopt__2, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "setsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__2(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					ref global::System.IntPtr pointer, 
					int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_pointer = &(pointer))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.setsockopt__2(
									socketHandle.DangerousGetHandle(), 
									optionLevel, 
									optionName, 
									pinned_pointer, 
									optionLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, WSASocketW__0, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_AddressFamily__System_Net_Primitives__AddressFamily__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketType__System_Net_Sockets__SocketType__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSASocketW")]
		public static global::System.IntPtr WSASocketW__0(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Sockets.SocketType__System_Net_Sockets socketType, 
					int protocolType, 
					global::System.IntPtr protocolInfo, 
					int group, 
					int flags)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSASocketW__0(
								addressFamily, 
								socketType, 
								protocolType, 
								protocolInfo, 
								group, 
								flags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, FreeAddrInfoExW, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_Net_Sockets_AddressInfoEx__System_Net_NameResolution___ptrSystem_Net_Sockets__AddressInfoEx__System_Net_NameResolution *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "FreeAddrInfoExW")]
		public static void FreeAddrInfoExW(global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution* pAddrInfo)
		{
			// Marshalling
			// Call to native method
			global::__Interop.ws2_32_dll_PInvokes.FreeAddrInfoExW(((global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution*)pAddrInfo));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, WSASendTo, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_Net_Sockets_WSABuffer__System_Net_Sockets___ptrSystem_Net_Sockets__WSABuffer__System_Net_Sockets *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_Threading_NativeOverlapped__System_Private_CoreLib___ptrSystem_Threading__NativeOverlapped__System_Private_CoreLib *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSASendTo")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSASendTo(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.WSABuffer__System_Net_Sockets* buffers, 
					int bufferCount, 
					out int bytesTransferred, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags, 
					global::System.IntPtr socketAddress, 
					int socketAddressSize, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					global::System.IntPtr completionRoutine)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (int* pinned_bytesTransferred = &(bytesTransferred))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSASendTo(
									socketHandle, 
									((global::System_Net_Sockets.WSABuffer__System_Net_Sockets*)buffers), 
									bufferCount, 
									pinned_bytesTransferred, 
									socketFlags, 
									socketAddress, 
									socketAddressSize, 
									((global::System_Threading.NativeOverlapped__System_Private_CoreLib*)overlapped), 
									completionRoutine
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, WSAIoctl, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_Guid__System.Guid, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSAIoctl")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAIoctl(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					int ioControlCode, 
					ref global::System.Guid guid, 
					int guidSize, 
					out global::System.IntPtr funcPtr, 
					int funcPtrSize, 
					out int bytesTransferred, 
					global::System.IntPtr shouldBeNull, 
					global::System.IntPtr shouldBeNull2)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.Guid* pinned_guid = &(guid))
				fixed (global::System.IntPtr* pinned_funcPtr = &(funcPtr))
					fixed (int* pinned_bytesTransferred = &(bytesTransferred))
					{
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSAIoctl(
											socketHandle.DangerousGetHandle(), 
											ioControlCode, 
											pinned_guid, 
											guidSize, 
											pinned_funcPtr, 
											funcPtrSize, 
											pinned_bytesTransferred, 
											shouldBeNull, 
											shouldBeNull2
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, WSASocketW__1, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_AddressFamily__System_Net_Primitives__AddressFamily__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Internals_SocketType__System_Net_NameResolution__SocketType__System_Net_NameResolution, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSASocketW")]
		public static global::System.IntPtr WSASocketW__1(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Internals.SocketType__System_Net_NameResolution socketType, 
					int protocolType, 
					global::System.IntPtr protocolInfo, 
					int group, 
					int flags)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSASocketW__1(
								addressFamily, 
								socketType, 
								protocolType, 
								protocolInfo, 
								group, 
								flags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, closesocket__0, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "closesocket")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives closesocket__0(global::System.IntPtr socketHandle)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.closesocket__0(socketHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, GetNameInfoW, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "GetNameInfoW")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives GetNameInfoW(
					byte[] sa, 
					int salen, 
					global::System.Text.StringBuilder host, 
					int hostlen, 
					global::System.Text.StringBuilder serv, 
					int servlen, 
					int flags)
		{
			// Setup
			byte* unsafe_sa;
			ushort* unsafe_host = default(ushort*);
			ushort* unsafe_serv = default(ushort*);
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_sa = ((sa != null 
							&& sa.Length == 0) ? new byte[1] : sa))
				{
					unsafe_sa = (byte*)pinned_sa;
					if (host == null)
						unsafe_host = null;
					else
					{
						unsafe_host = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(host.Capacity * 2 
											+ 2)));
						if (unsafe_host == null)
							throw new global::System.OutOfMemoryException();
					}
					if (serv == null)
						unsafe_serv = null;
					else
					{
						unsafe_serv = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(serv.Capacity * 2 
											+ 2)));
						if (unsafe_serv == null)
							throw new global::System.OutOfMemoryException();
					}
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.GetNameInfoW(
										unsafe_sa, 
										salen, 
										unsafe_host, 
										hostlen, 
										unsafe_serv, 
										servlen, 
										flags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					if (serv != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_serv, 
											serv
										);
					if (host != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_host, 
											host
										);
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_host != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_host);
				if (unsafe_serv != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_serv);
			}
		}

		// Signature, GetAddrInfoW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] System_Net_Sockets_AddressInfo__System_Net_NameResolution__System_Net_Sockets__AddressInfo__System_Net_NameResolution, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] System_Net_Sockets_SafeFreeAddrInfo__System_Net_NameResolution____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "GetAddrInfoW")]
		public static int GetAddrInfoW(
					string nodename, 
					string servicename, 
					ref global::System_Net_Sockets.AddressInfo__System_Net_NameResolution hints, 
					out global::System.Net.Sockets.SafeFreeAddrInfo__System_Net_NameResolution handle)
		{
			// Setup
			ushort* unsafe_nodename = default(ushort*);
			ushort* unsafe_servicename = default(ushort*);
			global::System.IntPtr unsafe_handle;
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_nodename = nodename)
			{
				unsafe_nodename = (ushort*)pinned_nodename;
				fixed (char* pinned_servicename = servicename)
				{
					unsafe_servicename = (ushort*)pinned_servicename;
					fixed (global::System_Net_Sockets.AddressInfo__System_Net_NameResolution* pinned_hints = &(hints))
					{
						handle = new global::System.Net.Sockets.SafeFreeAddrInfo__System_Net_NameResolution();
						unsafe_handle = handle.DangerousGetHandle();
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.ws2_32_dll_PInvokes.GetAddrInfoW(
											unsafe_nodename, 
											unsafe_servicename, 
											pinned_hints, 
											&(unsafe_handle)
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
						global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
											handle, 
											unsafe_handle
										);
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, freeaddrinfo, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "freeaddrinfo")]
		public static void freeaddrinfo(global::System.IntPtr info)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.ws2_32_dll_PInvokes.freeaddrinfo(info);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'crypt32.dll'
	/// </summary>
	public unsafe static partial class crypt32_dll
	{
		// Signature, CertDuplicateCertificateContext, [fwd] [return] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertDuplicateCertificateContext")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates CertDuplicateCertificateContext(global::System.IntPtr pCertContext)
		{
			// Setup
			global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertDuplicateCertificateContext(pCertContext);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, CertGetCertificateContextProperty, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertContextPropId__System_Security_Cryptography_X509Certificates__CertContextPropId__System_Security_Cryptography_X509Certificates, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetCertificateContextProperty")]
		public static bool CertGetCertificateContextProperty(
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertContextPropId__System_Security_Cryptography_X509Certificates dwPropId, 
					out global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates pvData, 
					ref int pcbData)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			pCertContext.DangerousAddRef(ref addRefed);
			fixed (global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pinned_pvData = &(pvData))
				fixed (int* pinned_pcbData = &(pcbData))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetCertificateContextProperty(
										pCertContext.DangerousGetHandle(), 
										dwPropId, 
										pinned_pvData, 
										pinned_pcbData
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				pCertContext.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertGetCertificateContextProperty__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertContextPropId__System_Security_Cryptography_X509Certificates__CertContextPropId__System_Security_Cryptography_X509Certificates, [fwd] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetCertificateContextProperty")]
		public static bool CertGetCertificateContextProperty__0(
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertContextPropId__System_Security_Cryptography_X509Certificates dwPropId, 
					byte[] pvData, 
					ref int pcbData)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_pvData;
			int unsafe___value;
			// Marshalling
			pCertContext.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_pvData = ((pvData != null 
						&& pvData.Length == 0) ? new byte[1] : pvData))
			{
				unsafe_pvData = (byte*)pinned_pvData;
				fixed (int* pinned_pcbData = &(pcbData))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetCertificateContextProperty__0(
										pCertContext.DangerousGetHandle(), 
										dwPropId, 
										unsafe_pvData, 
										pinned_pcbData
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			if (addRefed)
				pCertContext.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptQueryObject, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertQueryObjectType__System_Security_Cryptography_X509Certificates__CertQueryObjectType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_ExpectedContentTypeFlags__System_Security_Cryptography_X509Certificates__ExpectedContentTypeFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_ExpectedFormatTypeFlags__System_Security_Cryptography_X509Certificates__ExpectedFormatTypeFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_ContentType__System_Security_Cryptography_X509Certificates__ContentType__System_Security_Cryptography_X509Certificates, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_FormatType__System_Security_Cryptography_X509Certificates__FormatType__System_Security_Cryptography_X509Certificates, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptQueryObject")]
		public static bool CryptQueryObject(
					global::Internal_Cryptography_Pal_Native.CertQueryObjectType__System_Security_Cryptography_X509Certificates dwObjectType, 
					void* pvObject, 
					global::Internal_Cryptography_Pal_Native.ExpectedContentTypeFlags__System_Security_Cryptography_X509Certificates dwExpectedContentTypeFlags, 
					global::Internal_Cryptography_Pal_Native.ExpectedFormatTypeFlags__System_Security_Cryptography_X509Certificates dwExpectedFormatTypeFlags, 
					int dwFlags, 
					out global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates pdwMsgAndCertEncodingType, 
					out global::Internal_Cryptography_Pal_Native.ContentType__System_Security_Cryptography_X509Certificates pdwContentType, 
					out global::Internal_Cryptography_Pal_Native.FormatType__System_Security_Cryptography_X509Certificates pdwFormatType, 
					out global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates phCertStore, 
					out global::Internal.Cryptography.Pal.Native.SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates phMsg, 
					out global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates ppvContext)
		{
			// Setup
			global::System.IntPtr unsafe_phCertStore;
			global::System.IntPtr unsafe_phMsg;
			global::System.IntPtr unsafe_ppvContext;
			int unsafe___value;
			// Marshalling
			fixed (global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates* pinned_pdwMsgAndCertEncodingType = &(pdwMsgAndCertEncodingType))
				fixed (global::Internal_Cryptography_Pal_Native.ContentType__System_Security_Cryptography_X509Certificates* pinned_pdwContentType = &(pdwContentType))
					fixed (global::Internal_Cryptography_Pal_Native.FormatType__System_Security_Cryptography_X509Certificates* pinned_pdwFormatType = &(pdwFormatType))
					{
						phCertStore = new global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates();
						unsafe_phCertStore = phCertStore.DangerousGetHandle();
						phMsg = new global::Internal.Cryptography.Pal.Native.SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates();
						unsafe_phMsg = phMsg.DangerousGetHandle();
						ppvContext = new global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates();
						unsafe_ppvContext = ppvContext.DangerousGetHandle();
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptQueryObject(
											dwObjectType, 
											((void*)pvObject), 
											dwExpectedContentTypeFlags, 
											dwExpectedFormatTypeFlags, 
											dwFlags, 
											pinned_pdwMsgAndCertEncodingType, 
											pinned_pdwContentType, 
											pinned_pdwFormatType, 
											&(unsafe_phCertStore), 
											&(unsafe_phMsg), 
											&(unsafe_ppvContext)
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
						global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
											ppvContext, 
											unsafe_ppvContext
										);
						global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
											phMsg, 
											unsafe_phMsg
										);
						global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
											phCertStore, 
											unsafe_phCertStore
										);
					}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertDuplicateCertificateContextWithKeyContainerDeletion, [fwd] [return] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandleWithKeyContainerDeletion__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertDuplicateCertificateContextWithKeyContainerDeletion")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertContextHandleWithKeyContainerDeletion__System_Security_Cryptography_X509Certificates CertDuplicateCertificateContextWithKeyContainerDeletion(global::System.IntPtr pCertContext)
		{
			// Setup
			global::Internal.Cryptography.Pal.Native.SafeCertContextHandleWithKeyContainerDeletion__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Internal.Cryptography.Pal.Native.SafeCertContextHandleWithKeyContainerDeletion__System_Security_Cryptography_X509Certificates();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertDuplicateCertificateContextWithKeyContainerDeletion(pCertContext);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, CertFreeCertificateContext, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertFreeCertificateContext")]
		public static bool CertFreeCertificateContext(global::System.IntPtr pCertContext)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertFreeCertificateContext(pCertContext);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptMsgGetParam, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CryptMessageParameterType__System_Security_Cryptography_X509Certificates__CryptMessageParameterType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptMsgGetParam")]
		public static bool CryptMsgGetParam(
					global::Internal.Cryptography.Pal.Native.SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates hCryptMsg, 
					global::Internal_Cryptography_Pal_Native.CryptMessageParameterType__System_Security_Cryptography_X509Certificates dwParamType, 
					int dwIndex, 
					out int pvData, 
					ref int pcbData)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hCryptMsg.DangerousAddRef(ref addRefed);
			fixed (int* pinned_pvData = &(pvData))
				fixed (int* pinned_pcbData = &(pcbData))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptMsgGetParam(
										hCryptMsg.DangerousGetHandle(), 
										dwParamType, 
										dwIndex, 
										pinned_pvData, 
										pinned_pcbData
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				hCryptMsg.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptMsgGetParam__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CryptMessageParameterType__System_Security_Cryptography_X509Certificates__CryptMessageParameterType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptMsgGetParam")]
		public static bool CryptMsgGetParam__0(
					global::Internal.Cryptography.Pal.Native.SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates hCryptMsg, 
					global::Internal_Cryptography_Pal_Native.CryptMessageParameterType__System_Security_Cryptography_X509Certificates dwParamType, 
					int dwIndex, 
					byte* pvData, 
					ref int pcbData)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hCryptMsg.DangerousAddRef(ref addRefed);
			fixed (int* pinned_pcbData = &(pcbData))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptMsgGetParam__0(
									hCryptMsg.DangerousGetHandle(), 
									dwParamType, 
									dwIndex, 
									((byte*)pvData), 
									pinned_pcbData
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				hCryptMsg.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, PFXImportCertStore, [fwd] [return] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafePasswordHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_PfxCertStoreFlags__System_Security_Cryptography_X509Certificates__PfxCertStoreFlags__System_Security_Cryptography_X509Certificates, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "PFXImportCertStore")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates PFXImportCertStore(
					ref global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates pPFX, 
					global::Microsoft.Win32.SafeHandles.SafePasswordHandle__System_Security_Cryptography_X509Certificates password, 
					global::Internal_Cryptography_Pal_Native.PfxCertStoreFlags__System_Security_Cryptography_X509Certificates dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pinned_pPFX = &(pPFX))
			{
				password.DangerousAddRef(ref addRefed);
				__value = new global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.PFXImportCertStore(
									pinned_pPFX, 
									password.DangerousGetHandle(), 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									__value, 
									unsafe___value
								);
				if (addRefed)
					password.DangerousRelease();
			}
			// Return
			return __value;
		}

		// Signature, CryptFindOIDInfo, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Encoding__Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Encoding, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Cryptography_OidGroup__System_Security_Cryptography_Encoding__OidGroup__System_Security_Cryptography_Encoding, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Encoding, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Crypt32", "CryptFindOIDInfo")]
		public static global::System.IntPtr CryptFindOIDInfo(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Encoding dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptFindOIDInfo(
								dwKeyType, 
								pvKey, 
								group
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, CertGetNameString, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameType__System_Security_Cryptography_X509Certificates__CertNameType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameFlags__System_Security_Cryptography_X509Certificates__CertNameFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameStringType__System_Security_Cryptography_X509Certificates__CertNameStringType__System_Security_Cryptography_X509Certificates, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetNameString")]
		public static int CertGetNameString(
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertNameType__System_Security_Cryptography_X509Certificates dwType, 
					global::Internal_Cryptography_Pal_Native.CertNameFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					ref global::Internal_Cryptography_Pal_Native.CertNameStringType__System_Security_Cryptography_X509Certificates pvTypePara, 
					global::System.Text.StringBuilder pszNameString, 
					int cchNameString)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszNameString = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				pCertContext.DangerousAddRef(ref addRefed);
				fixed (global::Internal_Cryptography_Pal_Native.CertNameStringType__System_Security_Cryptography_X509Certificates* pinned_pvTypePara = &(pvTypePara))
				{
					if (pszNameString == null)
						unsafe_pszNameString = null;
					else
					{
						unsafe_pszNameString = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(pszNameString.Capacity * 2 
											+ 2)));
						if (unsafe_pszNameString == null)
							throw new global::System.OutOfMemoryException();
					}
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetNameString(
										pCertContext.DangerousGetHandle(), 
										dwType, 
										dwFlags, 
										pinned_pvTypePara, 
										unsafe_pszNameString, 
										cchNameString
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					if (pszNameString != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_pszNameString, 
											pszNameString
										);
				}
				if (addRefed)
					pCertContext.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_pszNameString != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_pszNameString);
			}
		}

		// Signature, CertCloseStore, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertCloseStore")]
		public static bool CertCloseStore(
					global::System.IntPtr hCertStore, 
					int dwFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertCloseStore(
								hCertStore, 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptMsgClose, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptMsgClose")]
		public static bool CryptMsgClose(global::System.IntPtr hCryptMsg)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptMsgClose(hCryptMsg);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertFindCertificateInStore, [fwd] [return] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertFindFlags__System_Security_Cryptography_X509Certificates__CertFindFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertFindType__System_Security_Cryptography_X509Certificates__CertFindType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_CONTEXT__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_CONTEXT__System_Security_Cryptography_X509Certificates *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertFindCertificateInStore")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates CertFindCertificateInStore(
					global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates hCertStore, 
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CertFindFlags__System_Security_Cryptography_X509Certificates dwFindFlags, 
					global::Internal_Cryptography_Pal_Native.CertFindType__System_Security_Cryptography_X509Certificates dwFindType, 
					void* pvFindPara, 
					global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates* pPrevCertContext)
		{
			// Setup
			bool addRefed = false;
			global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			hCertStore.DangerousAddRef(ref addRefed);
			__value = new global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertFindCertificateInStore(
								hCertStore.DangerousGetHandle(), 
								dwCertEncodingType, 
								dwFindFlags, 
								dwFindType, 
								((void*)pvFindPara), 
								((global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates*)pPrevCertContext)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			if (addRefed)
				hCertStore.DangerousRelease();
			// Return
			return __value;
		}

		// Signature, CertEnumCertificatesInStore, [fwd] [return] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_CONTEXT__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_CONTEXT__System_Security_Cryptography_X509Certificates *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertEnumCertificatesInStore")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates CertEnumCertificatesInStore(
					global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates hCertStore, 
					global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates* pPrevCertContext)
		{
			// Setup
			bool addRefed = false;
			global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			hCertStore.DangerousAddRef(ref addRefed);
			__value = new global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertEnumCertificatesInStore(
								hCertStore.DangerousGetHandle(), 
								((global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates*)pPrevCertContext)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			if (addRefed)
				hCertStore.DangerousRelease();
			// Return
			return __value;
		}

		// Signature, CertGetNameString__0, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameType__System_Security_Cryptography_X509Certificates__CertNameType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameFlags__System_Security_Cryptography_X509Certificates__CertNameFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates__CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetNameString")]
		public static int CertGetNameString__0(
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertNameType__System_Security_Cryptography_X509Certificates dwType, 
					global::Internal_Cryptography_Pal_Native.CertNameFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					ref global::Internal_Cryptography_Pal_Native.CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates pvPara, 
					global::System.Text.StringBuilder pszNameString, 
					int cchNameString)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszNameString = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				pCertContext.DangerousAddRef(ref addRefed);
				fixed (global::Internal_Cryptography_Pal_Native.CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates* pinned_pvPara = &(pvPara))
				{
					if (pszNameString == null)
						unsafe_pszNameString = null;
					else
					{
						unsafe_pszNameString = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(pszNameString.Capacity * 2 
											+ 2)));
						if (unsafe_pszNameString == null)
							throw new global::System.OutOfMemoryException();
					}
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetNameString__0(
										pCertContext.DangerousGetHandle(), 
										dwType, 
										dwFlags, 
										pinned_pvPara, 
										unsafe_pszNameString, 
										cchNameString
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					if (pszNameString != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_pszNameString, 
											pszNameString
										);
				}
				if (addRefed)
					pCertContext.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_pszNameString != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_pszNameString);
			}
		}

		// Signature, CertVerifyCertificateChainPolicy, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeX509ChainHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Crypt32_CERT_CHAIN_POLICY_PARA__System_Net_Security____Interop_Crypt32_CERT_CHAIN_POLICY_PARA__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Crypt32_CERT_CHAIN_POLICY_STATUS__System_Net_Security____Interop_Crypt32_CERT_CHAIN_POLICY_STATUS__System_Net_Security, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Crypt32", "CertVerifyCertificateChainPolicy")]
		public static bool CertVerifyCertificateChainPolicy(
					global::System.IntPtr pszPolicyOID, 
					global::Microsoft.Win32.SafeHandles.SafeX509ChainHandle__System_Security_Cryptography_X509Certificates pChainContext, 
					ref global::_.Interop_Crypt32_CERT_CHAIN_POLICY_PARA__System_Net_Security pPolicyPara, 
					ref global::_.Interop_Crypt32_CERT_CHAIN_POLICY_STATUS__System_Net_Security pPolicyStatus)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			pChainContext.DangerousAddRef(ref addRefed);
			fixed (global::_.Interop_Crypt32_CERT_CHAIN_POLICY_PARA__System_Net_Security* pinned_pPolicyPara = &(pPolicyPara))
				fixed (global::_.Interop_Crypt32_CERT_CHAIN_POLICY_STATUS__System_Net_Security* pinned_pPolicyStatus = &(pPolicyStatus))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertVerifyCertificateChainPolicy(
										pszPolicyOID, 
										pChainContext.DangerousGetHandle(), 
										pinned_pPolicyPara, 
										pinned_pPolicyStatus
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				pChainContext.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptFindOIDInfo__0, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_X509Certificates__Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Cryptography_OidGroup__System_Security_Cryptography_Encoding__OidGroup__System_Security_Cryptography_Encoding, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+Crypt32", "CryptFindOIDInfo")]
		public static global::System.IntPtr CryptFindOIDInfo__0(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_X509Certificates dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptFindOIDInfo__0(
								dwKeyType, 
								pvKey, 
								group
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, CertControlStore, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertControlStoreFlags__System_Security_Cryptography_X509Certificates__CertControlStoreFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertControlStoreType__System_Security_Cryptography_X509Certificates__CertControlStoreType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertControlStore")]
		public static bool CertControlStore(
					global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates hCertStore, 
					global::Internal_Cryptography_Pal_Native.CertControlStoreFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::Internal_Cryptography_Pal_Native.CertControlStoreType__System_Security_Cryptography_X509Certificates dwControlType, 
					global::System.IntPtr pvCtrlPara)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hCertStore.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertControlStore(
								hCertStore.DangerousGetHandle(), 
								dwFlags, 
								dwControlType, 
								pvCtrlPara
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				hCertStore.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertGetCertificateChain, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_FILETIME__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__FILETIME__System_Security_Cryptography_X509Certificates *, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_CERT_CHAIN_PARA__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CERT_CHAIN_PARA__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertChainFlags__System_Security_Cryptography_X509Certificates__CertChainFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeX509ChainHandle__System_Security_Cryptography_X509Certificates____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetCertificateChain")]
		public static bool CertGetCertificateChain(
					global::System.IntPtr hChainEngine, 
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates* pTime, 
					global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates hStore, 
					ref global::Internal_Cryptography_Pal_Native.CERT_CHAIN_PARA__System_Security_Cryptography_X509Certificates pChainPara, 
					global::Internal_Cryptography_Pal_Native.CertChainFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::System.IntPtr pvReserved, 
					out global::Microsoft.Win32.SafeHandles.SafeX509ChainHandle__System_Security_Cryptography_X509Certificates ppChainContext)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_ppChainContext;
			int unsafe___value;
			// Marshalling
			pCertContext.DangerousAddRef(ref addRefed);
			hStore.DangerousAddRef(ref addRefed_1);
			fixed (global::Internal_Cryptography_Pal_Native.CERT_CHAIN_PARA__System_Security_Cryptography_X509Certificates* pinned_pChainPara = &(pChainPara))
			{
				ppChainContext = new global::Microsoft.Win32.SafeHandles.SafeX509ChainHandle__System_Security_Cryptography_X509Certificates();
				unsafe_ppChainContext = ppChainContext.DangerousGetHandle();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetCertificateChain(
									hChainEngine, 
									pCertContext.DangerousGetHandle(), 
									((global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates*)pTime), 
									hStore.DangerousGetHandle(), 
									pinned_pChainPara, 
									dwFlags, 
									pvReserved, 
									&(unsafe_ppChainContext)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									ppChainContext, 
									unsafe_ppChainContext
								);
			}
			if (addRefed_1)
				hStore.DangerousRelease();
			if (addRefed)
				pCertContext.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertEnumCertificatesInStore__0, [fwd] [return] [EETypeRva:0x000419B0] __Interop_Crypt32_CERT_CONTEXT__System_Net_Security___ptr__Interop_Crypt32_CERT_CONTEXT__System_Net_Security *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] __Interop_Crypt32_CERT_CONTEXT__System_Net_Security___ptr__Interop_Crypt32_CERT_CONTEXT__System_Net_Security *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Crypt32", "CertEnumCertificatesInStore")]
		public static global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security* CertEnumCertificatesInStore__0(
					global::System.IntPtr hCertStore, 
					global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security* pPrevCertContext)
		{
			// Setup
			global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security* unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = (global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security*)global::__Interop.crypt32_dll_PInvokes.CertEnumCertificatesInStore__0(
								hCertStore, 
								((global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security*)pPrevCertContext)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return (global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security*)unsafe___value;
		}

		// Signature, CertVerifyCertificateChainPolicy__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeX509ChainHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_CERT_CHAIN_POLICY_PARA__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CERT_CHAIN_POLICY_PARA__System_Security_Cryptography_X509Certificates, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_CERT_CHAIN_POLICY_STATUS__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CERT_CHAIN_POLICY_STATUS__System_Security_Cryptography_X509Certificates, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertVerifyCertificateChainPolicy")]
		public static bool CertVerifyCertificateChainPolicy__0(
					global::System.IntPtr pszPolicyOID, 
					global::Microsoft.Win32.SafeHandles.SafeX509ChainHandle__System_Security_Cryptography_X509Certificates pChainContext, 
					ref global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_PARA__System_Security_Cryptography_X509Certificates pPolicyPara, 
					ref global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_STATUS__System_Security_Cryptography_X509Certificates pPolicyStatus)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			pChainContext.DangerousAddRef(ref addRefed);
			fixed (global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_PARA__System_Security_Cryptography_X509Certificates* pinned_pPolicyPara = &(pPolicyPara))
				fixed (global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_STATUS__System_Security_Cryptography_X509Certificates* pinned_pPolicyStatus = &(pPolicyStatus))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertVerifyCertificateChainPolicy__0(
										pszPolicyOID, 
										pChainContext.DangerousGetHandle(), 
										pinned_pPolicyPara, 
										pinned_pPolicyStatus
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				pChainContext.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertNameToStr, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates__CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertNameToStr")]
		public static int CertNameToStr(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					ref global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates pName, 
					global::Internal_Cryptography_Pal_Native.CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates dwStrType, 
					global::System.Text.StringBuilder psz, 
					int csz)
		{
			// Setup
			ushort* unsafe_psz = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pinned_pName = &(pName))
				{
					if (psz == null)
						unsafe_psz = null;
					else
					{
						unsafe_psz = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(psz.Capacity * 2 
											+ 2)));
						if (unsafe_psz == null)
							throw new global::System.OutOfMemoryException();
					}
					if (unsafe_psz != null)
						global::System.Runtime.InteropServices.McgMarshal.StringBuilderToUnicodeString(
											psz, 
											unsafe_psz
										);
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertNameToStr(
										dwCertEncodingType, 
										pinned_pName, 
										dwStrType, 
										unsafe_psz, 
										csz
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					if (psz != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_psz, 
											psz
										);
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_psz != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_psz);
			}
		}

		// Signature, CertFreeCertificateContext__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Crypt32", "CertFreeCertificateContext")]
		public static bool CertFreeCertificateContext__0(global::System.IntPtr pCertContext)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertFreeCertificateContext__0(pCertContext);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptFormatObject, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Encoding, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.Cng+Interop", "CryptFormatObject")]
		public static bool CryptFormatObject(
					int dwCertEncodingType, 
					int dwFormatType, 
					int dwFormatStrType, 
					global::System.IntPtr pFormatStruct, 
					string lpszStructType, 
					byte[] pbEncoded, 
					int cbEncoded, 
					global::System.Text.StringBuilder pbFormat, 
					ref int pcbFormat)
		{
			// Setup
			byte* unsafe_lpszStructType = default(byte*);
			byte* unsafe_pbEncoded;
			ushort* unsafe_pbFormat = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_lpszStructType = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(lpszStructType, false, false);
				fixed (byte* pinned_pbEncoded = ((pbEncoded != null 
							&& pbEncoded.Length == 0) ? new byte[1] : pbEncoded))
				{
					unsafe_pbEncoded = (byte*)pinned_pbEncoded;
					if (pbFormat == null)
						unsafe_pbFormat = null;
					else
					{
						unsafe_pbFormat = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(pbFormat.Capacity * 2 
											+ 2)));
						if (unsafe_pbFormat == null)
							throw new global::System.OutOfMemoryException();
					}
					fixed (int* pinned_pcbFormat = &(pcbFormat))
					{
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptFormatObject(
											dwCertEncodingType, 
											dwFormatType, 
											dwFormatStrType, 
											pFormatStruct, 
											unsafe_lpszStructType, 
											unsafe_pbEncoded, 
											cbEncoded, 
											unsafe_pbFormat, 
											pinned_pcbFormat
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
					if (pbFormat != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_pbFormat, 
											pbFormat
										);
				}
				// Return
				return unsafe___value != 0;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_lpszStructType);
				if (unsafe_pbFormat != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_pbFormat);
			}
		}

		// Signature, CertOpenStore, [fwd] [return] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertStoreFlags__System_Security_Cryptography_X509Certificates__CertStoreFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertOpenStore")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates CertOpenStore(
					global::System.IntPtr lpszStoreProvider, 
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwMsgAndCertEncodingType, 
					global::System.IntPtr hCryptProv, 
					global::Internal_Cryptography_Pal_Native.CertStoreFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					string pvPara)
		{
			// Setup
			ushort* unsafe_pvPara = default(ushort*);
			global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (char* pinned_pvPara = pvPara)
			{
				unsafe_pvPara = (ushort*)pinned_pvPara;
				__value = new global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertOpenStore(
									lpszStoreProvider, 
									dwMsgAndCertEncodingType, 
									hCryptProv, 
									dwFlags, 
									unsafe_pvPara
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									__value, 
									unsafe___value
								);
			}
			// Return
			return __value;
		}

		// Signature, CertAddCertificateLinkToStore, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertStoreAddDisposition__System_Security_Cryptography_X509Certificates__CertStoreAddDisposition__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertAddCertificateLinkToStore")]
		public static bool CertAddCertificateLinkToStore(
					global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates hCertStore, 
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertStoreAddDisposition__System_Security_Cryptography_X509Certificates dwAddDisposition, 
					global::System.IntPtr ppStoreContext)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			int unsafe___value;
			// Marshalling
			hCertStore.DangerousAddRef(ref addRefed);
			pCertContext.DangerousAddRef(ref addRefed_1);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertAddCertificateLinkToStore(
								hCertStore.DangerousGetHandle(), 
								pCertContext.DangerousGetHandle(), 
								dwAddDisposition, 
								ppStoreContext
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed_1)
				pCertContext.DangerousRelease();
			if (addRefed)
				hCertStore.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertFreeCertificateChain, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertFreeCertificateChain")]
		public static void CertFreeCertificateChain(global::System.IntPtr pChainContext)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.crypt32_dll_PInvokes.CertFreeCertificateChain(pChainContext);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, CryptFormatObject__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_FormatObjectType__System_Security_Cryptography_X509Certificates__FormatObjectType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_FormatObjectStringType__System_Security_Cryptography_X509Certificates__FormatObjectStringType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptFormatObject")]
		public static bool CryptFormatObject__0(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.FormatObjectType__System_Security_Cryptography_X509Certificates dwFormatType, 
					global::Internal_Cryptography_Pal_Native.FormatObjectStringType__System_Security_Cryptography_X509Certificates dwFormatStrType, 
					global::System.IntPtr pFormatStruct, 
					global::System.IntPtr lpszStructType, 
					byte[] pbEncoded, 
					int cbEncoded, 
					global::System.Text.StringBuilder pbFormat, 
					ref int pcbFormat)
		{
			// Setup
			byte* unsafe_pbEncoded;
			ushort* unsafe_pbFormat = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_pbEncoded = ((pbEncoded != null 
							&& pbEncoded.Length == 0) ? new byte[1] : pbEncoded))
				{
					unsafe_pbEncoded = (byte*)pinned_pbEncoded;
					if (pbFormat == null)
						unsafe_pbFormat = null;
					else
					{
						unsafe_pbFormat = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(pbFormat.Capacity * 2 
											+ 2)));
						if (unsafe_pbFormat == null)
							throw new global::System.OutOfMemoryException();
					}
					fixed (int* pinned_pcbFormat = &(pcbFormat))
					{
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptFormatObject__0(
											dwCertEncodingType, 
											dwFormatType, 
											dwFormatStrType, 
											pFormatStruct, 
											lpszStructType, 
											unsafe_pbEncoded, 
											cbEncoded, 
											unsafe_pbFormat, 
											pinned_pcbFormat
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
					if (pbFormat != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_pbFormat, 
											pbFormat
										);
				}
				// Return
				return unsafe___value != 0;
			}
			finally
			{
				// Cleanup
				if (unsafe_pbFormat != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_pbFormat);
			}
		}

		// Signature, CryptImportPublicKeyInfoEx2, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptKeyHandle__System_Security_Cryptography_X509Certificates____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptImportPublicKeyInfoEx2")]
		public static bool CryptImportPublicKeyInfoEx2(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates* pInfo, 
					int dwFlags, 
					void* pvAuxInfo, 
					out global::Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle__System_Security_Cryptography_X509Certificates phKey)
		{
			// Setup
			global::System.IntPtr unsafe_phKey;
			int unsafe___value;
			// Marshalling
			phKey = new global::Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle__System_Security_Cryptography_X509Certificates();
			unsafe_phKey = phKey.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptImportPublicKeyInfoEx2(
								dwCertEncodingType, 
								((global::Internal_Cryptography_Pal_Native.CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates*)pInfo), 
								dwFlags, 
								((void*)pvAuxInfo), 
								&(unsafe_phKey)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phKey, 
								unsafe_phKey
							);
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptDecodeObject, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates__CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates, [fwd] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptDecodeObject")]
		public static bool CryptDecodeObject(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::System.IntPtr lpszStructType, 
					byte[] pbEncoded, 
					int cbEncoded, 
					global::Internal_Cryptography_Pal_Native.CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					byte[] pvStructInfo, 
					ref int pcbStructInfo)
		{
			// Setup
			byte* unsafe_pbEncoded;
			byte* unsafe_pvStructInfo;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_pbEncoded = ((pbEncoded != null 
						&& pbEncoded.Length == 0) ? new byte[1] : pbEncoded))
			{
				unsafe_pbEncoded = (byte*)pinned_pbEncoded;
				fixed (byte* pinned_pvStructInfo = ((pvStructInfo != null 
							&& pvStructInfo.Length == 0) ? new byte[1] : pvStructInfo))
				{
					unsafe_pvStructInfo = (byte*)pinned_pvStructInfo;
					fixed (int* pinned_pcbStructInfo = &(pcbStructInfo))
					{
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptDecodeObject(
											dwCertEncodingType, 
											lpszStructType, 
											unsafe_pbEncoded, 
											cbEncoded, 
											dwFlags, 
											unsafe_pvStructInfo, 
											pinned_pcbStructInfo
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
				}
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertFindExtension, [fwd] [return] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_EXTENSION__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_EXTENSION__System_Security_Cryptography_X509Certificates *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_EXTENSION__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_EXTENSION__System_Security_Cryptography_X509Certificates *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertFindExtension")]
		public static global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* CertFindExtension(
					string pszObjId, 
					int cExtensions, 
					global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* rgExtensions)
		{
			// Setup
			byte* unsafe_pszObjId = default(byte*);
			global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* unsafe___value;
			try
			{
				// Marshalling
				unsafe_pszObjId = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(pszObjId, true, false);
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = (global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates*)global::__Interop.crypt32_dll_PInvokes.CertFindExtension(
									unsafe_pszObjId, 
									cExtensions, 
									((global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates*)rgExtensions)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				// Return
				return (global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates*)unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_pszObjId);
			}
		}

		// Signature, CertGetValidUsages, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [out] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetValidUsages")]
		public static bool CertGetValidUsages(
					int cCerts, 
					ref global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates rghCerts, 
					out int cNumOIDs, 
					void* rghOIDs, 
					ref int pcbOIDs)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_rghCerts;
			int unsafe___value;
			// Marshalling
			rghCerts.DangerousAddRef(ref addRefed);
			unsafe_rghCerts = rghCerts.DangerousGetHandle();
			fixed (int* pinned_cNumOIDs = &(cNumOIDs))
				fixed (int* pinned_pcbOIDs = &(pcbOIDs))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetValidUsages(
										cCerts, 
										&(unsafe_rghCerts), 
										pinned_cNumOIDs, 
										((void*)rghOIDs), 
										pinned_pcbOIDs
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				rghCerts.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertGetIntendedKeyUsage, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_INFO__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_INFO__System_Security_Cryptography_X509Certificates *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] System_Security_Cryptography_X509Certificates_X509KeyUsageFlags__System_Security_Cryptography_X509Certificates__X509KeyUsageFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetIntendedKeyUsage")]
		public static bool CertGetIntendedKeyUsage(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates* pCertInfo, 
					out global::System_Security_Cryptography_X509Certificates.X509KeyUsageFlags__System_Security_Cryptography_X509Certificates pbKeyUsage, 
					int cbKeyUsage)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System_Security_Cryptography_X509Certificates.X509KeyUsageFlags__System_Security_Cryptography_X509Certificates* pinned_pbKeyUsage = &(pbKeyUsage))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetIntendedKeyUsage(
									dwCertEncodingType, 
									((global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates*)pCertInfo), 
									pinned_pbKeyUsage, 
									cbKeyUsage
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertVerifyTimeValidity, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_FILETIME__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__FILETIME__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_INFO__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_INFO__System_Security_Cryptography_X509Certificates *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertVerifyTimeValidity")]
		public static int CertVerifyTimeValidity(
					ref global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates pTimeToVerify, 
					global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates* pCertInfo)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates* pinned_pTimeToVerify = &(pTimeToVerify))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertVerifyTimeValidity(
									pinned_pTimeToVerify, 
									((global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates*)pCertInfo)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, CryptDecodeObjectPointer, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates__CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates, [fwd] [out] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptDecodeObjectPointer")]
		public static bool CryptDecodeObjectPointer(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::System.IntPtr lpszStructType, 
					byte[] pbEncoded, 
					int cbEncoded, 
					global::Internal_Cryptography_Pal_Native.CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					void* pvStructInfo, 
					ref int pcbStructInfo)
		{
			// Setup
			byte* unsafe_pbEncoded;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_pbEncoded = ((pbEncoded != null 
						&& pbEncoded.Length == 0) ? new byte[1] : pbEncoded))
			{
				unsafe_pbEncoded = (byte*)pinned_pbEncoded;
				fixed (int* pinned_pcbStructInfo = &(pcbStructInfo))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptDecodeObjectPointer(
										dwCertEncodingType, 
										lpszStructType, 
										unsafe_pbEncoded, 
										cbEncoded, 
										dwFlags, 
										((void*)pvStructInfo), 
										pinned_pcbStructInfo
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptFindOIDInfo__1, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Cng__Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Cryptography_OidGroup__System_Security_Cryptography_Encoding__OidGroup__System_Security_Cryptography_Encoding, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Crypt32", "CryptFindOIDInfo")]
		public static global::System.IntPtr CryptFindOIDInfo__1(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Cng dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptFindOIDInfo__1(
								dwKeyType, 
								pvKey, 
								group
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'iphlpapi.dll'
	/// </summary>
	public unsafe static partial class iphlpapi_dll
	{
		// Signature, GetAdaptersAddresses, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_AddressFamily__System_Net_Primitives__AddressFamily__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Net_NetworkInformation____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NetworkInformation, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+IpHlpApi", "GetAdaptersAddresses")]
		public static uint GetAdaptersAddresses(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives family, 
					uint flags, 
					global::System.IntPtr pReserved, 
					global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_NetworkInformation adapterAddresses, 
					ref uint outBufLen)
		{
			// Setup
			bool addRefed = false;
			uint unsafe___value;
			// Marshalling
			adapterAddresses.DangerousAddRef(ref addRefed);
			fixed (uint* pinned_outBufLen = &(outBufLen))
			{
				// Call to native method
				unsafe___value = global::__Interop.iphlpapi_dll_PInvokes.GetAdaptersAddresses(
									family, 
									flags, 
									pReserved, 
									adapterAddresses.DangerousGetHandle(), 
									pinned_outBufLen
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				adapterAddresses.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, GetNetworkParams, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Net_NetworkInformation____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NetworkInformation, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+IpHlpApi", "GetNetworkParams")]
		public static uint GetNetworkParams(
					global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_NetworkInformation pFixedInfo, 
					ref uint pOutBufLen)
		{
			// Setup
			bool addRefed = false;
			uint unsafe___value;
			// Marshalling
			pFixedInfo.DangerousAddRef(ref addRefed);
			fixed (uint* pinned_pOutBufLen = &(pOutBufLen))
			{
				// Call to native method
				unsafe___value = global::__Interop.iphlpapi_dll_PInvokes.GetNetworkParams(
									pFixedInfo.DangerousGetHandle(), 
									pinned_pOutBufLen
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				pFixedInfo.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, GetPerAdapterInfo, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Net_NetworkInformation____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NetworkInformation, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+IpHlpApi", "GetPerAdapterInfo")]
		public static uint GetPerAdapterInfo(
					uint IfIndex, 
					global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_NetworkInformation pPerAdapterInfo, 
					ref uint pOutBufLen)
		{
			// Setup
			bool addRefed = false;
			uint unsafe___value;
			// Marshalling
			pPerAdapterInfo.DangerousAddRef(ref addRefed);
			fixed (uint* pinned_pOutBufLen = &(pOutBufLen))
			{
				// Call to native method
				unsafe___value = global::__Interop.iphlpapi_dll_PInvokes.GetPerAdapterInfo(
									IfIndex, 
									pPerAdapterInfo.DangerousGetHandle(), 
									pinned_pOutBufLen
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				pPerAdapterInfo.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, GetNetworkParams__0, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Net_Primitives____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+IpHlpApi", "GetNetworkParams")]
		public static uint GetNetworkParams__0(
					global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_Primitives pFixedInfo, 
					ref uint pOutBufLen)
		{
			// Setup
			bool addRefed = false;
			uint unsafe___value;
			// Marshalling
			pFixedInfo.DangerousAddRef(ref addRefed);
			fixed (uint* pinned_pOutBufLen = &(pOutBufLen))
			{
				// Call to native method
				unsafe___value = global::__Interop.iphlpapi_dll_PInvokes.GetNetworkParams__0(
									pFixedInfo.DangerousGetHandle(), 
									pinned_pOutBufLen
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				pFixedInfo.DangerousRelease();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'advapi32.dll'
	/// </summary>
	public unsafe static partial class advapi32_dll
	{
		// Signature, CreateProcessWithLogonW, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Advapi32_LogonFlags__System_Diagnostics_Process__Interop_Advapi32_LogonFlags__System_Diagnostics_Process, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_STARTUPINFO__System_Diagnostics_Process____Interop_Kernel32_STARTUPINFO__System_Diagnostics_Process, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_PROCESS_INFORMATION__System_Diagnostics_Process____Interop_Kernel32_PROCESS_INFORMATION__System_Diagnostics_Process, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "CreateProcessWithLogonW")]
		public static bool CreateProcessWithLogonW(
					string userName, 
					string domain, 
					global::System.IntPtr password, 
					global::_.Interop_Advapi32_LogonFlags__System_Diagnostics_Process logonFlags, 
					string appName, 
					global::System.Text.StringBuilder cmdLine, 
					int creationFlags, 
					global::System.IntPtr environmentBlock, 
					string lpCurrentDirectory, 
					ref global::_.Interop_Kernel32_STARTUPINFO__System_Diagnostics_Process lpStartupInfo, 
					ref global::_.Interop_Kernel32_PROCESS_INFORMATION__System_Diagnostics_Process lpProcessInformation)
		{
			// Setup
			ushort* unsafe_userName = default(ushort*);
			ushort* unsafe_domain = default(ushort*);
			ushort* unsafe_appName = default(ushort*);
			ushort* unsafe_cmdLine = default(ushort*);
			ushort* unsafe_lpCurrentDirectory = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (char* pinned_userName = userName)
				{
					unsafe_userName = (ushort*)pinned_userName;
					fixed (char* pinned_domain = domain)
					{
						unsafe_domain = (ushort*)pinned_domain;
						fixed (char* pinned_appName = appName)
						{
							unsafe_appName = (ushort*)pinned_appName;
							if (cmdLine == null)
								unsafe_cmdLine = null;
							else
							{
								unsafe_cmdLine = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(cmdLine.Capacity * 2 
													+ 2)));
								if (unsafe_cmdLine == null)
									throw new global::System.OutOfMemoryException();
							}
							if (unsafe_cmdLine != null)
								global::System.Runtime.InteropServices.McgMarshal.StringBuilderToUnicodeString(
													cmdLine, 
													unsafe_cmdLine
												);
							fixed (char* pinned_lpCurrentDirectory = lpCurrentDirectory)
							{
								unsafe_lpCurrentDirectory = (ushort*)pinned_lpCurrentDirectory;
								fixed (global::_.Interop_Kernel32_STARTUPINFO__System_Diagnostics_Process* pinned_lpStartupInfo = &(lpStartupInfo))
									fixed (global::_.Interop_Kernel32_PROCESS_INFORMATION__System_Diagnostics_Process* pinned_lpProcessInformation = &(lpProcessInformation))
									{
										global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
										// Call to native method
										unsafe___value = global::__Interop.advapi32_dll_PInvokes.CreateProcessWithLogonW(
															unsafe_userName, 
															unsafe_domain, 
															password, 
															logonFlags, 
															unsafe_appName, 
															unsafe_cmdLine, 
															creationFlags, 
															environmentBlock, 
															unsafe_lpCurrentDirectory, 
															pinned_lpStartupInfo, 
															pinned_lpProcessInformation
														);
										global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
										global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
									}
							}
							if (cmdLine != null)
								global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
													unsafe_cmdLine, 
													cmdLine
												);
						}
					}
				}
				// Return
				return unsafe___value != 0;
			}
			finally
			{
				// Cleanup
				if (unsafe_cmdLine != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_cmdLine);
			}
		}

		// Signature, LookupPrivilegeValue, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Advapi32_LUID__System_Diagnostics_Process____Interop_Advapi32_LUID__System_Diagnostics_Process, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LookupPrivilegeValue")]
		public static bool LookupPrivilegeValue(
					string lpSystemName, 
					string lpName, 
					out global::_.Interop_Advapi32_LUID__System_Diagnostics_Process lpLuid)
		{
			// Setup
			ushort* unsafe_lpSystemName = default(ushort*);
			ushort* unsafe_lpName = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_lpSystemName = lpSystemName)
			{
				unsafe_lpSystemName = (ushort*)pinned_lpSystemName;
				fixed (char* pinned_lpName = lpName)
				{
					unsafe_lpName = (ushort*)pinned_lpName;
					fixed (global::_.Interop_Advapi32_LUID__System_Diagnostics_Process* pinned_lpLuid = &(lpLuid))
					{
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.advapi32_dll_PInvokes.LookupPrivilegeValue(
											unsafe_lpSystemName, 
											unsafe_lpName, 
											pinned_lpLuid
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
				}
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, OpenProcessToken, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeProcessHandle__System_Diagnostics_Process____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeTokenHandle__System_Diagnostics_Process____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "OpenProcessToken")]
		public static bool OpenProcessToken(
					global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process ProcessHandle, 
					int DesiredAccess, 
					out global::Microsoft.Win32.SafeHandles.SafeTokenHandle__System_Diagnostics_Process TokenHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_TokenHandle;
			int unsafe___value;
			// Marshalling
			ProcessHandle.DangerousAddRef(ref addRefed);
			TokenHandle = new global::Microsoft.Win32.SafeHandles.SafeTokenHandle__System_Diagnostics_Process();
			unsafe_TokenHandle = TokenHandle.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.OpenProcessToken(
								ProcessHandle.DangerousGetHandle(), 
								DesiredAccess, 
								&(unsafe_TokenHandle)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								TokenHandle, 
								unsafe_TokenHandle
							);
			if (addRefed)
				ProcessHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, AdjustTokenPrivileges, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeTokenHandle__System_Diagnostics_Process____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00043084] __Interop_Advapi32_TokenPrivileges__System_Diagnostics_Process____Interop_Advapi32_TokenPrivileges__System_Diagnostics_Process *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "AdjustTokenPrivileges")]
		public static bool AdjustTokenPrivileges(
					global::Microsoft.Win32.SafeHandles.SafeTokenHandle__System_Diagnostics_Process TokenHandle, 
					bool DisableAllPrivileges, 
					global::_.Interop_Advapi32_TokenPrivileges__System_Diagnostics_Process NewState, 
					int BufferLength, 
					global::System.IntPtr PreviousState, 
					global::System.IntPtr ReturnLength)
		{
			// Setup
			bool addRefed = false;
			global::_.Interop_Advapi32_TokenPrivileges__System_Diagnostics_Process__Impl.UnsafeType* unsafe_NewState = default(global::_.Interop_Advapi32_TokenPrivileges__System_Diagnostics_Process__Impl.UnsafeType*);
			int unsafe___value;
			try
			{
				// Marshalling
				TokenHandle.DangerousAddRef(ref addRefed);
				unsafe_NewState = (global::_.Interop_Advapi32_TokenPrivileges__System_Diagnostics_Process__Impl.UnsafeType*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(sizeof(global::_.Interop_Advapi32_TokenPrivileges__System_Diagnostics_Process__Impl.UnsafeType)));
				global::_.Interop_Advapi32_TokenPrivileges__System_Diagnostics_Process__Impl.Marshal__SafeToUnsafe(
									NewState, 
									out (*(unsafe_NewState))
								);
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.AdjustTokenPrivileges(
									TokenHandle.DangerousGetHandle(), 
									(DisableAllPrivileges ? 1 : 0), 
									unsafe_NewState, 
									BufferLength, 
									PreviousState, 
									ReturnLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (addRefed)
					TokenHandle.DangerousRelease();
				// Return
				return unsafe___value != 0;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_NewState);
			}
		}

		// Signature, CryptAcquireContext, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CryptAcquireContextFlags__System_Security_Cryptography_X509Certificates__CryptAcquireContextFlags__System_Security_Cryptography_X509Certificates, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+cryptoapi", "CryptAcquireContext")]
		public static bool CryptAcquireContext(
					out global::System.IntPtr psafeProvHandle, 
					char* pszContainer, 
					char* pszProvider, 
					int dwProvType, 
					global::Internal_Cryptography_Pal_Native.CryptAcquireContextFlags__System_Security_Cryptography_X509Certificates dwFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_psafeProvHandle = &(psafeProvHandle))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptAcquireContext(
									pinned_psafeProvHandle, 
									((ushort*)pszContainer), 
									((ushort*)pszProvider), 
									dwProvType, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, RevertToSelf, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "RevertToSelf")]
		public static bool RevertToSelf()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.RevertToSelf();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, ImpersonateLoggedOnUser, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "ImpersonateLoggedOnUser")]
		public static bool ImpersonateLoggedOnUser(global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows userToken)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			userToken.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.ImpersonateLoggedOnUser(userToken.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				userToken.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, OpenThreadToken, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Principal_TokenAccessLevels__System_Security_Principal_Windows__TokenAccessLevels__System_Security_Principal_Windows, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "OpenThreadToken")]
		public static bool OpenThreadToken(
					global::System.IntPtr ThreadHandle, 
					global::System_Security_Principal.TokenAccessLevels__System_Security_Principal_Windows dwDesiredAccess, 
					bool bOpenAsSelf, 
					out global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows phThreadToken)
		{
			// Setup
			global::System.IntPtr unsafe_phThreadToken;
			int unsafe___value;
			// Marshalling
			phThreadToken = new global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows();
			unsafe_phThreadToken = phThreadToken.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.OpenThreadToken(
								ThreadHandle, 
								dwDesiredAccess, 
								(bOpenAsSelf ? 1 : 0), 
								&(unsafe_phThreadToken)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phThreadToken, 
								unsafe_phThreadToken
							);
			// Return
			return unsafe___value != 0;
		}

		// Signature, OpenProcessToken__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Principal_TokenAccessLevels__System_Security_Principal_Windows__TokenAccessLevels__System_Security_Principal_Windows, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "OpenProcessToken")]
		public static bool OpenProcessToken__0(
					global::System.IntPtr ProcessToken, 
					global::System_Security_Principal.TokenAccessLevels__System_Security_Principal_Windows DesiredAccess, 
					out global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows TokenHandle)
		{
			// Setup
			global::System.IntPtr unsafe_TokenHandle;
			int unsafe___value;
			// Marshalling
			TokenHandle = new global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows();
			unsafe_TokenHandle = TokenHandle.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.OpenProcessToken__0(
								ProcessToken, 
								DesiredAccess, 
								&(unsafe_TokenHandle)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								TokenHandle, 
								unsafe_TokenHandle
							);
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptGetKeyParam, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeKeyHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptGetKeyParam")]
		public static bool CryptGetKeyParam(
					global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp safeKeyHandle, 
					int dwParam, 
					byte[] pbData, 
					ref int pdwDataLen, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_pbData;
			int unsafe___value;
			// Marshalling
			safeKeyHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_pbData = ((pbData != null 
						&& pbData.Length == 0) ? new byte[1] : pbData))
			{
				unsafe_pbData = (byte*)pinned_pbData;
				fixed (int* pinned_pdwDataLen = &(pdwDataLen))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptGetKeyParam(
										safeKeyHandle.DangerousGetHandle(), 
										dwParam, 
										unsafe_pbData, 
										pinned_pdwDataLen, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			if (addRefed)
				safeKeyHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptGetDefaultProvider, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptGetDefaultProvider")]
		public static bool CryptGetDefaultProvider(
					int dwProvType, 
					global::System.IntPtr pdwReserved, 
					int dwFlags, 
					global::System.Text.StringBuilder pszProvName, 
					ref int IntPtrProvName)
		{
			// Setup
			ushort* unsafe_pszProvName = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (pszProvName == null)
					unsafe_pszProvName = null;
				else
				{
					unsafe_pszProvName = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(pszProvName.Capacity * 2 
										+ 2)));
					if (unsafe_pszProvName == null)
						throw new global::System.OutOfMemoryException();
				}
				if (unsafe_pszProvName != null)
					global::System.Runtime.InteropServices.McgMarshal.StringBuilderToUnicodeString(
										pszProvName, 
										unsafe_pszProvName
									);
				fixed (int* pinned_IntPtrProvName = &(IntPtrProvName))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptGetDefaultProvider(
										dwProvType, 
										pdwReserved, 
										dwFlags, 
										unsafe_pszProvName, 
										pinned_IntPtrProvName
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
				if (pszProvName != null)
					global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
										unsafe_pszProvName, 
										pszProvName
									);
				// Return
				return unsafe___value != 0;
			}
			finally
			{
				// Cleanup
				if (unsafe_pszProvName != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_pszProvName);
			}
		}

		// Signature, CryptAcquireContext__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptAcquireContext")]
		public static bool CryptAcquireContext__0(
					out global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp psafeProvHandle, 
					string pszContainer, 
					string pszProvider, 
					int dwProvType, 
					uint dwFlags)
		{
			// Setup
			global::System.IntPtr unsafe_psafeProvHandle;
			ushort* unsafe_pszContainer = default(ushort*);
			ushort* unsafe_pszProvider = default(ushort*);
			int unsafe___value;
			// Marshalling
			psafeProvHandle = new global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp();
			unsafe_psafeProvHandle = psafeProvHandle.DangerousGetHandle();
			fixed (char* pinned_pszContainer = pszContainer)
			{
				unsafe_pszContainer = (ushort*)pinned_pszContainer;
				fixed (char* pinned_pszProvider = pszProvider)
				{
					unsafe_pszProvider = (ushort*)pinned_pszProvider;
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptAcquireContext__0(
										&(unsafe_psafeProvHandle), 
										unsafe_pszContainer, 
										unsafe_pszProvider, 
										dwProvType, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								psafeProvHandle, 
								unsafe_psafeProvHandle
							);
			// Return
			return unsafe___value != 0;
		}

		// Signature, _CryptGetUserKey, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeKeyHandle__System_Security_Cryptography_Csp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "_CryptGetUserKey")]
		public static bool _CryptGetUserKey(
					global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp safeProvHandle, 
					int dwKeySpec, 
					out global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp safeKeyHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_safeKeyHandle;
			int unsafe___value;
			// Marshalling
			safeProvHandle.DangerousAddRef(ref addRefed);
			safeKeyHandle = new global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp();
			unsafe_safeKeyHandle = safeKeyHandle.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes._CryptGetUserKey(
								safeProvHandle.DangerousGetHandle(), 
								dwKeySpec, 
								&(unsafe_safeKeyHandle)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								safeKeyHandle, 
								unsafe_safeKeyHandle
							);
			if (addRefed)
				safeProvHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptGetProvParam, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp__Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "CryptGetProvParam")]
		public static bool CryptGetProvParam(
					global::System.Runtime.InteropServices.SafeHandle safeProvHandle, 
					global::_.Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp dwParam, 
					global::System.IntPtr pbData, 
					ref int dwDataLen, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			safeProvHandle.DangerousAddRef(ref addRefed);
			fixed (int* pinned_dwDataLen = &(dwDataLen))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptGetProvParam(
									safeProvHandle.DangerousGetHandle(), 
									dwParam, 
									pbData, 
									pinned_dwDataLen, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				safeProvHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptDestroyKey, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptDestroyKey")]
		public static bool CryptDestroyKey(global::System.IntPtr hKey)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptDestroyKey(hKey);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, LsaNtStatusToWinError, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaNtStatusToWinError")]
		public static uint LsaNtStatusToWinError(uint status)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaNtStatusToWinError(status);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DuplicateTokenEx, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "DuplicateTokenEx")]
		public static bool DuplicateTokenEx(
					global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows hExistingToken, 
					uint dwDesiredAccess, 
					global::System.IntPtr lpTokenAttributes, 
					uint ImpersonationLevel, 
					uint TokenType, 
					ref global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows phNewToken)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_phNewToken;
			global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows out_phNewToken;
			global::System.IntPtr prev_unsafe_phNewToken;
			int unsafe___value;
			// Marshalling
			hExistingToken.DangerousAddRef(ref addRefed);
			phNewToken.DangerousAddRef(ref addRefed_1);
			unsafe_phNewToken = phNewToken.DangerousGetHandle();
			prev_unsafe_phNewToken = unsafe_phNewToken;
			out_phNewToken = new global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.DuplicateTokenEx(
								hExistingToken.DangerousGetHandle(), 
								dwDesiredAccess, 
								lpTokenAttributes, 
								ImpersonationLevel, 
								TokenType, 
								&(unsafe_phNewToken)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed_1)
				phNewToken.DangerousRelease();
			if (prev_unsafe_phNewToken != unsafe_phNewToken)
			{
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									out_phNewToken, 
									unsafe_phNewToken
								);
				phNewToken = out_phNewToken;
			}
			if (addRefed)
				hExistingToken.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetTokenInformation, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "GetTokenInformation")]
		public static bool GetTokenInformation(
					global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows TokenHandle, 
					uint TokenInformationClass, 
					global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Security_Principal_Windows TokenInformation, 
					uint TokenInformationLength, 
					out uint ReturnLength)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			int unsafe___value;
			// Marshalling
			TokenHandle.DangerousAddRef(ref addRefed);
			TokenInformation.DangerousAddRef(ref addRefed_1);
			fixed (uint* pinned_ReturnLength = &(ReturnLength))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.GetTokenInformation(
									TokenHandle.DangerousGetHandle(), 
									TokenInformationClass, 
									TokenInformation.DangerousGetHandle(), 
									TokenInformationLength, 
									pinned_ReturnLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed_1)
				TokenInformation.DangerousRelease();
			if (addRefed)
				TokenHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptReleaseContext, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptReleaseContext")]
		public static bool CryptReleaseContext(
					global::System.IntPtr safeProvHandle, 
					int dwFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptReleaseContext(
								safeProvHandle, 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, _CryptImportKey, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeKeyHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeKeyHandle__System_Security_Cryptography_Csp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "_CryptImportKey")]
		public static bool _CryptImportKey(
					global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp hProv, 
					byte[] pbData, 
					int dwDataLen, 
					global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp hPubKey, 
					int dwFlags, 
					out global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp phKey)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_pbData;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_phKey;
			int unsafe___value;
			// Marshalling
			hProv.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_pbData = ((pbData != null 
						&& pbData.Length == 0) ? new byte[1] : pbData))
			{
				unsafe_pbData = (byte*)pinned_pbData;
				hPubKey.DangerousAddRef(ref addRefed_1);
				phKey = new global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp();
				unsafe_phKey = phKey.DangerousGetHandle();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes._CryptImportKey(
									hProv.DangerousGetHandle(), 
									unsafe_pbData, 
									dwDataLen, 
									hPubKey.DangerousGetHandle(), 
									dwFlags, 
									&(unsafe_phKey)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									phKey, 
									unsafe_phKey
								);
				if (addRefed_1)
					hPubKey.DangerousRelease();
			}
			if (addRefed)
				hProv.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptSetProvParamIndirectPtr, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp__Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptSetProvParamIndirectPtr")]
		public static bool CryptSetProvParamIndirectPtr(
					global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp safeProvHandle, 
					global::_.Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp dwParam, 
					ref global::System.IntPtr pbData, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			safeProvHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_pbData = &(pbData))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptSetProvParamIndirectPtr(
									safeProvHandle.DangerousGetHandle(), 
									dwParam, 
									pinned_pbData, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				safeProvHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptSetProvParam, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp__Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "CryptSetProvParam")]
		public static bool CryptSetProvParam(
					global::System.Runtime.InteropServices.SafeHandle safeProvHandle, 
					global::_.Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp dwParam, 
					global::System.IntPtr pbData, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			safeProvHandle.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptSetProvParam(
								safeProvHandle.DangerousGetHandle(), 
								dwParam, 
								pbData, 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				safeProvHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetTokenInformation__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "GetTokenInformation")]
		public static bool GetTokenInformation__0(
					global::System.IntPtr TokenHandle, 
					uint TokenInformationClass, 
					global::System.IntPtr TokenInformation, 
					uint TokenInformationLength, 
					out uint ReturnLength)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (uint* pinned_ReturnLength = &(ReturnLength))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.GetTokenInformation__0(
									TokenHandle, 
									TokenInformationClass, 
									TokenInformation, 
									TokenInformationLength, 
									pinned_ReturnLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, _CryptGenKey, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeKeyHandle__System_Security_Cryptography_Csp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "_CryptGenKey")]
		public static bool _CryptGenKey(
					global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp safeProvHandle, 
					int Algid, 
					int dwFlags, 
					out global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp safeKeyHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_safeKeyHandle;
			int unsafe___value;
			// Marshalling
			safeProvHandle.DangerousAddRef(ref addRefed);
			safeKeyHandle = new global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp();
			unsafe_safeKeyHandle = safeKeyHandle.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes._CryptGenKey(
								safeProvHandle.DangerousGetHandle(), 
								Algid, 
								dwFlags, 
								&(unsafe_safeKeyHandle)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								safeKeyHandle, 
								unsafe_safeKeyHandle
							);
			if (addRefed)
				safeProvHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, LsaLookupSids, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaPolicyHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaMemoryHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaMemoryHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaLookupSids")]
		public static uint LsaLookupSids(
					global::Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle__System_Security_Principal_Windows handle, 
					int count, 
					global::System.IntPtr[] sids, 
					ref global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows referencedDomains, 
					ref global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows names)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr* unsafe_sids;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_referencedDomains;
			global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows out_referencedDomains;
			global::System.IntPtr prev_unsafe_referencedDomains;
			bool addRefed_2 = false;
			global::System.IntPtr unsafe_names;
			global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows out_names;
			global::System.IntPtr prev_unsafe_names;
			uint unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_sids = ((sids != null 
						&& sids.Length == 0) ? new global::System.IntPtr[1] : sids))
			{
				unsafe_sids = (global::System.IntPtr*)pinned_sids;
				referencedDomains.DangerousAddRef(ref addRefed_1);
				unsafe_referencedDomains = referencedDomains.DangerousGetHandle();
				prev_unsafe_referencedDomains = unsafe_referencedDomains;
				out_referencedDomains = new global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows();
				names.DangerousAddRef(ref addRefed_2);
				unsafe_names = names.DangerousGetHandle();
				prev_unsafe_names = unsafe_names;
				out_names = new global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaLookupSids(
									handle.DangerousGetHandle(), 
									count, 
									unsafe_sids, 
									&(unsafe_referencedDomains), 
									&(unsafe_names)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (addRefed_2)
					names.DangerousRelease();
				if (prev_unsafe_names != unsafe_names)
				{
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										out_names, 
										unsafe_names
									);
					names = out_names;
				}
				if (addRefed_1)
					referencedDomains.DangerousRelease();
				if (prev_unsafe_referencedDomains != unsafe_referencedDomains)
				{
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										out_referencedDomains, 
										unsafe_referencedDomains
									);
					referencedDomains = out_referencedDomains;
				}
			}
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, LsaLookupNames2, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaPolicyHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000424E8] rg___Interop_UNICODE_STRING__System_Security_Principal_Windows____Interop_UNICODE_STRING__System_Security_Principal_Windows *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaMemoryHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaMemoryHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaLookupNames2")]
		public static uint LsaLookupNames2(
					global::Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle__System_Security_Principal_Windows handle, 
					int flags, 
					int count, 
					global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows[] names, 
					ref global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows referencedDomains, 
					ref global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows sids)
		{
			// Setup
			bool addRefed = false;
			global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.UnsafeType* unsafe_names = default(global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.UnsafeType*);
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_referencedDomains;
			global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows out_referencedDomains;
			global::System.IntPtr prev_unsafe_referencedDomains;
			bool addRefed_2 = false;
			global::System.IntPtr unsafe_sids;
			global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows out_sids;
			global::System.IntPtr prev_unsafe_sids;
			uint unsafe___value;
			try
			{
				// Marshalling
				handle.DangerousAddRef(ref addRefed);
				if (names == null)
					unsafe_names = null;
				else
				{
					if (names != null)
						unsafe_names = (global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.UnsafeType*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(names.Length * sizeof(global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.UnsafeType))));
					if (names != null)
						for (uint mcgIdx = 0; (mcgIdx < names.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x000421C0] __Interop_UNICODE_STRING__System_Security_Principal_Windows____Interop_UNICODE_STRING__System_Security_Principal_Windows names
							global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.Marshal__SafeToUnsafe(
												ref names[mcgIdx], 
												out unsafe_names[mcgIdx]
											);
						}
				}
				referencedDomains.DangerousAddRef(ref addRefed_1);
				unsafe_referencedDomains = referencedDomains.DangerousGetHandle();
				prev_unsafe_referencedDomains = unsafe_referencedDomains;
				out_referencedDomains = new global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows();
				sids.DangerousAddRef(ref addRefed_2);
				unsafe_sids = sids.DangerousGetHandle();
				prev_unsafe_sids = unsafe_sids;
				out_sids = new global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaLookupNames2(
									handle.DangerousGetHandle(), 
									flags, 
									count, 
									unsafe_names, 
									&(unsafe_referencedDomains), 
									&(unsafe_sids)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (addRefed_2)
					sids.DangerousRelease();
				if (prev_unsafe_sids != unsafe_sids)
				{
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										out_sids, 
										unsafe_sids
									);
					sids = out_sids;
				}
				if (addRefed_1)
					referencedDomains.DangerousRelease();
				if (prev_unsafe_referencedDomains != unsafe_referencedDomains)
				{
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										out_referencedDomains, 
										unsafe_referencedDomains
									);
					referencedDomains = out_referencedDomains;
				}
				if (addRefed)
					handle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_names != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < names.Length); mcgIdx_1++)
					{
						// [fwd] [in] [out] [optional] [EETypeRva:0x000421C0] __Interop_UNICODE_STRING__System_Security_Principal_Windows____Interop_UNICODE_STRING__System_Security_Principal_Windows names
						global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.Cleanup__Unsafe(ref unsafe_names[mcgIdx_1]);
					}
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_names);
			}
		}

		// Signature, LsaOpenPolicy, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_LSA_OBJECT_ATTRIBUTES__System_Security_Principal_Windows____Interop_LSA_OBJECT_ATTRIBUTES__System_Security_Principal_Windows, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaPolicyHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaOpenPolicy")]
		public static uint LsaOpenPolicy(
					string systemName, 
					ref global::_.Interop_LSA_OBJECT_ATTRIBUTES__System_Security_Principal_Windows attributes, 
					int accessMask, 
					out global::Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle__System_Security_Principal_Windows handle)
		{
			// Setup
			ushort* unsafe_systemName = default(ushort*);
			global::System.IntPtr unsafe_handle;
			uint unsafe___value;
			// Marshalling
			fixed (char* pinned_systemName = systemName)
			{
				unsafe_systemName = (ushort*)pinned_systemName;
				fixed (global::_.Interop_LSA_OBJECT_ATTRIBUTES__System_Security_Principal_Windows* pinned_attributes = &(attributes))
				{
					handle = new global::Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle__System_Security_Principal_Windows();
					unsafe_handle = handle.DangerousGetHandle();
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaOpenPolicy(
										unsafe_systemName, 
										pinned_attributes, 
										accessMask, 
										&(unsafe_handle)
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										handle, 
										unsafe_handle
									);
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, LsaClose, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaClose")]
		public static int LsaClose(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaClose(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, LsaFreeMemory, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaFreeMemory")]
		public static int LsaFreeMemory(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaFreeMemory(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'BCrypt.dll'
	/// </summary>
	public unsafe static partial class BCrypt_dll
	{
		// Signature, BCryptCreateHash, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptAlgorithmHandle__System_Security_Cryptography_Algorithms____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptHashHandle__System_Security_Cryptography_Algorithms____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_BCrypt_BCryptCreateHashFlags__System_Security_Cryptography_Algorithms__Interop_BCrypt_BCryptCreateHashFlags__System_Security_Cryptography_Algorithms, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptCreateHash")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptCreateHash(
					global::Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle__System_Security_Cryptography_Algorithms hAlgorithm, 
					out global::Microsoft.Win32.SafeHandles.SafeBCryptHashHandle__System_Security_Cryptography_Algorithms phHash, 
					global::System.IntPtr pbHashObject, 
					int cbHashObject, 
					byte[] pbSecret, 
					int cbSecret, 
					global::_.Interop_BCrypt_BCryptCreateHashFlags__System_Security_Cryptography_Algorithms dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_phHash;
			byte* unsafe_pbSecret;
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			hAlgorithm.DangerousAddRef(ref addRefed);
			phHash = new global::Microsoft.Win32.SafeHandles.SafeBCryptHashHandle__System_Security_Cryptography_Algorithms();
			unsafe_phHash = phHash.DangerousGetHandle();
			fixed (byte* pinned_pbSecret = ((pbSecret != null 
						&& pbSecret.Length == 0) ? new byte[1] : pbSecret))
			{
				unsafe_pbSecret = (byte*)pinned_pbSecret;
				// Call to native method
				unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptCreateHash(
									hAlgorithm.DangerousGetHandle(), 
									&(unsafe_phHash), 
									pbHashObject, 
									cbHashObject, 
									unsafe_pbSecret, 
									cbSecret, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phHash, 
								unsafe_phHash
							);
			if (addRefed)
				hAlgorithm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptGetProperty, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptHandle__System_Security_Cryptography_Algorithms____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptGetProperty")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptGetProperty(
					global::Microsoft.Win32.SafeHandles.SafeBCryptHandle__System_Security_Cryptography_Algorithms hObject, 
					string pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				fixed (int* pinned_pcbResult = &(pcbResult))
				{
					// Call to native method
					unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptGetProperty(
										hObject.DangerousGetHandle(), 
										unsafe_pszProperty, 
										((void*)pbOutput), 
										cbOutput, 
										pinned_pcbResult, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptOpenAlgorithmProvider, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptAlgorithmHandle__System_Security_Cryptography_Algorithms____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00042D60] __Interop_BCrypt_BCryptOpenAlgorithmProviderFlags__System_Security_Cryptography_Algorithms__Interop_BCrypt_BCryptOpenAlgorithmProviderFlags__System_Security_Cryptography_Algorithms, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptOpenAlgorithmProvider")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptOpenAlgorithmProvider(
					out global::Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle__System_Security_Cryptography_Algorithms phAlgorithm, 
					string pszAlgId, 
					string pszImplementation, 
					global::_.Interop_BCrypt_BCryptOpenAlgorithmProviderFlags__System_Security_Cryptography_Algorithms dwFlags)
		{
			// Setup
			global::System.IntPtr unsafe_phAlgorithm;
			ushort* unsafe_pszAlgId = default(ushort*);
			ushort* unsafe_pszImplementation = default(ushort*);
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			phAlgorithm = new global::Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle__System_Security_Cryptography_Algorithms();
			unsafe_phAlgorithm = phAlgorithm.DangerousGetHandle();
			fixed (char* pinned_pszAlgId = pszAlgId)
			{
				unsafe_pszAlgId = (ushort*)pinned_pszAlgId;
				fixed (char* pinned_pszImplementation = pszImplementation)
				{
					unsafe_pszImplementation = (ushort*)pinned_pszImplementation;
					// Call to native method
					unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptOpenAlgorithmProvider(
										&(unsafe_phAlgorithm), 
										unsafe_pszAlgId, 
										unsafe_pszImplementation, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phAlgorithm, 
								unsafe_phAlgorithm
							);
			// Return
			return unsafe___value;
		}

		// Signature, BCryptHashData, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptHashHandle__System_Security_Cryptography_Algorithms____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] byte__unsigned char, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptHashData")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptHashData(
					global::Microsoft.Win32.SafeHandles.SafeBCryptHashHandle__System_Security_Cryptography_Algorithms hHash, 
					ref byte pbInput, 
					int cbInput, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			hHash.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_pbInput = &(pbInput))
			{
				// Call to native method
				unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptHashData(
									hHash.DangerousGetHandle(), 
									pinned_pbInput, 
									cbInput, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				hHash.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptCloseAlgorithmProvider, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptCloseAlgorithmProvider")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptCloseAlgorithmProvider(
					global::System.IntPtr hAlgorithm, 
					int dwFlags)
		{
			// Setup
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptCloseAlgorithmProvider(
								hAlgorithm, 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptDestroyHash, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptDestroyHash")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptDestroyHash(global::System.IntPtr hHash)
		{
			// Setup
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptDestroyHash(hHash);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptFinishHash, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptHashHandle__System_Security_Cryptography_Algorithms____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] byte__unsigned char, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptFinishHash")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptFinishHash(
					global::Microsoft.Win32.SafeHandles.SafeBCryptHashHandle__System_Security_Cryptography_Algorithms hHash, 
					ref byte pbOutput, 
					int cbOutput, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			hHash.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_pbOutput = &(pbOutput))
			{
				// Call to native method
				unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptFinishHash(
									hHash.DangerousGetHandle(), 
									pinned_pbOutput, 
									cbOutput, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				hHash.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptGenRandom, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] byte__unsigned char, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptGenRandom")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptGenRandom(
					global::System.IntPtr hAlgorithm, 
					ref byte pbBuffer, 
					int cbBuffer, 
					int dwFlags)
		{
			// Setup
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			fixed (byte* pinned_pbBuffer = &(pbBuffer))
			{
				// Call to native method
				unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptGenRandom(
									hAlgorithm, 
									pinned_pbBuffer, 
									cbBuffer, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, BCryptExportKey, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptKeyHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+BCrypt", "BCryptExportKey")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptExportKey(
					global::Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle__System_Security_Cryptography_X509Certificates hKey, 
					global::System.IntPtr hExportKey, 
					string pszBlobType, 
					byte[] pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszBlobType = default(ushort*);
			byte* unsafe_pbOutput;
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszBlobType = pszBlobType)
			{
				unsafe_pszBlobType = (ushort*)pinned_pszBlobType;
				fixed (byte* pinned_pbOutput = ((pbOutput != null 
							&& pbOutput.Length == 0) ? new byte[1] : pbOutput))
				{
					unsafe_pbOutput = (byte*)pinned_pbOutput;
					fixed (int* pinned_pcbResult = &(pcbResult))
					{
						// Call to native method
						unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptExportKey(
											hKey.DangerousGetHandle(), 
											hExportKey, 
											unsafe_pszBlobType, 
											unsafe_pbOutput, 
											cbOutput, 
											pinned_pcbResult, 
											dwFlags
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
				}
			}
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptGetProperty__0, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+BCrypt", "BCryptGetProperty")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptGetProperty__0(
					global::Microsoft.Win32.SafeHandles.SafeBCryptHandle__System_Security_Cryptography_X509Certificates hObject, 
					string pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				fixed (int* pinned_pcbResult = &(pcbResult))
				{
					// Call to native method
					unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptGetProperty__0(
										hObject.DangerousGetHandle(), 
										unsafe_pszProperty, 
										((void*)pbOutput), 
										cbOutput, 
										pinned_pcbResult, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptDestroyKey, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+BCrypt", "BCryptDestroyKey")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptDestroyKey(global::System.IntPtr hKey)
		{
			// Setup
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptDestroyKey(hKey);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-com-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll
	{
		// Signature, CoCreateInstance, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.StackTraceGenerator.StackTraceGenerator", "CoCreateInstance")]
		public static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					out global::System.IntPtr ppv)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_ppv = &(ppv))
			{
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_com_l1_1_0_dll_PInvokes.CoCreateInstance(
									((byte*)rclsid), 
									pUnkOuter, 
									dwClsContext, 
									((byte*)riid), 
									pinned_ppv
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'OleAut32'
	/// </summary>
	public unsafe static partial class OleAut32
	{
		// Signature, SysFreeString, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.LightweightInterop.MarshalExtensions", "SysFreeString")]
		public static void SysFreeString(global::System.IntPtr bstr)
		{
			// Marshalling
			// Call to native method
			global::__Interop.OleAut32_PInvokes.SysFreeString(bstr);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'ncrypt.dll'
	/// </summary>
	public unsafe static partial class ncrypt_dll
	{
		// Signature, NCryptOpenKey, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptProviderHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptKeyHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Cryptography_CngKeyOpenOptions__System_Security_Cryptography_Cng__CngKeyOpenOptions__System_Security_Cryptography_Cng, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptOpenKey")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptOpenKey(
					global::Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle__System_Security_Cryptography_Cng hProvider, 
					out global::Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle__System_Security_Cryptography_Cng phKey, 
					string pszKeyName, 
					int dwLegacyKeySpec, 
					global::System_Security_Cryptography.CngKeyOpenOptions__System_Security_Cryptography_Cng dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_phKey;
			ushort* unsafe_pszKeyName = default(ushort*);
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			hProvider.DangerousAddRef(ref addRefed);
			phKey = new global::Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle__System_Security_Cryptography_Cng();
			unsafe_phKey = phKey.DangerousGetHandle();
			fixed (char* pinned_pszKeyName = pszKeyName)
			{
				unsafe_pszKeyName = (ushort*)pinned_pszKeyName;
				// Call to native method
				unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptOpenKey(
									hProvider.DangerousGetHandle(), 
									&(unsafe_phKey), 
									unsafe_pszKeyName, 
									dwLegacyKeySpec, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phKey, 
								unsafe_phKey
							);
			if (addRefed)
				hProvider.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptDeleteKey, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptKeyHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptDeleteKey")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptDeleteKey(
					global::Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle__System_Security_Cryptography_Cng hKey, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptDeleteKey(
								hKey.DangerousGetHandle(), 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptOpenStorageProvider, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptProviderHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptOpenStorageProvider")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptOpenStorageProvider(
					out global::Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle__System_Security_Cryptography_Cng phProvider, 
					string pszProviderName, 
					int dwFlags)
		{
			// Setup
			global::System.IntPtr unsafe_phProvider;
			ushort* unsafe_pszProviderName = default(ushort*);
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			phProvider = new global::Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle__System_Security_Cryptography_Cng();
			unsafe_phProvider = phProvider.DangerousGetHandle();
			fixed (char* pinned_pszProviderName = pszProviderName)
			{
				unsafe_pszProviderName = (ushort*)pinned_pszProviderName;
				// Call to native method
				unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptOpenStorageProvider(
									&(unsafe_phProvider), 
									unsafe_pszProviderName, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phProvider, 
								unsafe_phProvider
							);
			// Return
			return unsafe___value;
		}

		// Signature, NCryptFreeObject, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptFreeObject")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptFreeObject(global::System.IntPtr hObject)
		{
			// Setup
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptFreeObject(hObject);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptImportKey, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptProviderHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptKeyHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptImportKey")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptImportKey(
					global::Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle__System_Security_Cryptography_Cng hProvider, 
					global::System.IntPtr hImportKey, 
					string pszBlobType, 
					global::System.IntPtr pParameterList, 
					out global::Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle__System_Security_Cryptography_Cng phKey, 
					byte[] pbData, 
					int cbData, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszBlobType = default(ushort*);
			global::System.IntPtr unsafe_phKey;
			byte* unsafe_pbData;
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			hProvider.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszBlobType = pszBlobType)
			{
				unsafe_pszBlobType = (ushort*)pinned_pszBlobType;
				phKey = new global::Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle__System_Security_Cryptography_Cng();
				unsafe_phKey = phKey.DangerousGetHandle();
				fixed (byte* pinned_pbData = ((pbData != null 
							&& pbData.Length == 0) ? new byte[1] : pbData))
				{
					unsafe_pbData = (byte*)pinned_pbData;
					// Call to native method
					unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptImportKey(
										hProvider.DangerousGetHandle(), 
										hImportKey, 
										unsafe_pszBlobType, 
										pParameterList, 
										&(unsafe_phKey), 
										unsafe_pbData, 
										cbData, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									phKey, 
									unsafe_phKey
								);
			}
			if (addRefed)
				hProvider.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptGetProperty, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [out] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Cryptography_CngPropertyOptions__System_Security_Cryptography_Cng__CngPropertyOptions__System_Security_Cryptography_Cng, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptGetProperty")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptGetProperty(
					global::Microsoft.Win32.SafeHandles.SafeNCryptHandle__System_Security_Cryptography_Cng hObject, 
					string pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					global::System_Security_Cryptography.CngPropertyOptions__System_Security_Cryptography_Cng dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				fixed (int* pinned_pcbResult = &(pcbResult))
				{
					// Call to native method
					unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptGetProperty(
										hObject.DangerousGetHandle(), 
										unsafe_pszProperty, 
										((void*)pbOutput), 
										cbOutput, 
										pinned_pcbResult, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptSetProperty, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Cryptography_CngPropertyOptions__System_Security_Cryptography_Cng__CngPropertyOptions__System_Security_Cryptography_Cng, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptSetProperty")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptSetProperty(
					global::Microsoft.Win32.SafeHandles.SafeNCryptHandle__System_Security_Cryptography_Cng hObject, 
					string pszProperty, 
					void* pbInput, 
					int cbInput, 
					global::System_Security_Cryptography.CngPropertyOptions__System_Security_Cryptography_Cng dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				// Call to native method
				unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptSetProperty(
									hObject.DangerousGetHandle(), 
									unsafe_pszProperty, 
									((void*)pbInput), 
									cbInput, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'sspicli.dll'
	/// </summary>
	public unsafe static partial class sspicli_dll
	{
		// Signature, LsaGetLogonSessionData, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_LUID__System_Security_Principal_Windows____Interop_LUID__System_Security_Principal_Windows, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaReturnBufferHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "LsaGetLogonSessionData")]
		public static int LsaGetLogonSessionData(
					ref global::_.Interop_LUID__System_Security_Principal_Windows LogonId, 
					ref global::Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle__System_Security_Principal_Windows ppLogonSessionData)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_ppLogonSessionData;
			global::Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle__System_Security_Principal_Windows out_ppLogonSessionData;
			global::System.IntPtr prev_unsafe_ppLogonSessionData;
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_LUID__System_Security_Principal_Windows* pinned_LogonId = &(LogonId))
			{
				ppLogonSessionData.DangerousAddRef(ref addRefed);
				unsafe_ppLogonSessionData = ppLogonSessionData.DangerousGetHandle();
				prev_unsafe_ppLogonSessionData = unsafe_ppLogonSessionData;
				out_ppLogonSessionData = new global::Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle__System_Security_Principal_Windows();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.LsaGetLogonSessionData(
									pinned_LogonId, 
									&(unsafe_ppLogonSessionData)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (addRefed)
					ppLogonSessionData.DangerousRelease();
				if (prev_unsafe_ppLogonSessionData != unsafe_ppLogonSessionData)
				{
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										out_ppLogonSessionData, 
										unsafe_ppLogonSessionData
									);
					ppLogonSessionData = out_ppLogonSessionData;
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, LsaFreeReturnBuffer, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "LsaFreeReturnBuffer")]
		public static int LsaFreeReturnBuffer(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.sspicli_dll_PInvokes.LsaFreeReturnBuffer(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, EncryptMessage, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_SecBufferDesc__System_Net_Security____Interop_SspiCli_SecBufferDesc__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "EncryptMessage")]
		public static int EncryptMessage(
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security contextHandle, 
					uint qualityOfProtection, 
					ref global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security inputOutput, 
					uint sequenceNumber)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_contextHandle = &(contextHandle))
				fixed (global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* pinned_inputOutput = &(inputOutput))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.sspicli_dll_PInvokes.EncryptMessage(
										pinned_contextHandle, 
										qualityOfProtection, 
										pinned_inputOutput, 
										sequenceNumber
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			// Return
			return unsafe___value;
		}

		// Signature, DecryptMessage, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_SecBufferDesc__System_Net_Security____Interop_SspiCli_SecBufferDesc__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint___ptrunsigned int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "DecryptMessage")]
		public static int DecryptMessage(
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security contextHandle, 
					ref global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security inputOutput, 
					uint sequenceNumber, 
					uint* qualityOfProtection)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_contextHandle = &(contextHandle))
				fixed (global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* pinned_inputOutput = &(inputOutput))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.sspicli_dll_PInvokes.DecryptMessage(
										pinned_contextHandle, 
										pinned_inputOutput, 
										sequenceNumber, 
										((uint*)qualityOfProtection)
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			// Return
			return unsafe___value;
		}

		// Signature, EnumerateSecurityPackagesW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] System_Net_Security_SafeFreeContextBuffer_SECURITY__System_Net_Security____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "EnumerateSecurityPackagesW")]
		public static int EnumerateSecurityPackagesW(
					out int pkgnum, 
					out global::System.Net.Security.SafeFreeContextBuffer_SECURITY__System_Net_Security handle)
		{
			// Setup
			global::System.IntPtr unsafe_handle;
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_pkgnum = &(pkgnum))
			{
				handle = new global::System.Net.Security.SafeFreeContextBuffer_SECURITY__System_Net_Security();
				unsafe_handle = handle.DangerousGetHandle();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.EnumerateSecurityPackagesW(
									pinned_pkgnum, 
									&(unsafe_handle)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									handle, 
									unsafe_handle
								);
			}
			// Return
			return unsafe___value;
		}

		// Signature, QueryContextAttributesW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [EETypeRva:0x00042D60] __Interop_SspiCli_ContextAttribute__System_Net_Security__Interop_SspiCli_ContextAttribute__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "QueryContextAttributesW")]
		public static int QueryContextAttributesW(
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security contextHandle, 
					global::_.Interop_SspiCli_ContextAttribute__System_Net_Security attribute, 
					void* buffer)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_contextHandle = &(contextHandle))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.QueryContextAttributesW(
									pinned_contextHandle, 
									attribute, 
									((void*)buffer)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, ApplyControlToken, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_SecBufferDesc__System_Net_Security____Interop_SspiCli_SecBufferDesc__System_Net_Security, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "ApplyControlToken")]
		public static int ApplyControlToken(
					void* inContextPtr, 
					ref global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security inputBuffers)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* pinned_inputBuffers = &(inputBuffers))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.ApplyControlToken(
									((void*)inContextPtr), 
									pinned_inputBuffers
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, AcquireCredentialsHandleW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_SCHANNEL_CRED__System_Net_Security____Interop_SspiCli_SCHANNEL_CRED__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] long____int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "AcquireCredentialsHandleW")]
		public static int AcquireCredentialsHandleW(
					string principal, 
					string moduleName, 
					int usage, 
					void* logonID, 
					ref global::_.Interop_SspiCli_SCHANNEL_CRED__System_Net_Security authData, 
					void* keyCallback, 
					void* keyArgument, 
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security handlePtr, 
					out long timeStamp)
		{
			// Setup
			ushort* unsafe_principal = default(ushort*);
			ushort* unsafe_moduleName = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_principal = principal)
			{
				unsafe_principal = (ushort*)pinned_principal;
				fixed (char* pinned_moduleName = moduleName)
				{
					unsafe_moduleName = (ushort*)pinned_moduleName;
					fixed (global::_.Interop_SspiCli_SCHANNEL_CRED__System_Net_Security* pinned_authData = &(authData))
						fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_handlePtr = &(handlePtr))
							fixed (long* pinned_timeStamp = &(timeStamp))
							{
								global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
								// Call to native method
								unsafe___value = global::__Interop.sspicli_dll_PInvokes.AcquireCredentialsHandleW(
													unsafe_principal, 
													unsafe_moduleName, 
													usage, 
													((void*)logonID), 
													pinned_authData, 
													((void*)keyCallback), 
													((void*)keyArgument), 
													pinned_handlePtr, 
													pinned_timeStamp
												);
								global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
								global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
							}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, FreeContextBuffer, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "FreeContextBuffer")]
		public static int FreeContextBuffer(global::System.IntPtr contextBuffer)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.sspicli_dll_PInvokes.FreeContextBuffer(contextBuffer);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, AcceptSecurityContext, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] __Interop_SspiCli_SecBufferDesc__System_Net_Security___ptr__Interop_SspiCli_SecBufferDesc__System_Net_Security *, [fwd] [in] [EETypeRva:0x00042D60] __Interop_SspiCli_ContextFlags__System_Net_Security__Interop_SspiCli_ContextFlags__System_Net_Security, [fwd] [in] [EETypeRva:0x00042D60] __Interop_SspiCli_Endianness__System_Net_Security__Interop_SspiCli_Endianness__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_SecBufferDesc__System_Net_Security____Interop_SspiCli_SecBufferDesc__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] __Interop_SspiCli_ContextFlags__System_Net_Security__Interop_SspiCli_ContextFlags__System_Net_Security, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] long____int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "AcceptSecurityContext")]
		public static int AcceptSecurityContext(
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security credentialHandle, 
					void* inContextPtr, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputBuffer, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security inFlags, 
					global::_.Interop_SspiCli_Endianness__System_Net_Security endianness, 
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security outContextPtr, 
					ref global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security outputBuffer, 
					ref global::_.Interop_SspiCli_ContextFlags__System_Net_Security attributes, 
					out long timeStamp)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_credentialHandle = &(credentialHandle))
				fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_outContextPtr = &(outContextPtr))
					fixed (global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* pinned_outputBuffer = &(outputBuffer))
						fixed (global::_.Interop_SspiCli_ContextFlags__System_Net_Security* pinned_attributes = &(attributes))
							fixed (long* pinned_timeStamp = &(timeStamp))
							{
								global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
								// Call to native method
								unsafe___value = global::__Interop.sspicli_dll_PInvokes.AcceptSecurityContext(
													pinned_credentialHandle, 
													((void*)inContextPtr), 
													((global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security*)inputBuffer), 
													inFlags, 
													endianness, 
													pinned_outContextPtr, 
													pinned_outputBuffer, 
													pinned_attributes, 
													pinned_timeStamp
												);
								global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
								global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
							}
			// Return
			return unsafe___value;
		}

		// Signature, DeleteSecurityContext, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "DeleteSecurityContext")]
		public static int DeleteSecurityContext(ref global::_.Interop_SspiCli_CredHandle__System_Net_Security handlePtr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_handlePtr = &(handlePtr))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.DeleteSecurityContext(pinned_handlePtr);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, InitializeSecurityContextW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x00042D60] __Interop_SspiCli_ContextFlags__System_Net_Security__Interop_SspiCli_ContextFlags__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_SspiCli_Endianness__System_Net_Security__Interop_SspiCli_Endianness__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] __Interop_SspiCli_SecBufferDesc__System_Net_Security___ptr__Interop_SspiCli_SecBufferDesc__System_Net_Security *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_SecBufferDesc__System_Net_Security____Interop_SspiCli_SecBufferDesc__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] __Interop_SspiCli_ContextFlags__System_Net_Security__Interop_SspiCli_ContextFlags__System_Net_Security, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] long____int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "InitializeSecurityContextW")]
		public static int InitializeSecurityContextW(
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security credentialHandle, 
					void* inContextPtr, 
					byte* targetName, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security inFlags, 
					int reservedI, 
					global::_.Interop_SspiCli_Endianness__System_Net_Security endianness, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputBuffer, 
					int reservedII, 
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security outContextPtr, 
					ref global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security outputBuffer, 
					ref global::_.Interop_SspiCli_ContextFlags__System_Net_Security attributes, 
					out long timeStamp)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_credentialHandle = &(credentialHandle))
				fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_outContextPtr = &(outContextPtr))
					fixed (global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* pinned_outputBuffer = &(outputBuffer))
						fixed (global::_.Interop_SspiCli_ContextFlags__System_Net_Security* pinned_attributes = &(attributes))
							fixed (long* pinned_timeStamp = &(timeStamp))
							{
								global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
								// Call to native method
								unsafe___value = global::__Interop.sspicli_dll_PInvokes.InitializeSecurityContextW(
													pinned_credentialHandle, 
													((void*)inContextPtr), 
													((byte*)targetName), 
													inFlags, 
													reservedI, 
													endianness, 
													((global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security*)inputBuffer), 
													reservedII, 
													pinned_outContextPtr, 
													pinned_outputBuffer, 
													pinned_attributes, 
													pinned_timeStamp
												);
								global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
								global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
							}
			// Return
			return unsafe___value;
		}

		// Signature, FreeCredentialsHandle, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "FreeCredentialsHandle")]
		public static int FreeCredentialsHandle(ref global::_.Interop_SspiCli_CredHandle__System_Net_Security handlePtr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_handlePtr = &(handlePtr))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.FreeCredentialsHandle(pinned_handlePtr);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-robuffer-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll
	{
		// Signature, RoGetBufferMarshaler, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00043660] System_Runtime_InteropServices_IMarshal__System_Runtime_WindowsRuntime__System_Runtime_InteropServices__IMarshal__System_Runtime_WindowsRuntime *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Runtime.WindowsRuntime, Version=4.0.14.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "Interop+mincore", "RoGetBufferMarshaler")]
		public static int RoGetBufferMarshaler(out global::System_Runtime_InteropServices.IMarshal__System_Runtime_WindowsRuntime bufferMarshalerPtr)
		{
			// Setup
			void* unsafe_bufferMarshalerPtr = default(void*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_bufferMarshalerPtr = null;
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes.RoGetBufferMarshaler(&(unsafe_bufferMarshalerPtr));
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				bufferMarshalerPtr = (global::System_Runtime_InteropServices.IMarshal__System_Runtime_WindowsRuntime)global::System.Runtime.InteropServices.McgMarshal.ComInterfaceToObject(
									((global::System.IntPtr)unsafe_bufferMarshalerPtr), 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("System.Runtime.InteropServices.IMarshal,System.Runtime.WindowsRuntime, Version=4.0.14.0, Culture=neutral, Public" +
											"KeyToken=b77a5c561934e089")
								);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_bufferMarshalerPtr)));
			}
		}
	}

	public unsafe static partial class kernel32_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr GetProcAddress(
					global::System.IntPtr hModule, 
					byte* procedureName);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FreeLibrary(global::System.IntPtr hModule);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int TerminateProcess(
					global::System.IntPtr processHandle, 
					int exitCode);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetExitCodeProcess(
					global::System.IntPtr processHandle, 
					int* exitCode);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetConsoleCursorInfo(
					global::System.IntPtr hConsoleOutput, 
					global::_.Interop_Kernel32_CONSOLE_CURSOR_INFO__System_Console__Impl.UnsafeType* cci);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int SetConsoleCursorInfo(
					global::System.IntPtr hConsoleOutput, 
					global::_.Interop_Kernel32_CONSOLE_CURSOR_INFO__System_Console__Impl.UnsafeType* cci);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int SetConsoleOutputCP(int codePage);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int SetConsoleCursorPosition(
					global::System.IntPtr hConsoleOutput, 
					global::_.Interop_Kernel32_COORD__System_Console cursorPosition);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int SetConsoleTextAttribute(
					global::System.IntPtr hConsoleOutput, 
					short wAttributes);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="ReadConsoleInputW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ReadConsoleInput(
					global::System.IntPtr hConsoleInput, 
					global::_.Interop_InputRecord__System_Console* buffer, 
					int numInputRecords_UseOne, 
					int* numEventsRead);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FillConsoleOutputCharacterW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FillConsoleOutputCharacter(
					global::System.IntPtr hConsoleOutput, 
					ushort character, 
					int nLength, 
					global::_.Interop_Kernel32_COORD__System_Console dwWriteCoord, 
					int* pNumCharsWritten);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FillConsoleOutputAttribute(
					global::System.IntPtr hConsoleOutput, 
					short wColorAttribute, 
					int numCells, 
					global::_.Interop_Kernel32_COORD__System_Console startCoord, 
					int* pNumBytesWritten);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CloseHandle(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr GetCurrentProcess();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DuplicateHandle(
					global::System.IntPtr hSourceProcessHandle, 
					global::System.IntPtr hSourceHandle, 
					global::System.IntPtr hTargetProcess, 
					global::System.IntPtr* targetHandle, 
					int dwDesiredAccess, 
					int bInheritHandle, 
					int dwOptions);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr GetStdHandle(int nStdHandle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="CreateProcessW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CreateProcess(
					ushort* lpApplicationName, 
					ushort* lpCommandLine, 
					global::_.Interop_Kernel32_SECURITY_ATTRIBUTES__System_Diagnostics_Process* procSecAttrs, 
					global::_.Interop_Kernel32_SECURITY_ATTRIBUTES__System_Diagnostics_Process* threadSecAttrs, 
					int bInheritHandles, 
					int dwCreationFlags, 
					global::System.IntPtr lpEnvironment, 
					ushort* lpCurrentDirectory, 
					global::_.Interop_Kernel32_STARTUPINFO__System_Diagnostics_Process* lpStartupInfo, 
					global::_.Interop_Kernel32_PROCESS_INFORMATION__System_Diagnostics_Process* lpProcessInformation);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetConsoleCP();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetConsoleOutputCP();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="CreateDirectoryW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CreateDirectoryPrivate(
					ushort* path, 
					global::_.Interop_Kernel32_SECURITY_ATTRIBUTES__System_IO_FileSystem* lpSecurityAttributes);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="GetStdHandle", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr GetStdHandle__0(int nStdHandle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetConsoleScreenBufferInfo(
					global::System.IntPtr hConsoleOutput, 
					global::_.Interop_Kernel32_CONSOLE_SCREEN_BUFFER_INFO__System_Console* lpConsoleScreenBufferInfo);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BOOL__System_Text_Encoding_CodePages GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::_.Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LocalAlloc(
					int uFlags, 
					global::System.UIntPtr sizetdwBytes);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="DuplicateHandle", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DuplicateHandle__0(
					global::System.IntPtr hSourceProcessHandle, 
					global::System.IntPtr hSourceHandle, 
					global::System.IntPtr hTargetProcess, 
					global::System.IntPtr* targetHandle, 
					int dwDesiredAccess, 
					int bInheritHandle, 
					int dwOptions);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetProcessId(global::System.IntPtr nativeHandle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr OpenProcess(
					int access, 
					int inherit, 
					int processId);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int SetThreadErrorMode(
					uint dwNewMode, 
					uint* lpOldMode);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="GetFileAttributesExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetFileAttributesExPrivate(
					ushort* name, 
					global::_.Interop_Kernel32_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem fileInfoLevel, 
					global::_.Interop_Kernel32_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem* lpFileInformation);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FindFirstFileExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr FindFirstFileExPrivate(
					ushort* lpFileName, 
					global::_.Interop_Kernel32_FINDEX_INFO_LEVELS__System_IO_FileSystem fInfoLevelId, 
					global::_.Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem* lpFindFileData, 
					global::_.Interop_Kernel32_FINDEX_SEARCH_OPS__System_IO_FileSystem fSearchOp, 
					global::System.IntPtr lpSearchFilter, 
					int dwAdditionalFlags);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="GetConsoleOutputCP", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetConsoleOutputCP__0();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LocalFree(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CreatePipe(
					global::System.IntPtr* hReadPipe, 
					global::System.IntPtr* hWritePipe, 
					global::_.Interop_Kernel32_SECURITY_ATTRIBUTES__System_Diagnostics_Process* lpPipeAttributes, 
					int nSize);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FindClose(global::System.IntPtr hFindFile);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="GetComputerNameW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetComputerName(
					ushort* lpBuffer, 
					uint* nSize);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__0(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__1(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__2(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WriteFile(
					global::System.IntPtr handle, 
					byte* bytes, 
					int numBytesToWrite, 
					int* numBytesWritten, 
					global::System.IntPtr mustBeZero);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetFileType(global::System.IntPtr hFile);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="GetConsoleCP", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetConsoleCP__0();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WideCharToMultiByte(
					uint CodePage, 
					uint dwFlags, 
					ushort* lpWideCharStr, 
					int cchWideChar, 
					byte* lpMultiByteStr, 
					int cbMultiByte, 
					global::System.IntPtr lpDefaultChar, 
					global::System.IntPtr lpUsedDefaultChar);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int MultiByteToWideChar(
					uint CodePage, 
					uint dwFlags, 
					byte* lpMultiByteStr, 
					int cbMultiByte, 
					ushort* lpWideCharStr, 
					int cchWideChar);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="WideCharToMultiByte", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WideCharToMultiByte__0(
					uint CodePage, 
					uint dwFlags, 
					ushort* lpWideCharStr, 
					int cchWideChar, 
					byte* lpMultiByteStr, 
					int cbMultiByte, 
					global::System.IntPtr lpDefaultChar, 
					global::System.IntPtr lpUsedDefaultChar);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="MultiByteToWideChar", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int MultiByteToWideChar__0(
					uint CodePage, 
					uint dwFlags, 
					byte* lpMultiByteStr, 
					int cbMultiByte, 
					ushort* lpWideCharStr, 
					int cchWideChar);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ReadFile(
					global::System.IntPtr handle, 
					byte* bytes, 
					int numBytesToRead, 
					int* numBytesRead, 
					global::System.IntPtr mustBeZero);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="ReadConsoleW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ReadConsole(
					global::System.IntPtr hConsoleInput, 
					byte* lpBuffer, 
					int nNumberOfCharsToRead, 
					int* lpNumberOfCharsRead, 
					global::System.IntPtr pInputControl);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="WriteConsoleW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WriteConsole(
					global::System.IntPtr hConsoleOutput, 
					byte* lpBuffer, 
					int nNumberOfCharsToWrite, 
					int* lpNumberOfCharsWritten, 
					global::System.IntPtr lpReservedMustBeNull);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="GetCPInfoExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetCPInfoExW__0(
					uint CodePage, 
					uint dwFlags, 
					global::_.Interop_Kernel32_CPINFOEXW__System_Diagnostics_Process* lpCPInfoEx);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="GetCPInfoExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetCPInfoExW__1(
					uint CodePage, 
					uint dwFlags, 
					global::_.Interop_Kernel32_CPINFOEXW__System_Console* lpCPInfoEx);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="K32EnumProcesses", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int EnumProcesses(
					int* processIds, 
					int size, 
					int* needed);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__3(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr GetCurrentThread();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="GetCurrentProcess", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr GetCurrentProcess__0();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="CloseHandle", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CloseHandle__0(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int SetFileCompletionNotificationModes(
					global::System.IntPtr handle, 
					global::_.Interop_Kernel32_FileCompletionNotificationModes__System_Net_Sockets flags);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CheckTokenMembershipEx(
					global::System.IntPtr TokenHandle, 
					byte* SidToCheck, 
					uint Flags, 
					int* IsMember);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="LocalAlloc", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LocalAlloc__0(
					int uFlags, 
					global::System.UIntPtr sizetdwBytes);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetConsoleMode(
					global::System.IntPtr handle, 
					int* mode);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="LocalAlloc", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LocalAlloc__1(
					int uFlags, 
					global::System.UIntPtr sizetdwBytes);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="LocalFree", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LocalFree__0(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="LocalFree", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LocalFree__1(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__4(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__5(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="DuplicateHandle", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DuplicateHandle__1(
					global::System.IntPtr hSourceProcessHandle, 
					global::System.IntPtr hSourceHandle, 
					global::System.IntPtr hTargetProcessHandle, 
					global::System.IntPtr* lpTargetHandle, 
					uint dwDesiredAccess, 
					int bInheritHandle, 
					uint dwOptions);
	}

	public unsafe static partial class winmm_dll_PInvokes
	{
		public static int mixerGetNumDevs()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!mixerGetNumDevs\' from this method. Please look for this method in build wa" +
					"rnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio mixerOpen(
					global::System.IntPtr* hMixer, 
					int uMxId, 
					global::System.IntPtr dwCallback, 
					global::System.IntPtr dwInstance, 
					global::NAudio_Mixer.MixerFlags__NAudio dwOpenFlags)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!mixerOpen\' from this method. Please look for this method in build warnings" +
					" for more details. ");
		}

		public static global::NAudio.MmResult__NAudio mixerClose(global::System.IntPtr hMixer)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!mixerClose\' from this method. Please look for this method in build warning" +
					"s for more details. ");
		}

		public static global::NAudio.MmResult__NAudio mixerGetControlDetails(
					global::System.IntPtr hMixer, 
					global::NAudio_Mixer.MixerInterop_MIXERCONTROLDETAILS__NAudio* mixerControlDetails, 
					global::NAudio_Mixer.MixerFlags__NAudio dwDetailsFlags)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!mixerGetControlDetails\' from this method. Please look for this method in b" +
					"uild warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio mixerGetDevCaps(
					global::System.IntPtr nMixerID, 
					global::NAudio_Mixer.MixerInterop_MIXERCAPS__NAudio__Impl.UnsafeType* mixerCaps, 
					int mixerCapsSize)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!mixerGetDevCaps\' from this method. Please look for this method in build wa" +
					"rnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio mixerGetID(
					global::System.IntPtr hMixer, 
					int* mixerID, 
					global::NAudio_Mixer.MixerFlags__NAudio dwMixerIDFlags)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!mixerGetID\' from this method. Please look for this method in build warning" +
					"s for more details. ");
		}

		public static global::NAudio.MmResult__NAudio mixerGetLineControls(
					global::System.IntPtr hMixer, 
					global::NAudio_Mixer.MixerInterop_MIXERLINECONTROLS__NAudio* mixerLineControls, 
					global::NAudio_Mixer.MixerFlags__NAudio dwControlFlags)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!mixerGetLineControls\' from this method. Please look for this method in bui" +
					"ld warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio mixerGetLineInfo(
					global::System.IntPtr hMixer, 
					global::NAudio_Mixer.MixerInterop_MIXERLINE__NAudio__Impl.UnsafeType* mixerLine, 
					global::NAudio_Mixer.MixerFlags__NAudio dwInfoFlags)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!mixerGetLineInfo\' from this method. Please look for this method in build w" +
					"arnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio mixerMessage(
					global::System.IntPtr hMixer, 
					uint nMessage, 
					global::System.IntPtr dwParam1, 
					global::System.IntPtr dwParam2)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!mixerMessage\' from this method. Please look for this method in build warni" +
					"ngs for more details. ");
		}

		public static global::NAudio.MmResult__NAudio mixerSetControlDetails(
					global::System.IntPtr hMixer, 
					global::NAudio_Mixer.MixerInterop_MIXERCONTROLDETAILS__NAudio* mixerControlDetails, 
					global::NAudio_Mixer.MixerFlags__NAudio dwDetailsFlags)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!mixerSetControlDetails\' from this method. Please look for this method in b" +
					"uild warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiConnect(
					global::System.IntPtr hMidiIn, 
					global::System.IntPtr hMidiOut, 
					global::System.IntPtr pReserved)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiConnect\' from this method. Please look for this method in build warnin" +
					"gs for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiDisconnect(
					global::System.IntPtr hMidiIn, 
					global::System.IntPtr hMidiOut, 
					global::System.IntPtr pReserved)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiDisconnect\' from this method. Please look for this method in build war" +
					"nings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiInAddBuffer(
					global::System.IntPtr hMidiIn, 
					global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType* lpMidiInHdr, 
					int uSize)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiInAddBuffer\' from this method. Please look for this method in build wa" +
					"rnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiInClose(global::System.IntPtr hMidiIn)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiInClose\' from this method. Please look for this method in build warnin" +
					"gs for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiInGetDevCaps(
					global::System.IntPtr deviceId, 
					global::NAudio_Midi.MidiInCapabilities__NAudio__Impl.UnsafeType* capabilities, 
					int size)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiInGetDevCaps\' from this method. Please look for this method in build w" +
					"arnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiInGetErrorText(
					int err, 
					byte* lpText, 
					int uSize)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiInGetErrorText\' from this method. Please look for this method in build" +
					" warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiInGetID(
					global::System.IntPtr hMidiIn, 
					int* lpuDeviceId)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiInGetID\' from this method. Please look for this method in build warnin" +
					"gs for more details. ");
		}

		public static int midiInGetNumDevs()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiInGetNumDevs\' from this method. Please look for this method in build w" +
					"arnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiInMessage(
					global::System.IntPtr hMidiIn, 
					int msg, 
					global::System.IntPtr dw1, 
					global::System.IntPtr dw2)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiInMessage\' from this method. Please look for this method in build warn" +
					"ings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiInOpen(
					global::System.IntPtr* hMidiIn, 
					global::System.IntPtr uDeviceID, 
					void* callback, 
					global::System.IntPtr dwInstance, 
					int dwFlags)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiInOpen\' from this method. Please look for this method in build warning" +
					"s for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiInOpenWindow(
					global::System.IntPtr* hMidiIn, 
					global::System.IntPtr uDeviceID, 
					global::System.IntPtr callbackWindowHandle, 
					global::System.IntPtr dwInstance, 
					int dwFlags)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiInOpenWindow\' from this method. Please look for this method in build w" +
					"arnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiInPrepareHeader(
					global::System.IntPtr hMidiIn, 
					global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType* lpMidiInHdr, 
					int uSize)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiInPrepareHeader\' from this method. Please look for this method in buil" +
					"d warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiInReset(global::System.IntPtr hMidiIn)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiInReset\' from this method. Please look for this method in build warnin" +
					"gs for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiInStart(global::System.IntPtr hMidiIn)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiInStart\' from this method. Please look for this method in build warnin" +
					"gs for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiInStop(global::System.IntPtr hMidiIn)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiInStop\' from this method. Please look for this method in build warning" +
					"s for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiInUnprepareHeader(
					global::System.IntPtr hMidiIn, 
					global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType* lpMidiInHdr, 
					int uSize)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiInUnprepareHeader\' from this method. Please look for this method in bu" +
					"ild warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiOutCacheDrumPatches(
					global::System.IntPtr hMidiOut, 
					int uPatch, 
					global::System.IntPtr lpKeyArray, 
					int uFlags)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiOutCacheDrumPatches\' from this method. Please look for this method in " +
					"build warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiOutCachePatches(
					global::System.IntPtr hMidiOut, 
					int uBank, 
					global::System.IntPtr lpPatchArray, 
					int uFlags)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiOutCachePatches\' from this method. Please look for this method in buil" +
					"d warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiOutClose(global::System.IntPtr hMidiOut)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiOutClose\' from this method. Please look for this method in build warni" +
					"ngs for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiOutGetDevCaps(
					global::System.IntPtr deviceNumber, 
					global::NAudio_Midi.MidiOutCapabilities__NAudio__Impl.UnsafeType* caps, 
					int uSize)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiOutGetDevCaps\' from this method. Please look for this method in build " +
					"warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiOutGetErrorText(
					global::System.IntPtr err, 
					byte* lpText, 
					int uSize)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiOutGetErrorText\' from this method. Please look for this method in buil" +
					"d warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiOutGetID(
					global::System.IntPtr hMidiOut, 
					int* lpuDeviceID)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiOutGetID\' from this method. Please look for this method in build warni" +
					"ngs for more details. ");
		}

		public static int midiOutGetNumDevs()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiOutGetNumDevs\' from this method. Please look for this method in build " +
					"warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiOutGetVolume(
					global::System.IntPtr uDeviceID, 
					int* lpdwVolume)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiOutGetVolume\' from this method. Please look for this method in build w" +
					"arnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiOutLongMsg(
					global::System.IntPtr hMidiOut, 
					global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType* lpMidiOutHdr, 
					int uSize)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiOutLongMsg\' from this method. Please look for this method in build war" +
					"nings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiOutMessage(
					global::System.IntPtr hMidiOut, 
					int msg, 
					global::System.IntPtr dw1, 
					global::System.IntPtr dw2)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiOutMessage\' from this method. Please look for this method in build war" +
					"nings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiOutOpen(
					global::System.IntPtr* lphMidiOut, 
					global::System.IntPtr uDeviceID, 
					void* dwCallback, 
					global::System.IntPtr dwInstance, 
					int dwFlags)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiOutOpen\' from this method. Please look for this method in build warnin" +
					"gs for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiOutPrepareHeader(
					global::System.IntPtr hMidiOut, 
					global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType* lpMidiOutHdr, 
					int uSize)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiOutPrepareHeader\' from this method. Please look for this method in bui" +
					"ld warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiOutReset(global::System.IntPtr hMidiOut)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiOutReset\' from this method. Please look for this method in build warni" +
					"ngs for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiOutSetVolume(
					global::System.IntPtr hMidiOut, 
					int dwVolume)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiOutSetVolume\' from this method. Please look for this method in build w" +
					"arnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiOutShortMsg(
					global::System.IntPtr hMidiOut, 
					int dwMsg)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiOutShortMsg\' from this method. Please look for this method in build wa" +
					"rnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiOutUnprepareHeader(
					global::System.IntPtr hMidiOut, 
					global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType* lpMidiOutHdr, 
					int uSize)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiOutUnprepareHeader\' from this method. Please look for this method in b" +
					"uild warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiStreamClose(global::System.IntPtr hMidiStream)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiStreamClose\' from this method. Please look for this method in build wa" +
					"rnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiStreamOpen(
					global::System.IntPtr* hMidiStream, 
					global::System.IntPtr puDeviceID, 
					int cMidi, 
					global::System.IntPtr dwCallback, 
					global::System.IntPtr dwInstance, 
					int fdwOpen)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiStreamOpen\' from this method. Please look for this method in build war" +
					"nings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiStreamOut(
					global::System.IntPtr hMidiStream, 
					global::NAudio_Midi.MidiInterop_MIDIHDR__NAudio__Impl.UnsafeType* pmh, 
					int cbmh)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiStreamOut\' from this method. Please look for this method in build warn" +
					"ings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiStreamPause(global::System.IntPtr hMidiStream)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiStreamPause\' from this method. Please look for this method in build wa" +
					"rnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiStreamPosition(
					global::System.IntPtr hMidiStream, 
					global::NAudio_Midi.MidiInterop_MMTIME__NAudio* lpmmt, 
					int cbmmt)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiStreamPosition\' from this method. Please look for this method in build" +
					" warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiStreamProperty(
					global::System.IntPtr hMidiStream, 
					global::System.IntPtr lppropdata, 
					int dwProperty)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiStreamProperty\' from this method. Please look for this method in build" +
					" warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiStreamRestart(global::System.IntPtr hMidiStream)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiStreamRestart\' from this method. Please look for this method in build " +
					"warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio midiStreamStop(global::System.IntPtr hMidiStream)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!midiStreamStop\' from this method. Please look for this method in build war" +
					"nings for more details. ");
		}

		public static int mmioStringToFOURCC(
					byte* s, 
					int flags)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!mmioStringToFOURCC\' from this method. Please look for this method in build" +
					" warnings for more details. ");
		}

		public static int waveOutGetNumDevs()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveOutGetNumDevs\' from this method. Please look for this method in build " +
					"warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveOutPrepareHeader(
					global::System.IntPtr hWaveOut, 
					global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType* lpWaveOutHdr, 
					int uSize)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveOutPrepareHeader\' from this method. Please look for this method in bui" +
					"ld warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveOutUnprepareHeader(
					global::System.IntPtr hWaveOut, 
					global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType* lpWaveOutHdr, 
					int uSize)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveOutUnprepareHeader\' from this method. Please look for this method in b" +
					"uild warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveOutWrite(
					global::System.IntPtr hWaveOut, 
					global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType* lpWaveOutHdr, 
					int uSize)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveOutWrite\' from this method. Please look for this method in build warni" +
					"ngs for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveOutOpen(
					global::System.IntPtr* hWaveOut, 
					global::System.IntPtr uDeviceID, 
					global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType* lpFormat, 
					void* dwCallback, 
					global::System.IntPtr dwInstance, 
					global::NAudio_Wave.WaveInterop_WaveInOutOpenFlags__NAudio dwFlags)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveOutOpen\' from this method. Please look for this method in build warnin" +
					"gs for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveOutOpenWindow(
					global::System.IntPtr* hWaveOut, 
					global::System.IntPtr uDeviceID, 
					global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType* lpFormat, 
					global::System.IntPtr callbackWindowHandle, 
					global::System.IntPtr dwInstance, 
					global::NAudio_Wave.WaveInterop_WaveInOutOpenFlags__NAudio dwFlags)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveOutOpenWindow\' from this method. Please look for this method in build " +
					"warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveOutReset(global::System.IntPtr hWaveOut)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveOutReset\' from this method. Please look for this method in build warni" +
					"ngs for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveOutClose(global::System.IntPtr hWaveOut)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveOutClose\' from this method. Please look for this method in build warni" +
					"ngs for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveOutPause(global::System.IntPtr hWaveOut)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveOutPause\' from this method. Please look for this method in build warni" +
					"ngs for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveOutRestart(global::System.IntPtr hWaveOut)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveOutRestart\' from this method. Please look for this method in build war" +
					"nings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveOutGetPosition(
					global::System.IntPtr hWaveOut, 
					global::NAudio_Wave.MmTime__NAudio* mmTime, 
					int uSize)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveOutGetPosition\' from this method. Please look for this method in build" +
					" warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveOutSetVolume(
					global::System.IntPtr hWaveOut, 
					int dwVolume)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveOutSetVolume\' from this method. Please look for this method in build w" +
					"arnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveOutGetVolume(
					global::System.IntPtr hWaveOut, 
					int* dwVolume)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveOutGetVolume\' from this method. Please look for this method in build w" +
					"arnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveOutGetDevCaps(
					global::System.IntPtr deviceID, 
					global::NAudio_Wave.WaveOutCapabilities__NAudio__Impl.UnsafeType* waveOutCaps, 
					int waveOutCapsSize)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveOutGetDevCaps\' from this method. Please look for this method in build " +
					"warnings for more details. ");
		}

		public static int waveInGetNumDevs()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveInGetNumDevs\' from this method. Please look for this method in build w" +
					"arnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveInGetDevCaps(
					global::System.IntPtr deviceID, 
					global::NAudio_Wave.WaveInCapabilities__NAudio__Impl.UnsafeType* waveInCaps, 
					int waveInCapsSize)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveInGetDevCaps\' from this method. Please look for this method in build w" +
					"arnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveInAddBuffer(
					global::System.IntPtr hWaveIn, 
					global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType* pwh, 
					int cbwh)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveInAddBuffer\' from this method. Please look for this method in build wa" +
					"rnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveInClose(global::System.IntPtr hWaveIn)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveInClose\' from this method. Please look for this method in build warnin" +
					"gs for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveInOpen(
					global::System.IntPtr* hWaveIn, 
					global::System.IntPtr uDeviceID, 
					global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType* lpFormat, 
					void* dwCallback, 
					global::System.IntPtr dwInstance, 
					global::NAudio_Wave.WaveInterop_WaveInOutOpenFlags__NAudio dwFlags)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveInOpen\' from this method. Please look for this method in build warning" +
					"s for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveInOpenWindow(
					global::System.IntPtr* hWaveIn, 
					global::System.IntPtr uDeviceID, 
					global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType* lpFormat, 
					global::System.IntPtr callbackWindowHandle, 
					global::System.IntPtr dwInstance, 
					global::NAudio_Wave.WaveInterop_WaveInOutOpenFlags__NAudio dwFlags)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveInOpenWindow\' from this method. Please look for this method in build w" +
					"arnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveInPrepareHeader(
					global::System.IntPtr hWaveIn, 
					global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType* lpWaveInHdr, 
					int uSize)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveInPrepareHeader\' from this method. Please look for this method in buil" +
					"d warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveInUnprepareHeader(
					global::System.IntPtr hWaveIn, 
					global::NAudio_Wave.WaveHeader__NAudio__Impl.UnsafeType* lpWaveInHdr, 
					int uSize)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveInUnprepareHeader\' from this method. Please look for this method in bu" +
					"ild warnings for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveInReset(global::System.IntPtr hWaveIn)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveInReset\' from this method. Please look for this method in build warnin" +
					"gs for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveInStart(global::System.IntPtr hWaveIn)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveInStart\' from this method. Please look for this method in build warnin" +
					"gs for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveInStop(global::System.IntPtr hWaveIn)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveInStop\' from this method. Please look for this method in build warning" +
					"s for more details. ");
		}

		public static global::NAudio.MmResult__NAudio waveInGetPosition(
					global::System.IntPtr hWaveIn, 
					global::NAudio_Wave.MmTime__NAudio* mmTime, 
					int uSize)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'winmm.dll!waveInGetPosition\' from this method. Please look for this method in build " +
					"warnings for more details. ");
		}
	}

	public unsafe static partial class mfplat_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("mfplat.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int MFStartup(
					int version, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("mfplat.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int MFShutdown();

		[global::System.Runtime.InteropServices.DllImport("mfplat.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int MFCreateMediaType(void** ppMFType);

		[global::System.Runtime.InteropServices.DllImport("mfplat.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int MFInitMediaTypeFromWaveFormatEx(
					void* pMFType, 
					global::NAudio_Wave.WaveFormat__NAudio__Impl.UnsafeType* pWaveFormat, 
					int cbBufSize);

		[global::System.Runtime.InteropServices.DllImport("mfplat.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int MFCreateWaveFormatExFromMFMediaType(
					void* pMFType, 
					global::System.IntPtr* ppWF, 
					int* pcbSize, 
					int flags);

		[global::System.Runtime.InteropServices.DllImport("mfplat.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int MFCreateMFByteStreamOnStreamEx(
					void** punkStream, 
					void** ppByteStream);

		[global::System.Runtime.InteropServices.DllImport("mfplat.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int MFCreateSample(void** ppIMFSample);

		[global::System.Runtime.InteropServices.DllImport("mfplat.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int MFCreateMemoryBuffer(
					int cbMaxLength, 
					void** ppBuffer);

		[global::System.Runtime.InteropServices.DllImport("mfplat.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int MFCreateAttributes(
					void** ppMFAttributes, 
					int cInitialSize);
	}

	public unsafe static partial class mfreadwrite_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("mfreadwrite.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int MFCreateSourceReaderFromURL(
					ushort* pwszURL, 
					void* pAttributes, 
					void** ppSourceReader);

		[global::System.Runtime.InteropServices.DllImport("mfreadwrite.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int MFCreateSourceReaderFromByteStream(
					void* pByteStream, 
					void* pAttributes, 
					void** ppSourceReader);

		[global::System.Runtime.InteropServices.DllImport("mfreadwrite.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int MFCreateSinkWriterFromURL(
					ushort* pwszOutputURL, 
					void* pByteStream, 
					void* pAttributes, 
					void** ppSinkWriter);
	}

	public unsafe static partial class api_ms_win_core_synch_l1_2_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-synch-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CreateEventExW(
					global::System.IntPtr lpEventAttributes, 
					global::System.IntPtr lpName, 
					int dwFlags, 
					global::NAudio_Wave.EventAccess__NAudio dwDesiredAccess);

		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-synch-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WaitForSingleObjectEx(
					global::System.IntPtr hEvent, 
					int milliseconds, 
					int bAlertable);
	}

	public unsafe static partial class api_ms_win_core_handle_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-handle-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CloseHandle(global::System.IntPtr hObject);
	}

	public unsafe static partial class Mmdevapi_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("Mmdevapi.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ActivateAudioInterfaceAsync(
					ushort* deviceInterfacePath, 
					global::System.Guid* riid, 
					global::System.IntPtr activationParams, 
					void* completionHandler, 
					void** activationOperation);
	}

	public unsafe static partial class msdmo_dll_PInvokes
	{
		public static int DMOEnum(
					global::System.Guid* guidCategory, 
					global::NAudio_Dmo.DmoEnumFlags__NAudio flags, 
					int inTypes, 
					global::NAudio_Dmo.DmoPartialMediaType__NAudio* inTypesArray, 
					int outTypes, 
					global::NAudio_Dmo.DmoPartialMediaType__NAudio* outTypesArray, 
					void** enumDmo)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'msdmo.dll!DMOEnum\' from this method. Please look for this method in build warnings f" +
					"or more details. ");
		}

		public static int MoFreeMediaType(global::NAudio_Dmo.DmoMediaType__NAudio__Impl.UnsafeType* mediaType)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'msdmo.dll!MoFreeMediaType\' from this method. Please look for this method in build wa" +
					"rnings for more details. ");
		}

		public static int MoInitMediaType(
					global::NAudio_Dmo.DmoMediaType__NAudio__Impl.UnsafeType* mediaType, 
					int formatBlockBytes)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'msdmo.dll!MoInitMediaType\' from this method. Please look for this method in build wa" +
					"rnings for more details. ");
		}

		public static int DMOGetName(
					global::System.Guid* clsidDMO, 
					byte* name)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'msdmo.dll!DMOGetName\' from this method. Please look for this method in build warning" +
					"s for more details. ");
		}
	}

	public unsafe static partial class api_ms_win_core_com_l1_1_1_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-com-l1-1-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int PropVariantClear(global::NAudio_CoreAudioApi_Interfaces.PropVariant__NAudio* pvar);

		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-com-l1-1-1.dll", EntryPoint="PropVariantClear", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int PropVariantClear__0(global::System.IntPtr pvar);
	}

	public unsafe static partial class kernel32_PInvokes
	{
		public static void CopyMemory(
					global::System.IntPtr destination, 
					global::System.IntPtr source, 
					uint length)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'kernel32!CopyMemory\' from this method. Please look for this method in build warnings" +
					" for more details. ");
		}
	}

	public unsafe static partial class libc_PInvokes
	{
		public static global::System.IntPtr StrError(int errnum)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libc!StrError\' from this method. Please look for this method in build warnings for m" +
					"ore details. ");
		}

		public static int Uname(global::Unosquare_RaspberryIO_Native.SystemName__Unosquare_RaspberryIO__Impl.UnsafeType* name)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libc!Uname\' from this method. Please look for this method in build warnings for more" +
					" details. ");
		}

		public static int Chmod(
					byte* filename, 
					uint mode)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libc!Chmod\' from this method. Please look for this method in build warnings for more" +
					" details. ");
		}

		public static int StringToInteger(
					byte* numberString, 
					global::System.IntPtr endPointer, 
					int numberBase)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libc!StringToInteger\' from this method. Please look for this method in build warning" +
					"s for more details. ");
		}

		public static int Write(
					int fd, 
					byte* buffer, 
					int count)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libc!Write\' from this method. Please look for this method in build warnings for more" +
					" details. ");
		}
	}

	public unsafe static partial class MonoPosixHelper_PInvokes
	{
		public static int Strerror(
					int error, 
					byte* buffer, 
					ulong length)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'MonoPosixHelper!Strerror\' from this method. Please look for this method in build war" +
					"nings for more details. ");
		}
	}

	public unsafe static partial class libwiringPi_so_2_50_PInvokes
	{
		public static int WiringPiSetup()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!WiringPiSetup\' from this method. Please look for this method in " +
					"build warnings for more details. ");
		}

		public static int WiringPiSetupSys()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!WiringPiSetupSys\' from this method. Please look for this method " +
					"in build warnings for more details. ");
		}

		public static int WiringPiSetupGpio()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!WiringPiSetupGpio\' from this method. Please look for this method" +
					" in build warnings for more details. ");
		}

		public static int WiringPiSetupPhys()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!WiringPiSetupPhys\' from this method. Please look for this method" +
					" in build warnings for more details. ");
		}

		public static void PinModeAlt(
					int pin, 
					int mode)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!PinModeAlt\' from this method. Please look for this method in bui" +
					"ld warnings for more details. ");
		}

		public static void PinMode(
					int pin, 
					int mode)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!PinMode\' from this method. Please look for this method in build " +
					"warnings for more details. ");
		}

		public static void PullUpDnControl(
					int pin, 
					int pud)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!PullUpDnControl\' from this method. Please look for this method i" +
					"n build warnings for more details. ");
		}

		public static int DigitalRead(int pin)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!DigitalRead\' from this method. Please look for this method in bu" +
					"ild warnings for more details. ");
		}

		public static void DigitalWrite(
					int pin, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!DigitalWrite\' from this method. Please look for this method in b" +
					"uild warnings for more details. ");
		}

		public static void PwmWrite(
					int pin, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!PwmWrite\' from this method. Please look for this method in build" +
					" warnings for more details. ");
		}

		public static int AnalogRead(int pin)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!AnalogRead\' from this method. Please look for this method in bui" +
					"ld warnings for more details. ");
		}

		public static void AnalogWrite(
					int pin, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!AnalogWrite\' from this method. Please look for this method in bu" +
					"ild warnings for more details. ");
		}

		public static int PiBoardRev()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!PiBoardRev\' from this method. Please look for this method in bui" +
					"ld warnings for more details. ");
		}

		public static int PiBoardId(
					int* model, 
					int* mem, 
					int* maker, 
					int* overVolted)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!PiBoardId\' from this method. Please look for this method in buil" +
					"d warnings for more details. ");
		}

		public static int WpiPinToGpio(int wPiPin)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!WpiPinToGpio\' from this method. Please look for this method in b" +
					"uild warnings for more details. ");
		}

		public static int PhysPinToGpio(int physPin)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!PhysPinToGpio\' from this method. Please look for this method in " +
					"build warnings for more details. ");
		}

		public static int SetPadDrive(
					int group, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!SetPadDrive\' from this method. Please look for this method in bu" +
					"ild warnings for more details. ");
		}

		public static int GetAlt(int pin)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!GetAlt\' from this method. Please look for this method in build w" +
					"arnings for more details. ");
		}

		public static int PwmToneWrite(
					int pin, 
					int freq)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!PwmToneWrite\' from this method. Please look for this method in b" +
					"uild warnings for more details. ");
		}

		public static void DigitalWriteByte(int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!DigitalWriteByte\' from this method. Please look for this method " +
					"in build warnings for more details. ");
		}

		public static void DigitalWriteByte2(int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!DigitalWriteByte2\' from this method. Please look for this method" +
					" in build warnings for more details. ");
		}

		public static uint DigitalReadByte()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!DigitalReadByte\' from this method. Please look for this method i" +
					"n build warnings for more details. ");
		}

		public static uint DigitalReadByte2()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!DigitalReadByte2\' from this method. Please look for this method " +
					"in build warnings for more details. ");
		}

		public static void PwmSetMode(int mode)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!PwmSetMode\' from this method. Please look for this method in bui" +
					"ld warnings for more details. ");
		}

		public static void PwmSetRange(uint range)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!PwmSetRange\' from this method. Please look for this method in bu" +
					"ild warnings for more details. ");
		}

		public static void PwmSetClock(int divisor)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!PwmSetClock\' from this method. Please look for this method in bu" +
					"ild warnings for more details. ");
		}

		public static void GpioClockSet(
					int pin, 
					int freq)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!GpioClockSet\' from this method. Please look for this method in b" +
					"uild warnings for more details. ");
		}

		public static int WiringPiISR(
					int pin, 
					int mode, 
					void* method)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!WiringPiISR\' from this method. Please look for this method in bu" +
					"ild warnings for more details. ");
		}

		public static int PiThreadCreate(void* method)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!PiThreadCreate\' from this method. Please look for this method in" +
					" build warnings for more details. ");
		}

		public static void PiLock(int key)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!PiLock\' from this method. Please look for this method in build w" +
					"arnings for more details. ");
		}

		public static void PiUnlock(int key)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!PiUnlock\' from this method. Please look for this method in build" +
					" warnings for more details. ");
		}

		public static int PiHiPri(int priority)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!PiHiPri\' from this method. Please look for this method in build " +
					"warnings for more details. ");
		}

		public static void Delay(uint howLong)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!Delay\' from this method. Please look for this method in build wa" +
					"rnings for more details. ");
		}

		public static void DelayMicroseconds(uint howLong)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!DelayMicroseconds\' from this method. Please look for this method" +
					" in build warnings for more details. ");
		}

		public static uint Millis()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!Millis\' from this method. Please look for this method in build w" +
					"arnings for more details. ");
		}

		public static uint Micros()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!Micros\' from this method. Please look for this method in build w" +
					"arnings for more details. ");
		}

		public static int WiringPiI2CRead(int fd)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!WiringPiI2CRead\' from this method. Please look for this method i" +
					"n build warnings for more details. ");
		}

		public static int WiringPiI2CReadReg8(
					int fd, 
					int reg)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!WiringPiI2CReadReg8\' from this method. Please look for this meth" +
					"od in build warnings for more details. ");
		}

		public static int WiringPiI2CReadReg16(
					int fd, 
					int reg)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!WiringPiI2CReadReg16\' from this method. Please look for this met" +
					"hod in build warnings for more details. ");
		}

		public static int WiringPiI2CWrite(
					int fd, 
					int data)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!WiringPiI2CWrite\' from this method. Please look for this method " +
					"in build warnings for more details. ");
		}

		public static int WiringPiI2CWriteReg8(
					int fd, 
					int reg, 
					int data)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!WiringPiI2CWriteReg8\' from this method. Please look for this met" +
					"hod in build warnings for more details. ");
		}

		public static int WiringPiI2CWriteReg16(
					int fd, 
					int reg, 
					int data)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!WiringPiI2CWriteReg16\' from this method. Please look for this me" +
					"thod in build warnings for more details. ");
		}

		public static int WiringPiI2CSetup(int devId)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!WiringPiI2CSetup\' from this method. Please look for this method " +
					"in build warnings for more details. ");
		}

		public static int SerialOpen(
					byte* device, 
					int baud)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!SerialOpen\' from this method. Please look for this method in bui" +
					"ld warnings for more details. ");
		}

		public static int SerialClose(int fd)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!SerialClose\' from this method. Please look for this method in bu" +
					"ild warnings for more details. ");
		}

		public static void SerialPutchar(
					int fd, 
					byte c)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!SerialPutchar\' from this method. Please look for this method in " +
					"build warnings for more details. ");
		}

		public static void SerialPuts(
					int fd, 
					byte* s)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!SerialPuts\' from this method. Please look for this method in bui" +
					"ld warnings for more details. ");
		}

		public static int SerialDataAvail(int fd)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!SerialDataAvail\' from this method. Please look for this method i" +
					"n build warnings for more details. ");
		}

		public static int SerialGetchar(int fd)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!SerialGetchar\' from this method. Please look for this method in " +
					"build warnings for more details. ");
		}

		public static void SerialFlush(int fd)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!SerialFlush\' from this method. Please look for this method in bu" +
					"ild warnings for more details. ");
		}

		public static byte ShiftIn(
					byte dPin, 
					byte cPin, 
					byte order)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!ShiftIn\' from this method. Please look for this method in build " +
					"warnings for more details. ");
		}

		public static void ShiftOut(
					byte dPin, 
					byte cPin, 
					byte order, 
					byte val)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!ShiftOut\' from this method. Please look for this method in build" +
					" warnings for more details. ");
		}

		public static int SoftPwmCreate(
					int pin, 
					int initialValue, 
					int pwmRange)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!SoftPwmCreate\' from this method. Please look for this method in " +
					"build warnings for more details. ");
		}

		public static void SoftPwmWrite(
					int pin, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!SoftPwmWrite\' from this method. Please look for this method in b" +
					"uild warnings for more details. ");
		}

		public static void SoftPwmStop(int pin)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!SoftPwmStop\' from this method. Please look for this method in bu" +
					"ild warnings for more details. ");
		}

		public static int SoftToneCreate(int pin)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!SoftToneCreate\' from this method. Please look for this method in" +
					" build warnings for more details. ");
		}

		public static void SoftToneStop(int pin)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!SoftToneStop\' from this method. Please look for this method in b" +
					"uild warnings for more details. ");
		}

		public static void SoftToneWrite(
					int pin, 
					int freq)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!SoftToneWrite\' from this method. Please look for this method in " +
					"build warnings for more details. ");
		}

		public static int WiringPiSPIGetFd(int channel)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!WiringPiSPIGetFd\' from this method. Please look for this method " +
					"in build warnings for more details. ");
		}

		public static int WiringPiSPIDataRW(
					int channel, 
					byte* data, 
					int len)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!WiringPiSPIDataRW\' from this method. Please look for this method" +
					" in build warnings for more details. ");
		}

		public static int WiringPiSPISetupMode(
					int channel, 
					int speed, 
					int mode)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!WiringPiSPISetupMode\' from this method. Please look for this met" +
					"hod in build warnings for more details. ");
		}

		public static int WiringPiSPISetup(
					int channel, 
					int speed)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libwiringPi.so.2.50!WiringPiSPISetup\' from this method. Please look for this method " +
					"in build warnings for more details. ");
		}
	}

	public unsafe static partial class _MRT__PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint RhpGetFuncEvalParameterBufferSize();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint RhpGetFuncEvalMode();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint RhpRecordDebuggeeInitiatedHandle(void* objectHandle);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void RhpVerifyDebuggerCleanup();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr RhpGetCurrentThread();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void RhWaitForPendingFinalizers(int allowReentrantWait);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", EntryPoint="RhYield", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int _RhYield();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void RhFlushProcessWriteBuffers();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", EntryPoint="RhCallDescrWorker", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void RhCallDescrWorkerNative(global::System.IntPtr callDescr);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void memmove(
					byte* dmem, 
					byte* smem, 
					ulong size);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void memset(
					byte* mem, 
					int value, 
					ulong size);
	}

	public unsafe static partial class __PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("*", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CallingConventionConverter_GetStubs(
					global::System.IntPtr* returnVoidStub, 
					global::System.IntPtr* returnIntegerStub, 
					global::System.IntPtr* commonStub);
	}

	public unsafe static partial class api_ms_win_core_winrt_string_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-string-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WindowsCreateStringReference(
					ushort* sourceString, 
					uint length, 
					global::System_Runtime_InteropServices.HSTRING_HEADER__System_Private_Interop* phstringHeader, 
					void* hstring);
	}

	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-errorhandling-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetLastError();

		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-errorhandling-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void SetLastError(uint dwErrCode);
	}

	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RoInitialize(uint initType);
	}

	public unsafe static partial class api_ms_win_core_localization_l1_2_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int IsValidLocaleName(ushort* lpLocaleName);

		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ResolveLocaleName(
					ushort* lpNameToResolve, 
					ushort* lpLocaleName, 
					int cchLocaleName);
	}

	public unsafe static partial class ws2_32_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockname(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int* socketAddressSize);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getpeername(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int* socketAddressSize);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int select(
					int ignoredParameter, 
					global::System.IntPtr* readfds, 
					global::System.IntPtr* writefds, 
					global::System.IntPtr* exceptfds, 
					global::_.Interop_Winsock_TimeValue__System_Net_Sockets* timeout);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="select", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int select__0(
					int ignoredParameter, 
					global::System.IntPtr* readfds, 
					global::System.IntPtr* writefds, 
					global::System.IntPtr* exceptfds, 
					global::System.IntPtr nullTimeout);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives ioctlsocket(
					global::System.IntPtr socketHandle, 
					int cmd, 
					int* argp);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					int* optionValue, 
					int* optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int recv(
					global::System.IntPtr socketHandle, 
					byte* pinnedBuffer, 
					int len, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int send(
					global::System.IntPtr socketHandle, 
					byte* pinnedBuffer, 
					int len, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives shutdown(
					global::System.IntPtr socketHandle, 
					int how);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					int* optionValue, 
					int optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="getsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__0(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					global::_.Interop_Winsock_Linger__System_Net_Sockets* optionValue, 
					int* optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="getsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__1(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					global::_.Interop_Winsock_IPMulticastRequest__System_Net_Sockets* optionValue, 
					int* optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="getsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__2(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets__Impl.UnsafeType* optionValue, 
					int* optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives listen(
					global::System.IntPtr socketHandle, 
					int backlog);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr WSASocketW(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Sockets.SocketType__System_Net_Sockets socketType, 
					global::System_Net_Sockets.ProtocolType__System_Net_Sockets protocolType, 
					global::System.IntPtr protocolInfo, 
					uint group, 
					global::_.Interop_Winsock_SocketConstructorFlags__System_Net_Sockets flags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WSAGetOverlappedResult(
					global::System.IntPtr socketHandle, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					uint* bytesTransferred, 
					int wait, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets* socketFlags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives bind(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int socketAddressSize);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSARecv(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.WSABuffer__System_Net_Sockets* buffer, 
					int bufferCount, 
					int* bytesTransferred, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets* socketFlags, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					global::System.IntPtr completionRoutine);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSASend(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.WSABuffer__System_Net_Sockets* buffers, 
					int bufferCount, 
					int* bytesTransferred, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					global::System.IntPtr completionRoutine);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAStartup(
					short wVersionRequested, 
					global::_.Interop_Winsock_WSAData__System_Net_NameResolution__Impl.UnsafeType* lpWSAData);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives gethostname(
					byte* hostName, 
					int bufferLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives closesocket(global::System.IntPtr socketHandle);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="ioctlsocket", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives ioctlsocket__0(
					global::System.IntPtr handle, 
					int cmd, 
					int* argp);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="setsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__0(
					global::System.IntPtr handle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					global::_.Interop_Winsock_Linger__System_Net_Sockets* linger, 
					int optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetAddrInfoExW(
					ushort* pName, 
					ushort* pServiceName, 
					int dwNamespace, 
					global::System.IntPtr lpNspId, 
					global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution* pHints, 
					global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution** ppResult, 
					global::System.IntPtr timeout, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* lpOverlapped, 
					void* lpCompletionRoutine, 
					global::System.IntPtr* lpNameHandle);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAConnect(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int socketAddressSize, 
					global::System.IntPtr inBuffer, 
					global::System.IntPtr outBuffer, 
					global::System.IntPtr sQOS, 
					global::System.IntPtr gQOS);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="setsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__1(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					byte* optionValue, 
					int optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="setsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__2(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					global::System.IntPtr* pointer, 
					int optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="WSASocketW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr WSASocketW__0(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Sockets.SocketType__System_Net_Sockets socketType, 
					int protocolType, 
					global::System.IntPtr protocolInfo, 
					int group, 
					int flags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void FreeAddrInfoExW(global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution* pAddrInfo);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSASendTo(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.WSABuffer__System_Net_Sockets* buffers, 
					int bufferCount, 
					int* bytesTransferred, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags, 
					global::System.IntPtr socketAddress, 
					int socketAddressSize, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					global::System.IntPtr completionRoutine);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAIoctl(
					global::System.IntPtr socketHandle, 
					int ioControlCode, 
					global::System.Guid* guid, 
					int guidSize, 
					global::System.IntPtr* funcPtr, 
					int funcPtrSize, 
					int* bytesTransferred, 
					global::System.IntPtr shouldBeNull, 
					global::System.IntPtr shouldBeNull2);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="WSASocketW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr WSASocketW__1(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Internals.SocketType__System_Net_NameResolution socketType, 
					int protocolType, 
					global::System.IntPtr protocolInfo, 
					int group, 
					int flags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="closesocket", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives closesocket__0(global::System.IntPtr socketHandle);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives GetNameInfoW(
					byte* sa, 
					int salen, 
					ushort* host, 
					int hostlen, 
					ushort* serv, 
					int servlen, 
					int flags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetAddrInfoW(
					ushort* nodename, 
					ushort* servicename, 
					global::System_Net_Sockets.AddressInfo__System_Net_NameResolution* hints, 
					global::System.IntPtr* handle);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void freeaddrinfo(global::System.IntPtr info);
	}

	public unsafe static partial class crypt32_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CertDuplicateCertificateContext(global::System.IntPtr pCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetCertificateContextProperty(
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertContextPropId__System_Security_Cryptography_X509Certificates dwPropId, 
					global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pvData, 
					int* pcbData);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertGetCertificateContextProperty", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetCertificateContextProperty__0(
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertContextPropId__System_Security_Cryptography_X509Certificates dwPropId, 
					byte* pvData, 
					int* pcbData);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptQueryObject(
					global::Internal_Cryptography_Pal_Native.CertQueryObjectType__System_Security_Cryptography_X509Certificates dwObjectType, 
					void* pvObject, 
					global::Internal_Cryptography_Pal_Native.ExpectedContentTypeFlags__System_Security_Cryptography_X509Certificates dwExpectedContentTypeFlags, 
					global::Internal_Cryptography_Pal_Native.ExpectedFormatTypeFlags__System_Security_Cryptography_X509Certificates dwExpectedFormatTypeFlags, 
					int dwFlags, 
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates* pdwMsgAndCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.ContentType__System_Security_Cryptography_X509Certificates* pdwContentType, 
					global::Internal_Cryptography_Pal_Native.FormatType__System_Security_Cryptography_X509Certificates* pdwFormatType, 
					global::System.IntPtr* phCertStore, 
					global::System.IntPtr* phMsg, 
					global::System.IntPtr* ppvContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertDuplicateCertificateContext", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CertDuplicateCertificateContextWithKeyContainerDeletion(global::System.IntPtr pCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertFreeCertificateContext(global::System.IntPtr pCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptMsgGetParam(
					global::System.IntPtr hCryptMsg, 
					global::Internal_Cryptography_Pal_Native.CryptMessageParameterType__System_Security_Cryptography_X509Certificates dwParamType, 
					int dwIndex, 
					int* pvData, 
					int* pcbData);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CryptMsgGetParam", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptMsgGetParam__0(
					global::System.IntPtr hCryptMsg, 
					global::Internal_Cryptography_Pal_Native.CryptMessageParameterType__System_Security_Cryptography_X509Certificates dwParamType, 
					int dwIndex, 
					byte* pvData, 
					int* pcbData);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr PFXImportCertStore(
					global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pPFX, 
					global::System.IntPtr password, 
					global::Internal_Cryptography_Pal_Native.PfxCertStoreFlags__System_Security_Cryptography_X509Certificates dwFlags);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CryptFindOIDInfo(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Encoding dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertGetNameStringW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetNameString(
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertNameType__System_Security_Cryptography_X509Certificates dwType, 
					global::Internal_Cryptography_Pal_Native.CertNameFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::Internal_Cryptography_Pal_Native.CertNameStringType__System_Security_Cryptography_X509Certificates* pvTypePara, 
					ushort* pszNameString, 
					int cchNameString);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertCloseStore(
					global::System.IntPtr hCertStore, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptMsgClose(global::System.IntPtr hCryptMsg);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CertFindCertificateInStore(
					global::System.IntPtr hCertStore, 
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CertFindFlags__System_Security_Cryptography_X509Certificates dwFindFlags, 
					global::Internal_Cryptography_Pal_Native.CertFindType__System_Security_Cryptography_X509Certificates dwFindType, 
					void* pvFindPara, 
					global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates* pPrevCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CertEnumCertificatesInStore(
					global::System.IntPtr hCertStore, 
					global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates* pPrevCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertGetNameStringW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetNameString__0(
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertNameType__System_Security_Cryptography_X509Certificates dwType, 
					global::Internal_Cryptography_Pal_Native.CertNameFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::Internal_Cryptography_Pal_Native.CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates* pvPara, 
					ushort* pszNameString, 
					int cchNameString);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertVerifyCertificateChainPolicy(
					global::System.IntPtr pszPolicyOID, 
					global::System.IntPtr pChainContext, 
					global::_.Interop_Crypt32_CERT_CHAIN_POLICY_PARA__System_Net_Security* pPolicyPara, 
					global::_.Interop_Crypt32_CERT_CHAIN_POLICY_STATUS__System_Net_Security* pPolicyStatus);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CryptFindOIDInfo", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CryptFindOIDInfo__0(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_X509Certificates dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertControlStore(
					global::System.IntPtr hCertStore, 
					global::Internal_Cryptography_Pal_Native.CertControlStoreFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::Internal_Cryptography_Pal_Native.CertControlStoreType__System_Security_Cryptography_X509Certificates dwControlType, 
					global::System.IntPtr pvCtrlPara);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetCertificateChain(
					global::System.IntPtr hChainEngine, 
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates* pTime, 
					global::System.IntPtr hStore, 
					global::Internal_Cryptography_Pal_Native.CERT_CHAIN_PARA__System_Security_Cryptography_X509Certificates* pChainPara, 
					global::Internal_Cryptography_Pal_Native.CertChainFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::System.IntPtr pvReserved, 
					global::System.IntPtr* ppChainContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertEnumCertificatesInStore", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security* CertEnumCertificatesInStore__0(
					global::System.IntPtr hCertStore, 
					global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security* pPrevCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertVerifyCertificateChainPolicy", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertVerifyCertificateChainPolicy__0(
					global::System.IntPtr pszPolicyOID, 
					global::System.IntPtr pChainContext, 
					global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_PARA__System_Security_Cryptography_X509Certificates* pPolicyPara, 
					global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_STATUS__System_Security_Cryptography_X509Certificates* pPolicyStatus);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertNameToStrW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertNameToStr(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pName, 
					global::Internal_Cryptography_Pal_Native.CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates dwStrType, 
					ushort* psz, 
					int csz);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertFreeCertificateContext", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertFreeCertificateContext__0(global::System.IntPtr pCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptFormatObject(
					int dwCertEncodingType, 
					int dwFormatType, 
					int dwFormatStrType, 
					global::System.IntPtr pFormatStruct, 
					byte* lpszStructType, 
					byte* pbEncoded, 
					int cbEncoded, 
					ushort* pbFormat, 
					int* pcbFormat);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CertOpenStore(
					global::System.IntPtr lpszStoreProvider, 
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwMsgAndCertEncodingType, 
					global::System.IntPtr hCryptProv, 
					global::Internal_Cryptography_Pal_Native.CertStoreFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					ushort* pvPara);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertAddCertificateLinkToStore(
					global::System.IntPtr hCertStore, 
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertStoreAddDisposition__System_Security_Cryptography_X509Certificates dwAddDisposition, 
					global::System.IntPtr ppStoreContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CertFreeCertificateChain(global::System.IntPtr pChainContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CryptFormatObject", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptFormatObject__0(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.FormatObjectType__System_Security_Cryptography_X509Certificates dwFormatType, 
					global::Internal_Cryptography_Pal_Native.FormatObjectStringType__System_Security_Cryptography_X509Certificates dwFormatStrType, 
					global::System.IntPtr pFormatStruct, 
					global::System.IntPtr lpszStructType, 
					byte* pbEncoded, 
					int cbEncoded, 
					ushort* pbFormat, 
					int* pcbFormat);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptImportPublicKeyInfoEx2(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates* pInfo, 
					int dwFlags, 
					void* pvAuxInfo, 
					global::System.IntPtr* phKey);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptDecodeObject(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::System.IntPtr lpszStructType, 
					byte* pbEncoded, 
					int cbEncoded, 
					global::Internal_Cryptography_Pal_Native.CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					byte* pvStructInfo, 
					int* pcbStructInfo);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* CertFindExtension(
					byte* pszObjId, 
					int cExtensions, 
					global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* rgExtensions);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetValidUsages(
					int cCerts, 
					global::System.IntPtr* rghCerts, 
					int* cNumOIDs, 
					void* rghOIDs, 
					int* pcbOIDs);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetIntendedKeyUsage(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates* pCertInfo, 
					global::System_Security_Cryptography_X509Certificates.X509KeyUsageFlags__System_Security_Cryptography_X509Certificates* pbKeyUsage, 
					int cbKeyUsage);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertVerifyTimeValidity(
					global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates* pTimeToVerify, 
					global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates* pCertInfo);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CryptDecodeObject", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptDecodeObjectPointer(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::System.IntPtr lpszStructType, 
					byte* pbEncoded, 
					int cbEncoded, 
					global::Internal_Cryptography_Pal_Native.CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					void* pvStructInfo, 
					int* pcbStructInfo);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CryptFindOIDInfo", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CryptFindOIDInfo__1(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Cng dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group);
	}

	public unsafe static partial class iphlpapi_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("iphlpapi.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetAdaptersAddresses(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives family, 
					uint flags, 
					global::System.IntPtr pReserved, 
					global::System.IntPtr adapterAddresses, 
					uint* outBufLen);

		[global::System.Runtime.InteropServices.DllImport("iphlpapi.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetNetworkParams(
					global::System.IntPtr pFixedInfo, 
					uint* pOutBufLen);

		[global::System.Runtime.InteropServices.DllImport("iphlpapi.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetPerAdapterInfo(
					uint IfIndex, 
					global::System.IntPtr pPerAdapterInfo, 
					uint* pOutBufLen);

		[global::System.Runtime.InteropServices.DllImport("iphlpapi.dll", EntryPoint="GetNetworkParams", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetNetworkParams__0(
					global::System.IntPtr pFixedInfo, 
					uint* pOutBufLen);
	}

	public unsafe static partial class advapi32_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CreateProcessWithLogonW(
					ushort* userName, 
					ushort* domain, 
					global::System.IntPtr password, 
					global::_.Interop_Advapi32_LogonFlags__System_Diagnostics_Process logonFlags, 
					ushort* appName, 
					ushort* cmdLine, 
					int creationFlags, 
					global::System.IntPtr environmentBlock, 
					ushort* lpCurrentDirectory, 
					global::_.Interop_Kernel32_STARTUPINFO__System_Diagnostics_Process* lpStartupInfo, 
					global::_.Interop_Kernel32_PROCESS_INFORMATION__System_Diagnostics_Process* lpProcessInformation);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="LookupPrivilegeValueW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int LookupPrivilegeValue(
					ushort* lpSystemName, 
					ushort* lpName, 
					global::_.Interop_Advapi32_LUID__System_Diagnostics_Process* lpLuid);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int OpenProcessToken(
					global::System.IntPtr ProcessHandle, 
					int DesiredAccess, 
					global::System.IntPtr* TokenHandle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int AdjustTokenPrivileges(
					global::System.IntPtr TokenHandle, 
					int DisableAllPrivileges, 
					global::_.Interop_Advapi32_TokenPrivileges__System_Diagnostics_Process__Impl.UnsafeType* NewState, 
					int BufferLength, 
					global::System.IntPtr PreviousState, 
					global::System.IntPtr ReturnLength);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptAcquireContextW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptAcquireContext(
					global::System.IntPtr* psafeProvHandle, 
					ushort* pszContainer, 
					ushort* pszProvider, 
					int dwProvType, 
					global::Internal_Cryptography_Pal_Native.CryptAcquireContextFlags__System_Security_Cryptography_X509Certificates dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RevertToSelf();

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ImpersonateLoggedOnUser(global::System.IntPtr userToken);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int OpenThreadToken(
					global::System.IntPtr ThreadHandle, 
					global::System_Security_Principal.TokenAccessLevels__System_Security_Principal_Windows dwDesiredAccess, 
					int bOpenAsSelf, 
					global::System.IntPtr* phThreadToken);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="OpenProcessToken", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int OpenProcessToken__0(
					global::System.IntPtr ProcessToken, 
					global::System_Security_Principal.TokenAccessLevels__System_Security_Principal_Windows DesiredAccess, 
					global::System.IntPtr* TokenHandle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptGetKeyParam(
					global::System.IntPtr safeKeyHandle, 
					int dwParam, 
					byte* pbData, 
					int* pdwDataLen, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptGetDefaultProviderW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptGetDefaultProvider(
					int dwProvType, 
					global::System.IntPtr pdwReserved, 
					int dwFlags, 
					ushort* pszProvName, 
					int* IntPtrProvName);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptAcquireContextW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptAcquireContext__0(
					global::System.IntPtr* psafeProvHandle, 
					ushort* pszContainer, 
					ushort* pszProvider, 
					int dwProvType, 
					uint dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptGetUserKey", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int _CryptGetUserKey(
					global::System.IntPtr safeProvHandle, 
					int dwKeySpec, 
					global::System.IntPtr* safeKeyHandle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptGetProvParam(
					global::System.IntPtr safeProvHandle, 
					global::_.Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp dwParam, 
					global::System.IntPtr pbData, 
					int* dwDataLen, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptDestroyKey(global::System.IntPtr hKey);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint LsaNtStatusToWinError(uint status);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DuplicateTokenEx(
					global::System.IntPtr hExistingToken, 
					uint dwDesiredAccess, 
					global::System.IntPtr lpTokenAttributes, 
					uint ImpersonationLevel, 
					uint TokenType, 
					global::System.IntPtr* phNewToken);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetTokenInformation(
					global::System.IntPtr TokenHandle, 
					uint TokenInformationClass, 
					global::System.IntPtr TokenInformation, 
					uint TokenInformationLength, 
					uint* ReturnLength);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptReleaseContext(
					global::System.IntPtr safeProvHandle, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptImportKey", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int _CryptImportKey(
					global::System.IntPtr hProv, 
					byte* pbData, 
					int dwDataLen, 
					global::System.IntPtr hPubKey, 
					int dwFlags, 
					global::System.IntPtr* phKey);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptSetProvParam", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptSetProvParamIndirectPtr(
					global::System.IntPtr safeProvHandle, 
					global::_.Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp dwParam, 
					global::System.IntPtr* pbData, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptSetProvParam(
					global::System.IntPtr safeProvHandle, 
					global::_.Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp dwParam, 
					global::System.IntPtr pbData, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="GetTokenInformation", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetTokenInformation__0(
					global::System.IntPtr TokenHandle, 
					uint TokenInformationClass, 
					global::System.IntPtr TokenInformation, 
					uint TokenInformationLength, 
					uint* ReturnLength);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptGenKey", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int _CryptGenKey(
					global::System.IntPtr safeProvHandle, 
					int Algid, 
					int dwFlags, 
					global::System.IntPtr* safeKeyHandle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint LsaLookupSids(
					global::System.IntPtr handle, 
					int count, 
					global::System.IntPtr* sids, 
					global::System.IntPtr* referencedDomains, 
					global::System.IntPtr* names);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint LsaLookupNames2(
					global::System.IntPtr handle, 
					int flags, 
					int count, 
					global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.UnsafeType* names, 
					global::System.IntPtr* referencedDomains, 
					global::System.IntPtr* sids);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint LsaOpenPolicy(
					ushort* systemName, 
					global::_.Interop_LSA_OBJECT_ATTRIBUTES__System_Security_Principal_Windows* attributes, 
					int accessMask, 
					global::System.IntPtr* handle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int LsaClose(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int LsaFreeMemory(global::System.IntPtr handle);
	}

	public unsafe static partial class BCrypt_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptCreateHash(
					global::System.IntPtr hAlgorithm, 
					global::System.IntPtr* phHash, 
					global::System.IntPtr pbHashObject, 
					int cbHashObject, 
					byte* pbSecret, 
					int cbSecret, 
					global::_.Interop_BCrypt_BCryptCreateHashFlags__System_Security_Cryptography_Algorithms dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptGetProperty(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptOpenAlgorithmProvider(
					global::System.IntPtr* phAlgorithm, 
					ushort* pszAlgId, 
					ushort* pszImplementation, 
					global::_.Interop_BCrypt_BCryptOpenAlgorithmProviderFlags__System_Security_Cryptography_Algorithms dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptHashData(
					global::System.IntPtr hHash, 
					byte* pbInput, 
					int cbInput, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptCloseAlgorithmProvider(
					global::System.IntPtr hAlgorithm, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptDestroyHash(global::System.IntPtr hHash);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptFinishHash(
					global::System.IntPtr hHash, 
					byte* pbOutput, 
					int cbOutput, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptGenRandom(
					global::System.IntPtr hAlgorithm, 
					byte* pbBuffer, 
					int cbBuffer, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptExportKey(
					global::System.IntPtr hKey, 
					global::System.IntPtr hExportKey, 
					ushort* pszBlobType, 
					byte* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", EntryPoint="BCryptGetProperty", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptGetProperty__0(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptDestroyKey(global::System.IntPtr hKey);
	}

	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-com-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					global::System.IntPtr* ppv);
	}

	public unsafe static partial class OleAut32_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("OleAut32", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void SysFreeString(global::System.IntPtr bstr);
	}

	public unsafe static partial class ncrypt_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptOpenKey(
					global::System.IntPtr hProvider, 
					global::System.IntPtr* phKey, 
					ushort* pszKeyName, 
					int dwLegacyKeySpec, 
					global::System_Security_Cryptography.CngKeyOpenOptions__System_Security_Cryptography_Cng dwFlags);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptDeleteKey(
					global::System.IntPtr hKey, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptOpenStorageProvider(
					global::System.IntPtr* phProvider, 
					ushort* pszProviderName, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptFreeObject(global::System.IntPtr hObject);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptImportKey(
					global::System.IntPtr hProvider, 
					global::System.IntPtr hImportKey, 
					ushort* pszBlobType, 
					global::System.IntPtr pParameterList, 
					global::System.IntPtr* phKey, 
					byte* pbData, 
					int cbData, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptGetProperty(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					global::System_Security_Cryptography.CngPropertyOptions__System_Security_Cryptography_Cng dwFlags);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptSetProperty(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					void* pbInput, 
					int cbInput, 
					global::System_Security_Cryptography.CngPropertyOptions__System_Security_Cryptography_Cng dwFlags);
	}

	public unsafe static partial class sspicli_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int LsaGetLogonSessionData(
					global::_.Interop_LUID__System_Security_Principal_Windows* LogonId, 
					global::System.IntPtr* ppLogonSessionData);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int LsaFreeReturnBuffer(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int EncryptMessage(
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* contextHandle, 
					uint qualityOfProtection, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputOutput, 
					uint sequenceNumber);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DecryptMessage(
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* contextHandle, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputOutput, 
					uint sequenceNumber, 
					uint* qualityOfProtection);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int EnumerateSecurityPackagesW(
					int* pkgnum, 
					global::System.IntPtr* handle);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int QueryContextAttributesW(
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* contextHandle, 
					global::_.Interop_SspiCli_ContextAttribute__System_Net_Security attribute, 
					void* buffer);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ApplyControlToken(
					void* inContextPtr, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputBuffers);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int AcquireCredentialsHandleW(
					ushort* principal, 
					ushort* moduleName, 
					int usage, 
					void* logonID, 
					global::_.Interop_SspiCli_SCHANNEL_CRED__System_Net_Security* authData, 
					void* keyCallback, 
					void* keyArgument, 
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* handlePtr, 
					long* timeStamp);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FreeContextBuffer(global::System.IntPtr contextBuffer);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int AcceptSecurityContext(
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* credentialHandle, 
					void* inContextPtr, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputBuffer, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security inFlags, 
					global::_.Interop_SspiCli_Endianness__System_Net_Security endianness, 
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* outContextPtr, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* outputBuffer, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security* attributes, 
					long* timeStamp);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DeleteSecurityContext(global::_.Interop_SspiCli_CredHandle__System_Net_Security* handlePtr);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int InitializeSecurityContextW(
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* credentialHandle, 
					void* inContextPtr, 
					byte* targetName, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security inFlags, 
					int reservedI, 
					global::_.Interop_SspiCli_Endianness__System_Net_Security endianness, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputBuffer, 
					int reservedII, 
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* outContextPtr, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* outputBuffer, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security* attributes, 
					long* timeStamp);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FreeCredentialsHandle(global::_.Interop_SspiCli_CredHandle__System_Net_Security* handlePtr);
	}

	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-robuffer-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int RoGetBufferMarshaler(void** bufferMarshalerPtr);
	}
}

